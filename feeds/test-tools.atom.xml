<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AMAN's BLOG - Test Tools</title><link href="https://jlhxxxx.github.io/" rel="alternate"></link><link href="https://jlhxxxx.github.io/feeds/test-tools.atom.xml" rel="self"></link><id>https://jlhxxxx.github.io/</id><updated>2019-05-05T00:00:00+08:00</updated><entry><title>JMeter后置处理器之常用提取器介绍</title><link href="https://jlhxxxx.github.io/jmeter-extractor.html" rel="alternate"></link><published>2019-05-05T00:00:00+08:00</published><updated>2019-05-05T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2019-05-05:/jmeter-extractor.html</id><summary type="html">&lt;h2&gt;正则表达式提取器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variable&lt;/strong&gt;：用于存储结果的变量名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular Expression&lt;/strong&gt;：正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;：模板，用于从找到的匹配项创建字符串的模板。&lt;code&gt;$1$&lt;/code&gt;表示组&lt;strong&gt;1&lt;/strong&gt;，&lt;code&gt;$2$&lt;/code&gt;表示组&lt;strong&gt;2&lt;/strong&gt;，&lt;code&gt;$0$&lt;/code&gt;表示整个表达式匹配的内容，模板创建的字符串即为上面&lt;strong&gt;变量名称&lt;/strong&gt;对应的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。&lt;code&gt;0&lt;/code&gt;为随机，正数&lt;code&gt;n&lt;/code&gt;表示第n个匹配项，&lt;code&gt;-1&lt;/code&gt;表示匹配所有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Value&lt;/strong&gt;：默认值，可为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.bejson.com/knownjson/webInterface/"&gt;JSON API免费接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以JSON响应的查询快递信息为例，返回值如下（已美化且掐头去尾）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;nu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11111111111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ischeck&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;condition …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;正则表达式提取器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variable&lt;/strong&gt;：用于存储结果的变量名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular Expression&lt;/strong&gt;：正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;：模板，用于从找到的匹配项创建字符串的模板。&lt;code&gt;$1$&lt;/code&gt;表示组&lt;strong&gt;1&lt;/strong&gt;，&lt;code&gt;$2$&lt;/code&gt;表示组&lt;strong&gt;2&lt;/strong&gt;，&lt;code&gt;$0$&lt;/code&gt;表示整个表达式匹配的内容，模板创建的字符串即为上面&lt;strong&gt;变量名称&lt;/strong&gt;对应的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。&lt;code&gt;0&lt;/code&gt;为随机，正数&lt;code&gt;n&lt;/code&gt;表示第n个匹配项，&lt;code&gt;-1&lt;/code&gt;表示匹配所有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Value&lt;/strong&gt;：默认值，可为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.bejson.com/knownjson/webInterface/"&gt;JSON API免费接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以JSON响应的查询快递信息为例，返回值如下（已美化且掐头去尾）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;nu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11111111111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ischeck&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;F00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yuantong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-19 02:36:56&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;ftime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-19 02:36:56&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;长沙市&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-18 19:32:26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;ftime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-18 19:32:26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;武汉市&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设我们要提取&lt;code&gt;time&lt;/code&gt;和&lt;code&gt;context&lt;/code&gt;。提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variable: data
Regular Expression: &amp;quot;time&amp;quot;:&amp;quot;(.*?)&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;(.*?)&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;(.*?)&amp;quot;
Template: $0$
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用Debug Sampler，获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data=
data_1=&amp;quot;time&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;
data_1_g=3
data_1_g0=&amp;quot;time&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;
data_1_g1=2019-04-19 02:36:56
data_1_g2=2019-04-19 02:36:56
data_1_g3=[长沙市]到长沙市【长沙转运中心】
data_2=&amp;quot;time&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;
data_2_g=3
data_2_g0=&amp;quot;time&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;
data_2_g1=2019-04-18 19:32:26
data_2_g2=2019-04-18 19:32:26
data_2_g3=[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
data_matchNr=2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Match No.值为&lt;code&gt;-1&lt;/code&gt;，提取全部的2个匹配项，变量名称规则&lt;code&gt;refName_Ñ_g&lt;/code&gt;，&lt;code&gt;refName&lt;/code&gt;取默认值；若为&lt;code&gt;0&lt;/code&gt;或&lt;code&gt;正数&lt;/code&gt;，只提取一个匹配项，变量名称规则&lt;code&gt;refName_g&lt;/code&gt;，&lt;code&gt;refName&lt;/code&gt;取模板创建值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template填入&lt;code&gt;$0$&lt;/code&gt;，&lt;code&gt;refName_Ñ&lt;/code&gt;对应的值为匹配到的整个匹配项；若填入&lt;code&gt;$1$$1$&lt;/code&gt;，则&lt;code&gt;refName_Ñ&lt;/code&gt;对应的值为&lt;code&gt;refName_Ñ_g1&lt;/code&gt;和&lt;code&gt;refName_Ñ_g3&lt;/code&gt;的拼接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON提取器&lt;/h2&gt;
&lt;p&gt;可以使用JSON-PATH语法从&lt;strong&gt;JSON响应&lt;/strong&gt;中提取数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variables&lt;/strong&gt;：变量名称。注意这里是复数形式，可以填写多个变量名称，名称与名称之间用&lt;code&gt;;&lt;/code&gt;分隔。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Json Path expressions&lt;/strong&gt;：JSON路径表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。用法与正则表达式提取器中一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Values&lt;/strong&gt;：默认值。注意如果提取多个变量一定要填默认值，且不能为空（可以是空格）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compute concatenation var&lt;/strong&gt;：计算连接变量。如果找到很多结果，插件将使用&lt;code&gt;,&lt;/code&gt;将它们连接起来并将其存储在名为&lt;code&gt;&amp;lt;variable name&amp;gt;_ALL&lt;/code&gt;的变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子参考正则表达式提取器的例子，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Name&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;created&lt;/span&gt; &lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;context&lt;/span&gt;
&lt;span class="nt"&gt;Json&lt;/span&gt; &lt;span class="nt"&gt;Path&lt;/span&gt; &lt;span class="nt"&gt;expressions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;context&lt;/span&gt;
&lt;span class="nt"&gt;Match&lt;/span&gt; &lt;span class="nt"&gt;No&lt;/span&gt;&lt;span class="o"&gt;.:&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt;
&lt;span class="nt"&gt;Compute&lt;/span&gt; &lt;span class="nt"&gt;concatenation&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="err"&gt;：✔&lt;/span&gt;
&lt;span class="nt"&gt;Default&lt;/span&gt; &lt;span class="nt"&gt;Values&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;context_1=[长沙市]到长沙市【长沙转运中心】
context_2=[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
context_ALL=[长沙市]到长沙市【长沙转运中心】,[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
context_matchNr=2
time_1=2019-04-19 02:36:56
time_2=2019-04-18 19:32:26
time_ALL=2019-04-19 02:36:56,2019-04-18 19:32:26
time_matchNr=2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达式、默认值一定要和变量数量匹配&lt;/li&gt;
&lt;li&gt;表达式路径中数组编号用&lt;code&gt;*&lt;/code&gt;表示模糊匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CSS/JQuery提取器&lt;/h2&gt;
&lt;p&gt;可以使用CSS Selector语法从服务器HTML响应中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS/JQuery expression&lt;/strong&gt;：CSS/JQuery表达式。语法参考：&lt;a href="https://jsoup.org/cookbook/extracting-data/selector-syntax"&gt;JSoup&lt;/a&gt;、&lt;a href="https://jodd.org/csselly/"&gt;Jodd-Lagarto（CSSelly）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute&lt;/strong&gt;：从与选择器匹配的节点中提取的属性名称。如果为空，则返回此元素及其所有子元素的组合文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里以Redmine登录页面为例，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variables: input
CSS/JQuery expression: #login-form &amp;gt; form &amp;gt; table &amp;gt; tbody &amp;gt; tr &amp;gt; td &amp;gt; input
Attribute: name
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input=
input_1=username
input_2=password
input_3=login
input_matchNr=3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;似乎有点bug，只能获取几个常见属性，像下面的&lt;code&gt;type&lt;/code&gt;，&lt;code&gt;name&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt;，&lt;code&gt;tabindex&lt;/code&gt;，但&lt;code&gt;autocomplete&lt;/code&gt;不行，但使用应该足够了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; id=&amp;quot;username&amp;quot; tabindex=&amp;quot;1&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取CSS表达式有个简单的方法，Chrome浏览器直接能Copy Selector。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;XPATH 提取器&lt;/h2&gt;
&lt;p&gt;可以使用XPath查询语言从结构化响应（XML或（X）HTML）中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use Tidy&lt;/strong&gt;：宽容解析器。&lt;strong&gt;解析HTML响应一定要勾选&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Namespaces&lt;/strong&gt;：使用命名空间。这个放到XPATH2提取器里重点介绍，这里忽略就好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return entire XPath fragment instead of text content?&lt;/strong&gt;：返回整个XPath片段而不只是文本内容，例如&lt;code&gt;//title&lt;/code&gt;将返回&lt;code&gt;&amp;lt;title&amp;gt;Apache JMeter&amp;lt;/title&amp;gt;&lt;/code&gt;而不是&lt;code&gt;Apache JMeter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XPath query&lt;/strong&gt;：XPath表达式。语法参考：&lt;a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp"&gt;XPath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.webxml.com.cn/WebServices/WeatherWebService.asmx"&gt;WeatherWebService&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以查询支持的城市为例，返回值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ArrayOfString&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://WebXml.com.cn/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;北京 (54511)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;上海 (58367)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;天津 (54517)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;重庆 (57516)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ArrayOfString&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XML Parsing Options: 不勾选
Name of created variables: city
XPath query: //string
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;city=北京 (54511)
city_1=北京 (54511)
city_2=上海 (58367)
city_3=天津 (54517)
city_4=重庆 (57516)
city_matchNr=4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾选&lt;strong&gt;Return entire XPath fragment instead of text content?&lt;/strong&gt;后，变量值是包含命名空间内容的： &lt;code&gt;city=&amp;lt;string xmlns="http://WebXml.com.cn/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;北京 (54511)&amp;lt;/string&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chrome浏览器同样可以直接Copy XPath。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;XPATH2 提取器&lt;/h2&gt;
&lt;p&gt;虽然JMeter官方文档说可以使用XPath2查询语言从结构化响应（XML或（X）HTML）中提取值，但目前测试&lt;strong&gt;只支持从XML响应中提取值&lt;/strong&gt;；从HTML中提取会报错，这个可以通过查看结果树中选择XPath2 Tester来验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespaces aliases list&lt;/strong&gt;：命名空间别名列表。就是这个功能，能让使用命名空间比使用旧的XPath提取器更方便。关于命名空间含义，可以看官方文档：&lt;a href="http://www.w3school.com.cn/xml/xml_namespaces.asp"&gt;XML 命名空间&lt;/a&gt;，但是写的不够详细，详细的参考这里：&lt;a href="https://blog.csdn.net/yi412/article/details/70158876"&gt;XML 命名空间（XML Namespaces）介绍以及节点读取方法&lt;/a&gt;。由于XPath2对于表达式的要求比较严格，对于带命名空间的XML（包括默认的命名空间），使用不带命名空间前缀的表达式是查询不到结果的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看具体实例，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;
&lt;span class="n"&gt;XPath&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cityNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;Match&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="p"&gt;.:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;aliases&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cityNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;WebXml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;city=北京 (54511)
city_1=北京 (54511)
city_2=上海 (58367)
city_3=天津 (54517)
city_4=重庆 (57516)
city_matchNr=4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然返回值包含了3个命名空间的信息，但是我们提取的值只在默认命名空间里，所以&lt;strong&gt;Namespaces aliases list&lt;/strong&gt;只填入默认命名空间即可；别名可以任意命名，注意调用一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;边界值提取器&lt;/h2&gt;
&lt;p&gt;可以使用左右边界从服务器响应中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Left Boundary&lt;/strong&gt;：左边界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right Boundary&lt;/strong&gt;：右边界。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用上面的例子，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variables: url
Left Boundary: =&amp;quot;
Right Boundary: &amp;quot;
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url=
url_1=1.0
url_2=utf-8
url_3=http://www.w3.org/2001/XMLSchema-instance
url_4=http://www.w3.org/2001/XMLSchema
url_5=http://WebXml.com.cn/
url_matchNr=5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似简化版的正则表达式提取器，默认greedy模式。但是左右边界不支持正则表达式，感觉局限性挺大，比如说上面的例子中我只要提取3个url，就很麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当然牛逼的大佬根本不用这些花哨的提取器，一个BeanShell就够了，参考文章：&lt;a href="https://www.cnblogs.com/nzg-noway/p/7490412.html"&gt;jmeter ---json几种读取方式，ArrayList循环读取&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="JMeter"></category><category term="Extractor"></category></entry><entry><title>Postman入门第一坑：提取返回值</title><link href="https://jlhxxxx.github.io/postman-start.html" rel="alternate"></link><published>2018-04-13T00:00:00+08:00</published><updated>2018-04-13T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-13:/postman-start.html</id><summary type="html">&lt;p&gt;Postman是做接口测试的，但是很多接口并不是直接就能测，有的需要一些预处理。比如说身份认证，需要传递一个&lt;a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E4%BB%A4%E7%89%8C"&gt;token&lt;/a&gt;。如果做网页测试，一般打开登陆界面的时候就会生成一个token，如果返回值是json格式，用Postman从中提取值是很简单的，在Tests中输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//获取body中返回的所有参数&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//把返回参数中的keys设置为环境变量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-01.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-01.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回的header里，也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-02.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-02.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回值的body中，呵呵，网上并没有适合小白看的清晰的解决方法。我花了&lt;strong&gt;好长好长好长&lt;/strong&gt;时间才找到这么两行小字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//转换XML body为JSON对象&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那我的思路就有了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Postman是做接口测试的，但是很多接口并不是直接就能测，有的需要一些预处理。比如说身份认证，需要传递一个&lt;a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E4%BB%A4%E7%89%8C"&gt;token&lt;/a&gt;。如果做网页测试，一般打开登陆界面的时候就会生成一个token，如果返回值是json格式，用Postman从中提取值是很简单的，在Tests中输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//获取body中返回的所有参数&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//把返回参数中的keys设置为环境变量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-01.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-01.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回的header里，也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-02.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-02.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回值的body中，呵呵，网上并没有适合小白看的清晰的解决方法。我花了&lt;strong&gt;好长好长好长&lt;/strong&gt;时间才找到这么两行小字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//转换XML body为JSON对象&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那我的思路就有了：将html转换成json，再从json中提取token不就简单了。&lt;/p&gt;
&lt;p&gt;依然还是老办法，拿出我的终极武器——&lt;strong&gt;redmine&lt;/strong&gt;来测试。登陆页面的返回值大概是这样的，我们要提取的是&lt;code&gt;csrf-token&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;!DOCTYPE html&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;html lang=&amp;quot;zh&amp;quot;&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;head&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meta charset=&amp;quot;utf-8&amp;quot; /&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;title&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;Redmine&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;/title&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;Redmine&amp;quot; /&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;issue,bug,tracker&amp;quot; /&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meta name=&amp;quot;csrf-param&amp;quot; content=&amp;quot;authenticity_token&amp;quot; /&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;meta name=&amp;quot;csrf-token&amp;quot; content=&amp;quot;u9XfPXNDqQ/v+/xUtQuAjESgvNXCTHxCWW4NIZ/rJBmfZjzqJBVD1fDOxHnlbza4iDreX+St9SE9XFIN4on47Q==&amp;quot; /&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一开始我觉得可能是这样取值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;为了调试方便，我们这里取全局（globals）变量，因为环境（environment）变量只有在测试执行过程中才存在，测试执行完就释放了。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;send&lt;/code&gt;之后点右上角小眼睛，如果全局变量取到值的话这里会有显示的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="p-start-03.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-03.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;然而并没有，排查原因，把最后的&lt;code&gt;content&lt;/code&gt;去掉试试（为了看的更清楚，把&lt;code&gt;[4]&lt;/code&gt;也去掉）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候取到全局变量了，不过&lt;code&gt;[object Object],[object Object]...&lt;/code&gt;需要翻译啊，很明显取到&lt;code&gt;meta&lt;/code&gt;这一层是没错的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Postman-start-04.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/Postman-start-04.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;这时候需要一个将json转换成字符串的工具，方便我分析，然后就找到了&lt;code&gt;JSON.stringify()&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getstring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-05.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-05.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;将json复制出来美化一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="postman-start-06.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-06.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;原来&lt;code&gt;meta&lt;/code&gt;下一层是个&lt;code&gt;$&lt;/code&gt;。事后才醒悟过来，&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;并不是&lt;code&gt;meta&lt;/code&gt;的下层，而是&lt;code&gt;meta&lt;/code&gt;的属性，&lt;code&gt;xml2Json()&lt;/code&gt;方法将属性转换成&lt;code&gt;$&lt;/code&gt;标记的下层。&lt;/p&gt;
&lt;p&gt;修改之后再次测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-07.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-07.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;完美解决。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;Postman从响应中提取值的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从json中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从html的Header中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从html的body中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将json object转换成字符串的函数&lt;code&gt;JSON.stringify(jsonObject)&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/JHblogs/p/6418802.html"&gt;Postman接口自动化，环境变量的用法详解（附Postman常用的方法）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Postman"></category><category term="Interface"></category><category term="Test"></category></entry></feed>