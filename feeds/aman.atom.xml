<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AMAN's BLOG - Aman</title><link href="https://jlhxxxx.github.io/" rel="alternate"></link><link href="https://jlhxxxx.github.io/feeds/aman.atom.xml" rel="self"></link><id>https://jlhxxxx.github.io/</id><updated>2019-05-06T00:00:00+08:00</updated><entry><title>JMeter文档翻译之20-函数和变量</title><link href="https://jlhxxxx.github.io/jmeter-doc-cn-20.html" rel="alternate"></link><published>2019-05-06T00:00:00+08:00</published><updated>2019-05-06T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2019-05-06:/jmeter-doc-cn-20.html</id><summary type="html">&lt;p&gt;英文文档地址：&lt;a href="http://jmeter.apache.org/usermanual/functions.html"&gt;http://jmeter.apache.org/usermanual/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JMeter 的函数是一些特殊值，它们可以填充在测试树的任何采样器或其他元件中。函数调用的语法如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;${__functionName(var1,var2,var3)}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中“__functionName”匹配函数的名称。
圆括号内为函数参数，不同函数的参数也不同，例如 &lt;code&gt;${__time(YMD)}&lt;/code&gt;。没有参数的函数可以不需要圆括号，例如 &lt;code&gt;${__threadNum}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果函数的参数包含逗号，需要加上“&lt;code&gt;\&lt;/code&gt;”来转义，否则 JMeter 会把逗号当做参数的分隔符。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EEE&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;MMM&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果逗号没有被转义——例如 &lt;code&gt;${__javaScript(Math.max(2,5))}&lt;/code&gt; ——你会得到像这样的错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR - jmeter.functions …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;英文文档地址：&lt;a href="http://jmeter.apache.org/usermanual/functions.html"&gt;http://jmeter.apache.org/usermanual/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JMeter 的函数是一些特殊值，它们可以填充在测试树的任何采样器或其他元件中。函数调用的语法如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;${__functionName(var1,var2,var3)}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中“__functionName”匹配函数的名称。
圆括号内为函数参数，不同函数的参数也不同，例如 &lt;code&gt;${__time(YMD)}&lt;/code&gt;。没有参数的函数可以不需要圆括号，例如 &lt;code&gt;${__threadNum}&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果函数的参数包含逗号，需要加上“&lt;code&gt;\&lt;/code&gt;”来转义，否则 JMeter 会把逗号当做参数的分隔符。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EEE&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;MMM&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果逗号没有被转义——例如 &lt;code&gt;${__javaScript(Math.max(2,5))}&lt;/code&gt; ——你会得到像这样的错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ERROR - jmeter.functions.JavaScript: Error processing Javascript: [Math.max(2] org.mozilla.javascript.EvaluatorException: missing ) after argument list (&amp;lt;cmd&amp;gt;#1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是因为字符串“&lt;code&gt;Math.max(2,5)&lt;/code&gt;”被当做&lt;code&gt;__javascript&lt;/code&gt; 函数的两个参数： 
&lt;code&gt;Math.max(2&lt;/code&gt; 和 &lt;code&gt;5)&lt;/code&gt; 
其他错误信息也是有可能的。&lt;/p&gt;
&lt;p&gt;变量的引用如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VARIABLE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;如果引用了未定义的变量或函数，那么 JMeter 并不会报告或者记录错误信息——引用返回值就是引用自身。例如，如果 &lt;code&gt;UNDEF&lt;/code&gt; 没有被定义为变量，&lt;code&gt;${UNDEF}&lt;/code&gt; 的返回值就是 &lt;code&gt;${UNDEF}&lt;/code&gt;。&lt;/strong&gt; 变量和函数（包括属性）都是区分大小写的。&lt;strong&gt;JMeter 会剔除变量名称中的空格，例如 &lt;code&gt;${__Random(1,63, LOTTERY )}&lt;/code&gt; 中的变量‘ &lt;code&gt;LOTTERY&lt;/code&gt; ’会被‘&lt;code&gt;LOTTERY&lt;/code&gt;’取代。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性与变量不一样。变量对线程而言是局部的；属性是针对所有线程的，属性需要使用 &lt;code&gt;__P&lt;/code&gt; 或 &lt;code&gt;__property&lt;/code&gt; 函数来引用。&lt;/p&gt;
&lt;p&gt;在 Windows 路径变量（例如 &lt;code&gt;C:\test\${test}&lt;/code&gt;）前使用 &lt;code&gt;\&lt;/code&gt; 时，要确保加上 &lt;code&gt;\&lt;/code&gt; 来转义，否则 JMeter 将不能解释变量，所以要这样写：&lt;code&gt;C:\\test\\${test}&lt;/code&gt;。&lt;br&gt;
还有一种方法，就是使用 &lt;code&gt;/&lt;/code&gt; 作为路径分隔符，例如 &lt;code&gt;C:/test/${test}&lt;/code&gt;——Windows 的 JVMs 在必要时会将它转换成路径分隔符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id="functions_list"&gt;函数列表，不严格的按类型划分：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数类型&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;th align="left"&gt;开始使用版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#threadNum"&gt;threadNum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获得线程编号&lt;/td&gt;
&lt;td align="left"&gt;1.X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#threadGroupName"&gt;threadGroupName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获得线程组名称&lt;/td&gt;
&lt;td align="left"&gt;4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#samplerName"&gt;samplerName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获得采样器名称（标签）&lt;/td&gt;
&lt;td align="left"&gt;2.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#machineIP"&gt;machineIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获得本地 IP 地址&lt;/td&gt;
&lt;td align="left"&gt;2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#machineName"&gt;machineName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获得本地主机名称&lt;/td&gt;
&lt;td align="left"&gt;1.X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#time"&gt;time&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;以各种格式返回当前时间&lt;/td&gt;
&lt;td align="left"&gt;2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#timeShift"&gt;timeShift&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回各种格式的日期加上指定的秒数/分钟数/小时数/天数或月数&lt;/td&gt;
&lt;td align="left"&gt;3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#log"&gt;log&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;记录（或显示）一条日志（并返回其值）&lt;/td&gt;
&lt;td align="left"&gt;2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信息&lt;/td&gt;
&lt;td&gt;&lt;a href="#logn"&gt;logn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;记录（或显示）一条日志（并返回空值）&lt;/td&gt;
&lt;td align="left"&gt;2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入&lt;/td&gt;
&lt;td&gt;&lt;a href="#StringFromFile"&gt;StringFromFile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;从文件中读取一行&lt;/td&gt;
&lt;td align="left"&gt;1.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入&lt;/td&gt;
&lt;td&gt;&lt;a href="#FileToString"&gt;FileToString&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;读取整个文件&lt;/td&gt;
&lt;td align="left"&gt;2.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入&lt;/td&gt;
&lt;td&gt;&lt;a href="#CSVRead"&gt;CSVRead&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;从 CSV 分隔文件中读取&lt;/td&gt;
&lt;td align="left"&gt;1.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输入&lt;/td&gt;
&lt;td&gt;&lt;a href="#XPath"&gt;XPath&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 XPath 表达式从文件中读取&lt;/td&gt;
&lt;td align="left"&gt;2.0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#counter"&gt;counter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成递增的数字&lt;/td&gt;
&lt;td align="left"&gt;1.X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;格式化&lt;/td&gt;
&lt;td&gt;&lt;a href="#dateTimeConvert"&gt;dateTimeConvert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将日期或时间从源格式转换为目标格式&lt;/td&gt;
&lt;td align="left"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#digest"&gt;digest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成摘要（SHA-1, SHA-256, MD5...）&lt;/td&gt;
&lt;td align="left"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#intSum"&gt;intSum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;计算整形数（int）的和&lt;/td&gt;
&lt;td align="left"&gt;1.8.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#longSum"&gt;longSum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;计算长整形数（long）的和&lt;/td&gt;
&lt;td align="left"&gt;2.3.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#Random"&gt;Random&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成随机数&lt;/td&gt;
&lt;td align="left"&gt;1.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#RandomDate"&gt;RandomDate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;在指定日期范围内生成随机日期&lt;/td&gt;
&lt;td align="left"&gt;3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#RandomFromMultipleVars"&gt;RandomFromMultipleVars&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;从由 &lt;code&gt;|&lt;/code&gt; 分隔的一组变量值中随机提取一个元素&lt;/td&gt;
&lt;td align="left"&gt;3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#RandomString"&gt;RandomString&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成随机字符串&lt;/td&gt;
&lt;td align="left"&gt;2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算&lt;/td&gt;
&lt;td&gt;&lt;a href="#UUID"&gt;UUID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;生成随机的类型为 4 的通用唯一标识符（UUID）&lt;/td&gt;
&lt;td align="left"&gt;2.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;脚本&lt;/td&gt;
&lt;td&gt;&lt;a href="#groovy"&gt;groovy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行 Groovy 脚本&lt;/td&gt;
&lt;td align="left"&gt;3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;脚本&lt;/td&gt;
&lt;td&gt;&lt;a href="#BeanShell"&gt;BeanShell&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行 BeanShell 脚本&lt;/td&gt;
&lt;td align="left"&gt;1.X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;脚本&lt;/td&gt;
&lt;td&gt;&lt;a href="#javaScript"&gt;javaScript&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;处理 JavaScript (Nashorn)&lt;/td&gt;
&lt;td align="left"&gt;1.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;脚本&lt;/td&gt;
&lt;td&gt;&lt;a href="#jexl2"&gt;jexl2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行通用 Jexl2 表达式&lt;/td&gt;
&lt;td align="left"&gt;jexl2(2.1.1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;脚本&lt;/td&gt;
&lt;td&gt;&lt;a href="#jexl3"&gt;jexl3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行通用 Jexl3 表达式&lt;/td&gt;
&lt;td align="left"&gt;jexl3 (3.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href="#isPropDefined"&gt;isPropDefined&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;测试属性是否存在&lt;/td&gt;
&lt;td align="left"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href="#property"&gt;property&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;读取属性&lt;/td&gt;
&lt;td align="left"&gt;2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href="#P"&gt;P&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;读取属性（速记方式）&lt;/td&gt;
&lt;td align="left"&gt;2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href="#setProperty"&gt;setProperty&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置 JMeter 属性&lt;/td&gt;
&lt;td align="left"&gt;2.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;td&gt;&lt;a href="#split"&gt;split&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将字符串拆分为变量&lt;/td&gt;
&lt;td align="left"&gt;2.0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;td&gt;&lt;a href="#eval"&gt;eval&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行变量表达式&lt;/td&gt;
&lt;td align="left"&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;td&gt;&lt;a href="#evalVar"&gt;evalVar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;存储在变量中的表达式&lt;/td&gt;
&lt;td align="left"&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;&lt;a href="#isVarDefined"&gt;isVarDefined&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;测试变量是否存在&lt;/td&gt;
&lt;td align="left"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;td&gt;&lt;a href="#V"&gt;V&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;执行变量名称&lt;/td&gt;
&lt;td align="left"&gt;2.3RC3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#char"&gt;char&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将相应的编码转换成 Unicode 字符值&lt;/td&gt;
&lt;td align="left"&gt;2.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#changeCase"&gt;changeCase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;改变大小写模式&lt;/td&gt;
&lt;td align="left"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#escapeHtml"&gt;escapeHtml&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 HTML 编码对字符串进行编码&lt;/td&gt;
&lt;td align="left"&gt;2.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#escapeOroRegexpChars"&gt;escapeOroRegexpChars&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;引用 ORO 正则表达式使用的元字符&lt;/td&gt;
&lt;td align="left"&gt;2.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#escapeXml"&gt;escapeXml&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用 XMl 编码对字符串进行编码&lt;/td&gt;
&lt;td align="left"&gt;3.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#regexFunction"&gt;regexFunction&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;使用正则表达式解析之前的响应&lt;/td&gt;
&lt;td align="left"&gt;1.X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#unescape"&gt;unescape&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将 Java 转义过的字符串（例如 \n &amp;amp; \t）反转义&lt;/td&gt;
&lt;td align="left"&gt;2.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#unescapeHtml"&gt;unescapeHtml&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将 HTML 编码的字符串解码&lt;/td&gt;
&lt;td align="left"&gt;2.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#urldecode"&gt;urldecode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;对 application/x-www-form-urlencoded 字符串解码&lt;/td&gt;
&lt;td align="left"&gt;2.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#urlencode"&gt;urlencode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;将字符串编码成 application/x-www-form-urlencoded 字符串&lt;/td&gt;
&lt;td align="left"&gt;2.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;&lt;a href="#TestPlanName"&gt;TestPlanName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回当前测试计划的名称&lt;/td&gt;
&lt;td align="left"&gt;2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;20.1 函数可以做什么&lt;/h2&gt;
&lt;p&gt;JMeter 有两种函数：用户定义的静态值（或变量）和内建函数。&lt;br&gt;
用户定义的静态值允许用户在编译或者运行测试树时，使用自定义变量来替换静态值。这种替换只在测试运行的开始阶段执行一次。例如，可以用自定义变量来替换所有 HTTP 请求的 DOMAIN 域，这样就使得在不同服务器下执行相同测试的测试变更成为一件简单的事情。&lt;/p&gt;
&lt;p&gt;注意，目前变量不支持嵌套，例如 &lt;code&gt;${Var${N}}&lt;/code&gt; 是无效的，但是可以使用函数 &lt;code&gt;__V(variable)&lt;/code&gt; 来实现嵌套变量的目的：&lt;code&gt;${__V(Var${N})}&lt;/code&gt;。同样可以用 &lt;code&gt;${__BeanShell(vars.get("Var${N}")}&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;p&gt;这种类型的替换可以不用函数来实现，但是这样就没有那么方便和直观了。用户可以创建默认配置元件来填充采样器中的空值。变量可以替换任何给定值的一部分，而不只是填充空值。&lt;/p&gt;
&lt;p&gt;用户可以通过使用内建函数在运行时根据之前的响应数据、函数所在线程、当前时间和其他资源计算出新的变量值。这些变量值在测试过程中会根据每个请求动态刷新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数被线程共享。在测试计划中每次函数的调用，都由一个单独的函数实例来处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;20.2 函数和变量可以用在哪？&lt;/h2&gt;
&lt;p&gt;函数和变量可以用在任何测试元件的任何输入域中（除了测试计划——见下文）。有些输入域只接受数字而不支持字符串，因此它们也不支持函数。然而，大多数输入域还是支持函数的。&lt;/p&gt;
&lt;p&gt;在测试计划中使用函数是有限制的。当函数被调用时，JMeter 线程变量并没有完全初始化，因此变量名称作为参数传递时也没有初始化，变量会引用失败，所以 &lt;code&gt;split()&lt;/code&gt; 和 &lt;code&gt;regex()&lt;/code&gt; 和变量赋值函数都不能正常工作。&lt;code&gt;threadNum()&lt;/code&gt; 函数也不会工作（它在测试计划层也没有意义）。下面是可以在测试计划中使用的的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intSum&lt;/li&gt;
&lt;li&gt;longSum&lt;/li&gt;
&lt;li&gt;machineName&lt;/li&gt;
&lt;li&gt;BeanShell&lt;/li&gt;
&lt;li&gt;groovy&lt;/li&gt;
&lt;li&gt;javaScript&lt;/li&gt;
&lt;li&gt;jexl2/jexl3&lt;/li&gt;
&lt;li&gt;random&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;property functions&lt;/li&gt;
&lt;li&gt;log functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置元件是由独立线程处理的。因此像 &lt;code&gt;__threadNum&lt;/code&gt; 这样的函数在一些测试元件（例如用户定义的变量）中不能正常地工作。同样要注意在用户定义的变量（UDV）中定义的变量，在（UDV）元件被处理前是不能使用的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当在 SQL 代码（或其他）中引用变量/函数时，要记得给文本字符串添加必要的引号，即使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  SELECT item from table where name=&amp;#39;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而不是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  SELECT item from table where name=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（除非 &lt;code&gt;VAR&lt;/code&gt; 本身包含引号）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;20.3 如何引用变量和函数&lt;/h2&gt;
&lt;p&gt;在测试元件中引用一个变量可以通过使用 &lt;code&gt;${&lt;/code&gt; 和 &lt;code&gt;}&lt;/code&gt; 将变量名称括起来实现。&lt;/p&gt;
&lt;p&gt;函数引用的方法相同，但是按照惯例，函数名称以“&lt;code&gt;__&lt;/code&gt;”开头来和变量名称区分开。一些函数带参数，参数放在圆括号中，用逗号分隔。如果函数不带参数，可以省略圆括号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果参数本身带逗号，必须将其转义。可以使用‘&lt;code&gt;\,&lt;/code&gt;’来转义。&lt;/strong&gt; 这适用于例如脚本函数 - Javascript，Beanshell，Jexl，groovy - 有必要对所有脚本函数调用中的逗号加以转义，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__BeanShell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;换一种方法，你也可以将你的脚本定义为一个变量，例如在测试计划中定义：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCRIPT          vars.put(&amp;quot;name&amp;quot;,&amp;quot;value&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义过的脚本可以像下面这样被引用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__BeanShell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;SCRIPT&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 &lt;code&gt;SCRIPT&lt;/code&gt; 变量中就没有必要对逗号进行转义了，因为函数的调用在变量用其值替换之前被解析。该方法适用于 JSR223 或者 BeanShell 采样器，这两种采样器可用来测试 Javascript，Jexl 和 BeanShell 脚本。&lt;/p&gt;
&lt;p&gt;函数可以引用参数和其他函数，例如 &lt;code&gt;${__XPath(${__P(xpath.file),${XPATH})}&lt;/code&gt; 使用“&lt;code&gt;xpath.file&lt;/code&gt;”的值作为文件名，使用变量 &lt;code&gt;XPATH&lt;/code&gt; 的内容作为搜索表达式。&lt;/p&gt;
&lt;p&gt;JMeter 提供一个工具来帮助建立各种内置函数的函数调用，只需使用复制-粘贴就可以实现。它不会自动为你转义，因为函数可以作为其他函数的参数，应该只对文本内容进行转义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个字符串既包含反斜杠（‘&lt;code&gt;\&lt;/code&gt;’）又包含函数或者变量引用，出现在‘&lt;code&gt;$&lt;/code&gt;’或‘&lt;code&gt;,&lt;/code&gt;’或‘&lt;code&gt;\&lt;/code&gt;’之前的反斜杠会被移除。这种操作对于包含逗号或者 &lt;code&gt;${&lt;/code&gt; 的嵌套函数是有必要的。如果一个字符串不包含函数或者变量引用，那么在‘&lt;code&gt;$&lt;/code&gt;’或‘&lt;code&gt;,&lt;/code&gt;’或‘&lt;code&gt;\&lt;/code&gt;’之前的反斜杠不会被移除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;变量或函数的值可以用 &lt;a href="#logn"&gt;&lt;code&gt;__logn()&lt;/code&gt;&lt;/a&gt; 函数来报告&lt;/strong&gt;，&lt;code&gt;__logn()&lt;/code&gt; 函数在要报告的变量被定义之后可以在测试计划的任何地方被引用。除此之外，Java 请求采样器可以用来生成一个包含变量引用的采样；其输出能在合适的监听器中显示。注意也可以通过在查看结果树中使用 &lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#Debug_Sampler"&gt;Debug Sampler&lt;/a&gt; 来显示变量的值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果用和内建函数同样的名称定义一个用户静态变量，那么定义的静态变量将覆盖同名内建函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;20.4 函数助手对话框&lt;/h2&gt;
&lt;p&gt;函数助手对话框可以在 JMeter 的工具菜单中找到。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://jmeter.apache.org/images/screenshots/function_helper_dialog.png"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;函数助手对话框&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用函数助手，可以从下拉列表中选择一个函数，并给它的参数赋值。表格左列是参数的简要说明，表格的右列填入相应参数的值。不同的函数有不同的参数。&lt;/p&gt;
&lt;p&gt;上述操作完成之后，点击“生成（Generate）”按钮，相应调用函数的字符串就生成了，你可以复制-粘贴到测试计划中的任何地方。&lt;/p&gt;
&lt;h2&gt;20.5 函数&lt;/h2&gt;
&lt;h3 id="regexFunction"&gt;__regexFunction&lt;/h3&gt;

&lt;p&gt;regexFunction 函数可以使用任意正则表达式（用户提供的）来解析之前的服务器响应（或变量值）。函数返回填充了变量值的模版字符串。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__regexFunction&lt;/code&gt; 也可以存储值供以后使用。你可以在它的第六个参数中设定一个引用名称。在函数执行之后，可以使用用户定义的值的语法在稍后时间检索相同的值。例如，如果输入 “&lt;code&gt;refName&lt;/code&gt;” 作为第六个参数，那么可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${refName}&lt;/code&gt; 来引用该函数解析的第二个参数（“替换字符串的模版”）的计算结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${refName_g0}&lt;/code&gt; 来引用该函数解析的整个匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${refName_g1}&lt;/code&gt; 来引用该函数解析的第一个匹配组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${refName_g#}&lt;/code&gt; 来引用该函数解析的第 N 个匹配组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${refName_matchNr}&lt;/code&gt; 来引用该函数解析的匹配组合数量&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果是分布式测试，要切换模式（见 &lt;code&gt;jmeter.properties&lt;/code&gt;）确保它不在剥离模式下，参见 &lt;a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=56376"&gt;&lt;code&gt;Bug 56376&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;td&gt;第一个参数是解析响应数据的正则表达式。它会抓取所有匹配。请在模版字符串中给该表达式中想要使用的部分加上括号。例如：&lt;code&gt;&amp;lt;a href="(.*)"&amp;gt;&lt;/code&gt;。它将抓取链接值并储存在第一个匹配组合中（这里只有一个匹配组合）。另一个例子：&lt;code&gt;&amp;lt;input type="hidden" name="(.*)" value="(.*)"&amp;gt;&lt;/code&gt;。它将抓取 name 的值作为第一个匹配组合，value 的值作为第二个匹配组合。这些匹配的值可以用在模版字符串中。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;td&gt;这是一个运行时会替换函数的模版字符串。要引用正则表达式中捕获的匹配组合，使用下面的句法：&lt;code&gt;$[group_number]$&lt;/code&gt;。例如 &lt;code&gt;$1$&lt;/code&gt; 或者 &lt;code&gt;$2$&lt;/code&gt;。你的模版可以是任意字符串。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第三个参数&lt;/td&gt;
&lt;td&gt;第三个参数告诉 JMeter 使用第几个匹配。你的正则表达式可能找到多个匹配。对此有四个选项：&lt;br/&gt;&lt;ul&gt;&lt;li&gt; 整数——直接告诉 JMeter 使用第几个匹配。‘&lt;code&gt;1&lt;/code&gt;’对应第一个，‘&lt;code&gt;2&lt;/code&gt;’对应第二个，以此类推。 &lt;/li&gt;&lt;li&gt; &lt;code&gt;RAND&lt;/code&gt;——告诉 JMeter 使用随机匹配。&lt;/li&gt;&lt;li&gt; &lt;code&gt;ALL&lt;/code&gt;——告诉 JMeter 使用所有匹配，对应每个匹配生成一个模版字符串并将它们组合到一起。这个选项很少用到。&lt;/li&gt;&lt;li&gt; 0 到 1 之间的浮点数——告诉 JMeter 根据公式（总的匹配个数*浮点值）计算使用第几个匹配项，计算值向最近的整数取整&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;否，默认值 = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第四个参数&lt;/td&gt;
&lt;td&gt;如果上一个参数选择 &lt;code&gt;ALL&lt;/code&gt;，这个参数会被插入到每个附加的模版值副本之间&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第五个参数&lt;/td&gt;
&lt;td&gt;如果没有匹配项返回的默认值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第六个参数&lt;/td&gt;
&lt;td&gt;重用此函数解析的值的引用名称,储存的值包括 &lt;code&gt;${refName}&lt;/code&gt;（替换的模版字符串）和 &lt;code&gt;${refName_g#}&lt;/code&gt; ,其中“&lt;code&gt;#&lt;/code&gt;”代表正则表达式匹配分组的序号（“&lt;code&gt;0&lt;/code&gt;”可以用来引用整个匹配）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第七个参数&lt;/td&gt;
&lt;td&gt;输入变量名称。如果指定了这个参数，那么将使用变量的值作为输入，而不是使用之前的采样结果。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="counter"&gt;__counter&lt;/h3&gt;

&lt;p&gt;计数器每次调用会生成一个新值，从 1 开始，每次加 1。计数器可以配置成对每个虚拟用户独立的，也可以配置成对所有用户公用的。如果每个用户的值分开计数，通常用于计算测试计划的执行次数。全局计数器通常用于计算请求的次数。&lt;/p&gt;
&lt;p&gt;计数器使用一个整型变量来保存计数，允许的最大值为 2,147,483,647。&lt;/p&gt;
&lt;p&gt;计数器函数实例是完全独立的。全局计数器 - “&lt;code&gt;FALSE&lt;/code&gt;” - 的每个实例都是独立维护的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;__counter&lt;/code&gt; 函数在同一个迭代中的多次调用不会进一步增加值。&lt;/strong&gt; 
如果您想对每个采样器计数，请使用前置处理器（例如&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#User_Parameters"&gt;用户参数&lt;/a&gt;）中的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TRUE&lt;/code&gt; 如果您希望每个虚拟用户的计数器保持独立并与其他用户分开。 &lt;code&gt;FLASE&lt;/code&gt; 全局计数器。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;td&gt;重用此函数创建的值的引用名称。&lt;br/&gt;存储的值的格式为 &lt;code&gt;${refName}&lt;/code&gt;。这允许你保留一个计数器，并在多个地方引用它的值。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="threadNum"&gt;__threadNum&lt;/h3&gt;

&lt;p&gt;threadNum 函数只是返回当前正在执行的线程编号。线程编号独立于线程组，这意味着从该函数的角度来看，一个线程组中的线程 #1 与另一个线程组中的线程 #1 是没有区别的。&lt;/p&gt;
&lt;p&gt;这个函数没有参数。&lt;/p&gt;
&lt;p&gt;用法示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__threadNum&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回 1 到线程组中配置的运行线程的最大值之间的数字。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个函数在任何配置元件（例如用户定义的变量）中都不起作用，因为它们是在一个单独的线程中运行的。在测试计划中也不能使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="threadGroupName"&gt;__threadGroupName&lt;/h3&gt;

&lt;p&gt;threadGroupName 函数只返回正在执行的线程组的名称。 &lt;/p&gt;
&lt;p&gt;这个函数没有参数。&lt;/p&gt;
&lt;p&gt;用法示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__threadGroupName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;这个函数在任何配置元件（例如用户定义的变量）中都不起作用，因为它们是在一个单独的线程中运行的。在测试计划中也不能使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="intSum"&gt;__intSum&lt;/h3&gt;

&lt;p&gt;intSum 函数可用于计算两个或更多个整数值之和。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用名称是可选的，但不能是有效的整数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;td&gt;第一个整数值&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;td&gt;第二个整数值&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第 n 个参数&lt;/td&gt;
&lt;td&gt;第 n 个整数值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最后一个参数&lt;/td&gt;
&lt;td&gt;重用此函数计算值的引用名称。如果该参数被指定，引用名称必须包含至少一个非数字字符，否则将被视为另一个要添加的整数值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__intSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 7（2 + 5）并将结果存储在 MYVAR 变量中。所以 &lt;code&gt;${MYVAR}&lt;/code&gt; 将等于 7。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__intSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 14（2 + 5 + 7）并将结果存储在 MYVAR 变量中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__intSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果 MYVAR 值等于 8，1 + 2 + 5 + ${MYVAR}，返回 16。&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="longSum"&gt;__longSum&lt;/h3&gt;

&lt;p&gt;longSum 函数可用于计算两个或更多个长整型值之和，当计算值不在 -2147483648 到 2147483647 之间，使用此函数而不是 __intSum。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;第一个参数&lt;/td&gt;
&lt;td&gt;第一个长整型值&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第二个参数&lt;/td&gt;
&lt;td&gt;第二个长整型值&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第 n 个参数&lt;/td&gt;
&lt;td&gt;第 n 个长整型值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最后一个参数&lt;/td&gt;
&lt;td&gt;重用此函数计算值的引用名称。如果该参数被指定，引用名称必须包含至少一个非数字字符，否则将被视为另一个要添加的长整型值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__longSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 7（2 + 5）并将结果存储在 MYVAR 变量中。所以 &lt;code&gt;${MYVAR}&lt;/code&gt; 将等于 7。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__longSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 14（2 + 5 + 7）并将结果存储在 MYVAR 变量中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__longSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果 MYVAR 值等于 8，1 + 2 + 5 + ${MYVAR}，返回 16。 &lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="StringFromFile"&gt;__StringFromFile&lt;/h3&gt;

&lt;p&gt;StringFromFile 函数可以用来从文本文件中读取字符串。这对于运行需要大量可变数据的测试非常有用。例如，在测试银行应用程序时，可能需要 100 或 1000 个不同的帐号。&lt;/p&gt;
&lt;p&gt;另请参阅可能更易于使用的 &lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#CSV_Data_Set_Config"&gt;CSV Data Set Config 测试元件&lt;/a&gt;。但是，目前不支持多个输入文件。&lt;/p&gt;
&lt;p&gt;每次调用该函数都会从文件中读取下一行。所有的线程共享相同的实例，所以不同的线程会读取不同的行。到达文件末尾时，除非达到最大循环次数，否则将从头开始重新读取。如果在一个测试脚本中引用该函数多次，每此引用都将独立打开文件，即使文件名相同。（如果要在其他地方再次使用该值，请为每个函数调用使用不同的变量名称。）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数实例在线程之间共享，并且无论线程​​是否需要下一行输入，该文件都会（重新）打开，因此使用 &lt;code&gt;threadNumber&lt;/code&gt; 作为文件名的一部分将导致不可预知的行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果打开或读取文件时发生错误，函数会返回字符串“&lt;code&gt;**ERR**&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件名称&lt;/td&gt;
&lt;td&gt;文件名称的路径。（可以使用相对于 JMeter 启动目录的相对路径）如果要使用可选的序列号，路径名称应该适合转换成十进制格式。看下面的例子。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;引用名称 - &lt;code&gt;refName&lt;/code&gt; - 用于重用由此函数创建的值。存储该值的格式为 &lt;code&gt;${refName}&lt;/code&gt;。默认值是“&lt;code&gt;StringFromFile_&lt;/code&gt;”。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开始序列号&lt;/td&gt;
&lt;td&gt;初始序列号（如果省略，结束序列号将被视为循环计数）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结束序列号&lt;/td&gt;
&lt;td&gt;终止序列号（如果省略，序列号可以不受限制地增加下去）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;文件名称参数在文件打开或重新打开时被解析。&lt;/p&gt;
&lt;p&gt;引用名称参数（如果支持）在每次执行函数时被解析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用序列号：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用可选的序列号时，路径名称将使用 &lt;code&gt;java.text.DecimalFormat&lt;/code&gt; 的格式字符串。当前的序列号将作为唯一的参数传入。如果没有指定可选的开始序列号，就使用路径名称作为起始值。有用的格式序列如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入不带前导零或空格的数字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;000&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入带有前导零的三位数字，如果需要的话&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;h4&gt;格式字符串的使用&lt;/h4&gt;&lt;/p&gt;
&lt;p&gt;以下是几个格式字符串以及它们将生成的对应序列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pin#'.'dat&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成不带前导零的序列，&lt;code&gt;.&lt;/code&gt; 还是 &lt;code&gt;.&lt;/code&gt;：&lt;code&gt;pin1.dat&lt;/code&gt;，...，&lt;code&gt;pin9.dat&lt;/code&gt;，&lt;code&gt;pin10.dat&lt;/code&gt;，...，&lt;code&gt;pin9999.dat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pin000'.'dat&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成带前导零的序列，同时保持 &lt;code&gt;.&lt;/code&gt;。当数字位数超过三位时，序列将使用更多位数的数字：&lt;code&gt;pin001.dat&lt;/code&gt;，... &lt;code&gt;pin099.dat&lt;/code&gt;，...，&lt;code&gt;pin999.dat&lt;/code&gt;，...，&lt;code&gt;pin9999.dat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pin'.'dat#&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成不带前导零的附加数字，同时保持 &lt;code&gt;.&lt;/code&gt;：&lt;code&gt;pin.dat1&lt;/code&gt;，...，&lt;code&gt;pin.dat9&lt;/code&gt;，...，&lt;code&gt;pin.dat999&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果需要的位数多于格式字符数，数字将根据需要进行扩展。
&lt;strong&gt;要防止格式字符被解释，请将其包含在单引号中。请注意，“&lt;code&gt;.&lt;/code&gt;”是一个格式字符，必须用单引号引起来&lt;/strong&gt; （尽管 &lt;code&gt;#.&lt;/code&gt; 和 &lt;code&gt;000.&lt;/code&gt; 在工作区能按预期的方式工作，因为它被视为小数点，而小数点也是“&lt;code&gt;.&lt;/code&gt;”）。
在其他语言环境（例如 &lt;code&gt;fr&lt;/code&gt;）中，小数点是“&lt;code&gt;,&lt;/code&gt;” - 这意味着“&lt;code&gt;#.&lt;/code&gt;”会变成“&lt;code&gt;nnn,&lt;/code&gt;”。
有关完整的细节，请参阅 DecimalFormat （十进制格式）的文档。
如果路径名称不包含任何特殊的格式字符，则将当前的序号直接附加到名称上，否则将根据格式化指令插入数字。 
如果起始序列号被忽略，并且指定了结束序列号，则结束序列号将被解释为循环计数，并且该文件将被使用循环计数的最大次数。在这种情况下，文件名不是格式化的。
&lt;code&gt;${__StringFromFile(PIN#'.'DAT,,1,2)}&lt;/code&gt; 读取 &lt;code&gt;PIN1.DAT&lt;/code&gt;, &lt;code&gt;PIN2.DAT&lt;/code&gt; 
&lt;code&gt;${__StringFromFile(PIN.DAT,,,2)}&lt;/code&gt; 读取 &lt;code&gt;PIN.DAT&lt;/code&gt; 两次 
注意上面 &lt;code&gt;PIN.DAT&lt;/code&gt; 中的“&lt;code&gt;.&lt;/code&gt;”不应被引号包含。在这种起始序列号被省略的情况下，文件名完全按原样使用。&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="machineName"&gt;__machineName&lt;/h3&gt;

&lt;p&gt;machineName 函数返回本地主机名称。它使用 Java 方法 &lt;code&gt;InetAddress.getLocalHost()&lt;/code&gt; 并将值传递给 &lt;code&gt;getHostName()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__machineName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回机器的主机名称&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__machineName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回机器的主机名称&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="machineIP"&gt;__machineIP&lt;/h3&gt;

&lt;p&gt;machineIP 函数返回本地 IP 地址。它使用 Java 方法&lt;code&gt;InetAddress.getLocalHost()&lt;/code&gt; 并将其值传递给 &lt;code&gt;getHostAddress()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__machineIP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回机器的 IP 地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__machineIP&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回机器的 IP 地址&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="javaScript"&gt;__javaScript&lt;/h3&gt;

&lt;p&gt;javaScript 函数执行一段 JavaScript（不是 Java！）代码并返回它的值。&lt;/p&gt;
&lt;p&gt;JMeter Javascrip t函数调用独立的 JavaScript 解释器。Javascript 被当作脚本语言使用，所以可以做相应的计算等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 JMeter 中，javaScript 并不是最好的脚本语言。如果你的测试计划需要大量的线程，建议使用&lt;code&gt;__jexl3&lt;/code&gt; 或&lt;code&gt;__groovy&lt;/code&gt; 函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 Nashorn 引擎，请参阅&lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/"&gt; Java 平台标准版 Nashorn 用户指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对于 Rhino 引擎，请参阅&lt;a href="http://www.mozilla.org/rhino/overview.html"&gt;Mozilla Rhino 概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下变量可用于脚本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; - 函数的&lt;a href="https://www.slf4j.org/api/org/slf4j/Logger.html"&gt;记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html"&gt;JMeterContext&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html"&gt;JMeterVariables&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadName&lt;/code&gt; - 包含当前线程名称的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sampler&lt;/code&gt; - 当前&lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html"&gt;采样器&lt;/a&gt;对象（如果有的话）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;samplerResult&lt;/code&gt; - 之前的 &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html"&gt;SampleResult&lt;/a&gt; 对象（如果有的话）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; - JMeterProperties（类 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"&gt;java.util.Properties&lt;/a&gt;）对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rhinoscript 允许通过其 Packages 对象访问静态方法。请参阅 &lt;a href="https://wiki.openjdk.java.net/display/Nashorn/Rhino+Migration+Guide"&gt;Java 脚本&lt;/a&gt; 文档。例如，可以像这样访问 JMeterContextService 静态方法：&lt;code&gt;Java.type("org.apache.jmeter.threads.JMeterContextService").getTotalThreads()&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JMeter 不是浏览器，不能解释下载页面中的 JavaScript。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;表达式&lt;/td&gt;
&lt;td&gt;要执行的JavaScript表达式。例如：&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;new Date()&lt;/code&gt; - 返回当前日期和时间&lt;/li&gt;&lt;li&gt;&lt;code&gt;Math.floor(Math.random()*(${maxRandom}+1))&lt;/code&gt; - 一个介于 &lt;code&gt;0&lt;/code&gt; 和变量 &lt;code&gt;maxRandom&lt;/code&gt; 之间的随机数&lt;/li&gt;&lt;li&gt;&lt;code&gt;${minRandom}+Math.floor(Math.random()*(${maxRandom}-${minRandom}+1))&lt;/code&gt; - 介于变量 &lt;code&gt;minRandom&lt;/code&gt; 和 &lt;code&gt;maxRandom&lt;/code&gt; 之间的随机数&lt;/li&gt;&lt;li&gt;&lt;code&gt;"${VAR}"=="abcd"&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;请记住为文本字符串和 JMeter 变量添加必要的引号。另外，如果表达式有逗号，请确保将其转义。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;${sp&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;#39;.slice(7\,99999))}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;7&lt;/code&gt; 之后的逗号被转义了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回 &lt;code&gt;Sat Jan 09 2016 16:22:15 GMT+0100 (CET)&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;MYDATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回 &lt;code&gt;Sat Jan 09 2016 16:22:15 GMT+0100 (CET)&lt;/code&gt; 并将其存储在变量 &lt;code&gt;MYDATE&lt;/code&gt; 下 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;maxRandom&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;+1)),MYRESULT)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;maxRandom&lt;/code&gt; 变量，返回 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;maxRandom&lt;/code&gt; 之间的随机值并将其存储在  &lt;code&gt;MYRESULT&lt;/code&gt; 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;minRandom&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;+Math.floor(Math.random()*(&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;maxRandom&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;-&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;minRandom&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;+1)),MYRESULT)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;maxRandom&lt;/code&gt; 和 &lt;code&gt;minRandom&lt;/code&gt; 变量，返回 &lt;code&gt;maxRandom&lt;/code&gt; 和 &lt;code&gt;minRandom&lt;/code&gt; 之间的随机值并将其存储在 &lt;code&gt;MYRESULT&lt;/code&gt; 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__javaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${VAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;==&amp;quot;abcd&amp;quot;,MYRESULT)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将 &lt;code&gt;VAR&lt;/code&gt; 变量的值与 &lt;code&gt;abcd&lt;/code&gt; 进行比较，返回 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 并将结果存储在 &lt;code&gt;MYRESULT&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="Random"&gt;__Random&lt;/h3&gt;

&lt;p&gt;random 函数返回一个介于给定最小值和最大值之间的随机数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;最小值&lt;/td&gt;
&lt;td&gt;一个数字&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大值&lt;/td&gt;
&lt;td&gt;一个更大的数字&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__Random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回一个 0 到 10 之间的随机数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__Random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回一个 0 到 10 之间的随机数，并将其存储在 &lt;code&gt;MYVAR&lt;/code&gt;中。&lt;code&gt;${MYVAR}&lt;/code&gt;将包含此随机数。&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="RandomDate"&gt;__RandomDate&lt;/h3&gt;

&lt;p&gt;RandomDate 函数返回一个位于给定开始日期和结束日期值之间的随机日期。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;时间格式&lt;/td&gt;
&lt;td&gt;DateTimeFormatter 的格式字符串（默认为 &lt;code&gt;yyyy-MM-dd&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开始日期&lt;/td&gt;
&lt;td&gt;开始日期，默认值是现在&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结束日期&lt;/td&gt;
&lt;td&gt;结束日期&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用于格式的区域设置&lt;/td&gt;
&lt;td&gt;语言环境的字符串格式。语言代码必须是小写。国家代码必须大写。分隔符必须是下划线，例如 &lt;code&gt;en_EN&lt;/code&gt;。请参阅 &lt;a href="http://www.oracle.com/technetwork/java/javase/javase7locales-334809.html"&gt;http://www.oracle.com/technetwork/java/javase/javase7locales-334809.html&lt;/a&gt;。如果省略，则默认情况下该函数使用 Apache JMeter 当前语言环境。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomDate&lt;/span&gt;&lt;span class="p"&gt;(,,&lt;/span&gt;&lt;span class="mi"&gt;2050&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回从现在到 &lt;code&gt;2050-07-08&lt;/code&gt; 之间一个随机的日期。例如 &lt;code&gt;2039-06-21&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;MM&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mo"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;2050&lt;/span&gt;&lt;span class="p"&gt;,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回一个自定义格式的随机日期，例如 &lt;code&gt;04 03 2034&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="RandomString"&gt;__RandomString&lt;/h3&gt;

&lt;p&gt;RandomString 函数返回一个 chars 长度内的随机字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;长度&lt;/td&gt;
&lt;td&gt;生成字符串的长度&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用的字符&lt;/td&gt;
&lt;td&gt;用于生成字符串的字符&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回随机的可读或不可读的 5 个字符&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;abcdefg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回从 &lt;code&gt;abcdefg&lt;/code&gt; 集合中挑选的 10 个字符的随机字符串，如 &lt;code&gt;cdbgdbeebd&lt;/code&gt; 或 &lt;code&gt;adbfeggfad&lt;/code&gt;，...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a12zeczclk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从 &lt;code&gt;a12zeczclk&lt;/code&gt; 集合中返回一个由 6 个字符组成的随机字符串，并将结果存储在 &lt;code&gt;MYVAR&lt;/code&gt; 中，&lt;code&gt;MYVAR&lt;/code&gt; 将包含像 &lt;code&gt;2z22ak&lt;/code&gt; 或 &lt;code&gt;z11kce&lt;/code&gt; 这样的字符串，...&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="RandomFromMultipleVars"&gt;__RandomFromMultipleVars&lt;/h3&gt;

&lt;p&gt;RandomFromMultipleVars 函数根据&lt;code&gt;源变量&lt;/code&gt;提供的变量值返回一个随机值。&lt;/p&gt;
&lt;p&gt;变量可以是单值或多值的，它们可以由以下提取器生成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#Boundary_Extractor"&gt;边界提取器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#Regular_Expression_Extractor"&gt;正则表达式提取器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#CSS_Selector_Extractor"&gt;CSS 提取器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#JSON_Extractor"&gt;JSON 提取器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#XPath_Extractor"&gt;XPath 提取器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#XPath2_Extractor"&gt;XPath2 提取器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多值变量就是，当你设置 &lt;code&gt;-1&lt;/code&gt; 作为&lt;code&gt;匹配数字&lt;/code&gt;所提取的值。当n = 1，2，3...时会创建相应匹配号变量 &lt;code&gt;varName_matchNr&lt;/code&gt;，并为每个值创建变量 &lt;code&gt;varName_n&lt;/code&gt;，其中n = 1，2，3 等 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;源变量&lt;/td&gt;
&lt;td&gt;变量名称包含的值将用作随机计算的输入，用 &lt;code&gt;|&lt;/code&gt; 分隔&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomFromMultipleVars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据变量 val 的内容返回一个随机的字符串，不管它们是否是多值的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomFromMultipleVars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据变量 val1 和 val2 的内容返回一个随机字符串，不管它们是否为多值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__RandomFromMultipleVars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MYVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据变量 val1 和 val2 的内容返回一个随机字符串，不管它们是否为多值，并将结果存储在 &lt;code&gt;MYVAR&lt;/code&gt; 中 &lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="UUID"&gt;__UUID&lt;/h3&gt;

&lt;p&gt;UUID 函数返回伪随机类型为 4 的通用唯一标识符（UUID）。&lt;/p&gt;
&lt;p&gt;没有参数。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回具有以下格式的 UUID：&lt;code&gt;c69e0dd1-ac6b-4f2b-8d59-5d4e8743eecd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="CSVRead"&gt;__CSVRead&lt;/h3&gt;

&lt;p&gt;CSVRead 函数从 CSV 文件返回一个字符串（注意与 &lt;a href="#StringFromFile"&gt;StringFromFile&lt;/a&gt; 的区别）。&lt;/p&gt;
&lt;p&gt;注：JMeter 支持多个文件名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大多数情况下，较新的 &lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#CSV_Data_Set_Config"&gt;CSV Data Set Config 元件&lt;/a&gt;更容易使用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次读取某个文件名时，文件被打开并读取到内部数组。空行将被视为文件结尾——这允许使用尾部注释。&lt;/p&gt;
&lt;p&gt;后续对同一文件名的所有引用使用相同的内部数组。注意，文件名是区分大小写的，即使操作系统不区分大小写，所以 &lt;code&gt;CSVRead(abc.txt,0)&lt;/code&gt; 和 &lt;code&gt;CSVRead(aBc.txt,0)&lt;/code&gt; 会引用不同的内部数组。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*ALIAS&lt;/code&gt; 功能允许同一个文件被打开多次，并且允许较短的文件名。&lt;/p&gt;
&lt;p&gt;每个线程都有自己的内部指针，指向文件数组中的当前行。当一个线程第一次引用文件时，它将被分配到数组中的下一个空闲行，所以每个线程将访问与其他所有线程不同的行（除非线程数多于数组中的行）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数默认情况下以逗号分割行。如果要输入包含逗号的列，需要通过设置 &lt;code&gt;csvread.delimiter&lt;/code&gt; 属性将分隔符更改为不出现在任何列数据中的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件名称&lt;/td&gt;
&lt;td&gt;要读取的文件（或 &lt;code&gt;*ALIAS&lt;/code&gt;）&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;列号&lt;/td&gt;
&lt;td&gt;文件中的列号。 &lt;code&gt;0&lt;/code&gt; 为第一列，&lt;code&gt;1&lt;/code&gt;为第二列，以此类推。"&lt;code&gt;next&lt;/code&gt;" - 转到文件的下一行。 &lt;code&gt;*ALIAS&lt;/code&gt; - 打开一个文件并指派一个别名&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例如，你可以设置一些变量如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COL1a &lt;code&gt;${__CSVRead(random.txt,0)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;COL2a &lt;code&gt;${__CSVRead(random.txt,1)}${__CSVRead(random.txt,next)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;COL1b &lt;code&gt;${__CSVRead(random.txt,0)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;COL2b &lt;code&gt;${__CSVRead(random.txt,1)}${__CSVRead(random.txt,next)}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这将从一行中读取两列，从下一行中读取两列。如果所有变量都在相同的前置处理器的用户参数上定义，那么这些行将是连续的。否则的话，另外一个线程可能会读取下一行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数不适用于大文件，因为它会将整个文件存储在内存中。对于较大的文件，请使用 &lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#CSV_Data_Set_Config"&gt;CSV Data Set Config 元件&lt;/a&gt; 或 &lt;a href="#StringFromFile"&gt;StringFromFile&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="property"&gt;__property&lt;/h3&gt;

&lt;p&gt;property 函数返回 JMeter 属性的值。如果找不到属性值，并且没有提供默认值，则返回属性名称。当提供默认值时，可以不需要函数名称——参数可以设置为 null，并且将被忽略。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__property(user.dir)}&lt;/code&gt; - 返回 &lt;code&gt;user.dir&lt;/code&gt; 的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__property(user.dir,UDIR)}&lt;/code&gt; - 返回 &lt;code&gt;user.dir&lt;/code&gt; 的值并保存在 &lt;code&gt;UDIR&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__property(abcd,ABCD,atod)}&lt;/code&gt; - 返回属性 &lt;code&gt;abcd&lt;/code&gt; 的值（如果没有定义，则返回“&lt;code&gt;atod&lt;/code&gt;”）并保存在 &lt;code&gt;ABCD&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__property(abcd,,atod)}&lt;/code&gt; - 返回属性 &lt;code&gt;abcd&lt;/code&gt;的值（如果未定义，则返回“&lt;code&gt;atod&lt;/code&gt;”）但不保存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;属性名称&lt;/td&gt;
&lt;td&gt;要检索的属性名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认值&lt;/td&gt;
&lt;td&gt;属性的默认值&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="P"&gt;__P&lt;/h3&gt;

&lt;p&gt;这是一个简化的属性函数，用于在命令行中定义的属性。与&lt;code&gt;__property&lt;/code&gt; 函数不同，没有选项可将值保存在变量中，如果未提供默认值，则假定为 1。选择 1 作为假定默认值是因为它对于常见测试变量如循环次数，线程数，加速等都有效。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;定义属性值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jmeter -Jgroup1.threads=7  -Jhostname1=www.realhost.edu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__P(group1.threads)}&lt;/code&gt; - 返回 &lt;code&gt;group1.threads&lt;/code&gt; 的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__P(group1.loops)}&lt;/code&gt; - 返回 &lt;code&gt;group1.loops&lt;/code&gt; 的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__P(hostname,www.dummy.org)}&lt;/code&gt; - 返回属性的值的 &lt;code&gt;hostname&lt;/code&gt;（主机名）或 &lt;code&gt;www.dummy.org&lt;/code&gt; 。如果在上面的例子中没有定义，第一个函数调用将返回&lt;code&gt;7&lt;/code&gt;，第二个返回 &lt;code&gt;1&lt;/code&gt;，最后一个将返回 &lt;code&gt;www.dummy.org&lt;/code&gt; （除非这些属性在别处有定义！）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;属性名称&lt;/td&gt;
&lt;td&gt;要检索的属性名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认值&lt;/td&gt;
&lt;td&gt;属性的默认值。如果省略，则默认为“&lt;code&gt;1&lt;/code&gt;”。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="log"&gt;__log&lt;/h3&gt;

&lt;p&gt;log 函数记录一条日志，并返回它的输入字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要记录的字符串&lt;/td&gt;
&lt;td&gt;一个字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日志级别&lt;/td&gt;
&lt;td&gt;&lt;code&gt;OUT&lt;/code&gt;，&lt;code&gt;ERR&lt;/code&gt;，&lt;code&gt;DEBUG&lt;/code&gt;，&lt;code&gt;INFO&lt;/code&gt;（默认），&lt;code&gt;WARN&lt;/code&gt;或&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可丢弃的文本&lt;/td&gt;
&lt;td&gt;如果非空，则创建一个可丢弃的文本传递给记录器&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;注释&lt;/td&gt;
&lt;td&gt;如果存在，则显示在字符串中。用于标识正在记录的内容。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;OUT&lt;/code&gt; 和 &lt;code&gt;ERR&lt;/code&gt; 日志级别会直接输出记录到 &lt;code&gt;System.out&lt;/code&gt; 和 &lt;code&gt;System.err&lt;/code&gt;。这种情况下，输出始终会被打印——它不依赖于当前的日志设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__log(Message)}&lt;/code&gt; 写入日志文件,形如“&lt;code&gt;… thread Name : Message&lt;/code&gt;”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__log(Message,OUT)}&lt;/code&gt; 写到控制台窗口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__log(${VAR},,,VAR=)}&lt;/code&gt; 写入日志文件，形如“&lt;code&gt;… thread Name VAR=value&lt;/code&gt;”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="logn"&gt;__logn&lt;/h3&gt;

&lt;p&gt;logn 函数记录一条日志，并返回空字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要记录的字符串&lt;/td&gt;
&lt;td&gt;一个字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日志级别&lt;/td&gt;
&lt;td&gt;&lt;code&gt;OUT&lt;/code&gt;，&lt;code&gt;ERR&lt;/code&gt;，&lt;code&gt;DEBUG&lt;/code&gt;，&lt;code&gt;INFO&lt;/code&gt;（默认），&lt;code&gt;WARN&lt;/code&gt;或&lt;code&gt;ERROR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可丢弃的文本&lt;/td&gt;
&lt;td&gt;如果非空，则创建一个可丢弃的文本传递给记录器&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;OUT&lt;/code&gt; 和 &lt;code&gt;ERR&lt;/code&gt; 日志级别会直接输出记录到 &lt;code&gt;System.out&lt;/code&gt; 和 &lt;code&gt;System.err&lt;/code&gt;。这种情况下，输出始终会被打印——它不依赖于当前的日志设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__logn(VAR1=${VAR1},OUT)}&lt;/code&gt; 将变量的值写到控制台窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="BeanShell"&gt;__BeanShell&lt;/h3&gt;

&lt;p&gt;BeanShell 函数执行传递给它的脚本，并返回结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更好的性能，请使用&lt;a href="#groovy"&gt;&lt;code&gt;__groovy&lt;/code&gt;&lt;/a&gt;函数 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;有关使用 BeanShell 的完整详细信息，请参考 BeanShell 网站：&lt;a href="http://www.beanshell.org/"&gt;http://www.beanshell.org/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，测试脚本中每个独立的函数调用都使用不同的解释器，但是后续的调用使用相同的解释器。这意味着变量在不同的函数的调用中会持续存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单个函数实例可以从多个线程中调用。但是函数 &lt;code&gt;execute()&lt;/code&gt; 的方法是同步的。&lt;/p&gt;
&lt;p&gt;如果属性“&lt;code&gt;beanshell.function.init&lt;/code&gt;”已被定义，则将其作为源文件传递给解释器。这可以用来定义通用的方法和变量。在 bin 目录中有一个 init 示例文件：&lt;code&gt;BeanShellFunction.bshrc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下变量在脚本执行之前已经被设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; - BeanShell 函数（*）的&lt;a href="https://www.slf4j.org/api/org/slf4j/Logger.html"&gt;记录器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html"&gt;JMeterContext&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html"&gt;JMeterVariables&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; - JMeterProperties（类 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"&gt;java.util.Properties&lt;/a&gt;）对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadName&lt;/code&gt; - 线程名称 （字符串）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sampler&lt;/code&gt; - 当前的&lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html"&gt;采样器&lt;/a&gt;，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SampleResult&lt;/code&gt; - 当前的 &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html"&gt;SampleResult&lt;/a&gt;，如果有的话&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（*）表示这是在 init 文件（如果有的话）被处理之前设置的。其他变量因调用而异。
&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BeanShell 脚本&lt;/td&gt;
&lt;td&gt;BeanShell 脚本（不是文件名）&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：
  * &lt;code&gt;${__BeanShell(123*456)}&lt;/code&gt; 返回 &lt;code&gt;56088&lt;/code&gt;
  * &lt;code&gt;${__BeanShell(source("function.bsh"))}&lt;/code&gt; 在 &lt;code&gt;function.bsh&lt;/code&gt; 中处理脚本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请记住为文本字符串和表示文本字符串的 JMeter 变量添加必要的引号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="groovy"&gt;__groovy&lt;/h3&gt;

&lt;p&gt;groovy 函数执行 &lt;a href="http://groovy-lang.org/"&gt;Apache Groovy&lt;/a&gt; 传递给它的脚本，并返回结果。&lt;/p&gt;
&lt;p&gt;如果属性“&lt;code&gt;groovy.utilities&lt;/code&gt;”已被定义，它会被 ScriptEngine（脚本引擎）加载。这可以用来定义通用的方法和变量。在 bin 目录中有一个 init 示例文件：&lt;code&gt;utility.groovy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下变量在脚本执行之前已经被设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; - groovy 函数（*）的&lt;a href="https://www.slf4j.org/api/org/slf4j/Logger.html"&gt;记录器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html"&gt;JMeterContext&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html"&gt;JMeterVariables&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; - JMeterProperties（类 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"&gt;java.util.Properties&lt;/a&gt;）对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadName&lt;/code&gt; - 线程名称 （字符串）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sampler&lt;/code&gt; - 当前的&lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html"&gt;采样器&lt;/a&gt;，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prev&lt;/code&gt; - 之前的 &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html"&gt;SampleResult&lt;/a&gt;，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUT&lt;/code&gt; - System.out&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（*）表示这是在 init 文件（如果有的话）被处理之前设置的。其他变量因调用而异。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用此函数时，请使用之前定义的变量而不是使用字符串替换来访问脚本中的变量。遵循此模式以确保缓存Groovy，从而确保您的测试具有高效性。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如&lt;strong&gt;，不要&lt;/strong&gt;执行以下操作： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__groovy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${myVar&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;.substring(0\,2))}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想象一下，变量myVar随每个事务而变化，上面的Groovy无法缓存，因为脚本每次都会更改。
但是执行下面的操作，就可以缓存：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__groovy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myVar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要计算的表达式&lt;/td&gt;
&lt;td&gt;一个 groovy 脚本（不是文件名）&lt;br/&gt;&lt;blockquote&gt;本身包含逗号的参数值应根据需要进行转义。如果需要在参数值中包含逗号，请像这样转义： ‘&lt;code&gt;\,&lt;/code&gt;’&lt;/blockquote&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__groovy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回 &lt;code&gt;56088&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__groovy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${var&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;.substring(0\,2))}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果 var 的值是 &lt;code&gt;JMeter&lt;/code&gt;，它会在调用 &lt;code&gt;String.substring(0,2)&lt;/code&gt; 后返回 &lt;code&gt;JM&lt;/code&gt;。注意 &lt;code&gt;,&lt;/code&gt; 已经被 &lt;code&gt;\,&lt;/code&gt; 转义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请记住为文本字符串和表示文本字符串的 JMeter 变量添加必要的引号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="split"&gt;__split&lt;/h3&gt;

&lt;p&gt;split 函数根据分隔符拆分传递给它的字符串，并返回原始字符串。如果分隔符与分隔符是相邻的，则返回“&lt;code&gt;？&lt;/code&gt;”作为值。拆分出来的字符串将返回到 &lt;code&gt;${VAR_1}&lt;/code&gt;，&lt;code&gt;${VAR_2}&lt;/code&gt;……这些变量中。变量的计数将返回到 &lt;code&gt;${VAR_n}&lt;/code&gt; 中。拖尾分隔符被视为缺失变量，并返回“&lt;code&gt;？&lt;/code&gt;”。此外，为了使它在 ForEach 控制器上更好地工作， &lt;code&gt;__split&lt;/code&gt; 现在会删除第一个不使用的变量，以防它是上一次拆分所设置的。&lt;/p&gt;
&lt;p&gt;例子：
在测试计划中定义 &lt;code&gt;VAR&lt;/code&gt;="&lt;code&gt;a||c|&lt;/code&gt;"。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;,VAR,|)}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将返回 &lt;code&gt;VAR&lt;/code&gt; 的内容，即“&lt;code&gt;a||c|&lt;/code&gt;”并设置以下变量：
&lt;code&gt;VAR_n&lt;/code&gt;=&lt;code&gt;4&lt;/code&gt;
&lt;code&gt;VAR_1&lt;/code&gt;=&lt;code&gt;a&lt;/code&gt;
&lt;code&gt;VAR_2&lt;/code&gt;=&lt;code&gt;?&lt;/code&gt;
&lt;code&gt;VAR_3&lt;/code&gt;=&lt;code&gt;c&lt;/code&gt;
&lt;code&gt;VAR_4&lt;/code&gt;=&lt;code&gt;?&lt;/code&gt;
&lt;code&gt;VAR_5&lt;/code&gt;=&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要拆分的字符串&lt;/td&gt;
&lt;td&gt;一个要拆分的字符串，例如“&lt;code&gt;a|b|c&lt;/code&gt;”&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;重用此函数计算的值的引用名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分隔符&lt;/td&gt;
&lt;td&gt;分隔符，例如&lt;code&gt;|&lt;/code&gt;。如果省略，则使用&lt;code&gt;,&lt;/code&gt;。注意 &lt;code&gt;,&lt;/code&gt; 需要 &lt;code&gt;\,&lt;/code&gt; 来转义。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="XPath"&gt;__XPath&lt;/h3&gt;

&lt;p&gt;XPath 函数读取一个 XML 文件并匹配 XPath。每次调用该函数时，都会返回下一个匹配项。到达文件末尾后，会返回到开始。如果没有匹配的节点，该函数将返回空字符串，同时将一条警告消息写入 JMeter 日志文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，整个 NodeList 会被保存在内存中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__XPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nd"&gt;@name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这将匹配 &lt;code&gt;build.xml&lt;/code&gt; 中的所有 &lt;code&gt;target&lt;/code&gt; 节点，并返回下一个 &lt;code&gt;name&lt;/code&gt; 属性的内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;待解析的 XML 文件&lt;/td&gt;
&lt;td&gt;一个待解析的 XML 文件&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XPath&lt;/td&gt;
&lt;td&gt;一个 XPath 表达式用来匹配 XML 文件中的节点&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="setProperty"&gt;__setProperty&lt;/h3&gt;

&lt;p&gt;setProperty 函数用来设置 JMeter 属性的值。函数的默认返回值是空字符串，因此在函数有效处都可以调用此函数。&lt;/p&gt;
&lt;p&gt;可以通过设置第 3 个可选参数为“&lt;code&gt;true&lt;/code&gt;”返回原始值。&lt;/p&gt;
&lt;p&gt;属性对 JMeter 来说是全局的，所以可以用在线程和线程组之间的通信上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;属性名称&lt;/td&gt;
&lt;td&gt;要设置的属性名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性值&lt;/td&gt;
&lt;td&gt;该属性的值&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True/False&lt;/td&gt;
&lt;td&gt;是否返回原始值？&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="time"&gt;__time&lt;/h3&gt;

&lt;p&gt;time 函数以各种格式返回当前时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;格式&lt;/td&gt;
&lt;td&gt;要传递给 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"&gt;SimpleDateFormat&lt;/a&gt; 的格式。该函数支持各种速记别名，见下文。如果省略，该函数将返回自纪元开始至今的时间（以毫秒为单位）。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果省略了格式字符串，则该函数返回自纪元开始至今的时间（以毫秒为单位）。如果格式匹配“&lt;code&gt;/ddd&lt;/code&gt;”（其中 &lt;code&gt;ddd&lt;/code&gt; 是十进制数字），则该函数返回以毫秒为单位的至今的时间除以 &lt;code&gt;ddd&lt;/code&gt; 的值。例如，“&lt;code&gt;/1000&lt;/code&gt;”将返回自纪元开始至今的时间（以秒为单位）。否则，当前时间传递给 SimpleDateFormat。支持以下简写别名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;YMD&lt;/code&gt; = &lt;code&gt;yyyyMMdd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HMS&lt;/code&gt; = &lt;code&gt;HHmmss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YMDHMS&lt;/code&gt; = &lt;code&gt;yyyyMMdd-HHmmss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER1&lt;/code&gt; = JMeter 属性 &lt;code&gt;time.USER1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USER2&lt;/code&gt; = JMeter 属性 &lt;code&gt;time.USER2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认值可以通过设置适当的 JMeter 属性来改变，例如 &lt;code&gt;time.YMD=yyMMdd&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在2018年1月21日运行，将返回&lt;code&gt;21/01/2018&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YMD&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在2018年1月21日运行，将返回&lt;code&gt;20180121&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回以毫秒表示的时间&lt;code&gt;1516540541624&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="jexl2"&gt;__jexl2&lt;/h3&gt;

&lt;p&gt;jexl 函数返回执行 &lt;a href="http://commons.apache.org/proper/commons-jexl/"&gt;通用 JEXL 表达式&lt;/a&gt;的结果 。有关 JEXL 表达式的更多信息，请参阅下面的链接。&lt;/p&gt;
&lt;p&gt;jexl2 函数使用通用 JEXL 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://commons.apache.org/proper/commons-jexl/reference/syntax.html"&gt;JEXL 语法描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://commons.apache.org/proper/commons-jexl/reference/examples.html#Example_Expressions"&gt;JEXL 的例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;表达式&lt;/td&gt;
&lt;td&gt;待执行的表达式，例如：&lt;code&gt;6*(5+2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下变量可用于脚本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; - 函数的&lt;a href="https://www.slf4j.org/api/org/slf4j/Logger.html"&gt;记录器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html"&gt;JMeterContext&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html"&gt;JMeterVariables&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; - JMeterProperties（类 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"&gt;java.util.Properties&lt;/a&gt;）对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadName&lt;/code&gt; - 包含当前线程名称的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sampler&lt;/code&gt; - 当前的&lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html"&gt;采样器&lt;/a&gt;对象，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sampleResult&lt;/code&gt; - 之前的 &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html"&gt;SampleResult&lt;/a&gt;对象，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUT&lt;/code&gt; - System.out 例如：&lt;code&gt;OUT.println("message")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jexl 也可以创建类和调用其方法，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Systemclass=log.class.forName(&amp;quot;java.lang.System&amp;quot;);
now=Systemclass.currentTimeMillis();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，网站上的 Jexl 文档错误地建议使用“&lt;code&gt;div&lt;/code&gt;”做整数除法。实际上“&lt;code&gt;div&lt;/code&gt;”和“&lt;code&gt;/&lt;/code&gt;”都执行普通除法。下面的操作可以得到整数除法的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i= 5 / 2;
i.intValue(); // 或使用 i.longValue()
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;JMeter 允许表达式包含多个语句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="jexl3"&gt;__jexl3&lt;/h3&gt;

&lt;p&gt;jexl 函数返回执行 &lt;a href="http://commons.apache.org/proper/commons-jexl/"&gt;通用 JEXL 表达式&lt;/a&gt;的结果 。有关 JEXL 表达式的更多信息，请参阅下面的链接。&lt;/p&gt;
&lt;p&gt;jexl3 函数使用通用 JEXL 3
  * &lt;a href="http://commons.apache.org/proper/commons-jexl/reference/syntax.html"&gt;JEXL 语法描述&lt;/a&gt;
  * &lt;a href="http://commons.apache.org/proper/commons-jexl/reference/examples.html#Example_Expressions"&gt;JEXL 的例子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;表达式&lt;/td&gt;
&lt;td&gt;待执行的表达式，例如：&lt;code&gt;6*(5+2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下变量可用于脚本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt; - 函数的&lt;a href="https://www.slf4j.org/api/org/slf4j/Logger.html"&gt;记录器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctx&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterContext.html"&gt;JMeterContext&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vars&lt;/code&gt; - &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/threads/JMeterVariables.html"&gt;JMeterVariables&lt;/a&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; - JMeterProperties（类 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"&gt;java.util.Properties&lt;/a&gt;）对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;threadName&lt;/code&gt; - 包含当前线程名称的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sampler&lt;/code&gt; - 当前的&lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/Sampler.html"&gt;采样器&lt;/a&gt;对象，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sampleResult&lt;/code&gt; - 之前的 &lt;a href="http://jmeter.apache.org/api/org/apache/jmeter/samplers/SampleResult.html"&gt;SampleResult&lt;/a&gt; 对象，如果有的话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OUT&lt;/code&gt; - System.out 例如：&lt;code&gt;OUT.println("message")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jexl 也可以创建类和调用其方法，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Systemclass=log.class.forName(&amp;quot;java.lang.System&amp;quot;);
now=Systemclass.currentTimeMillis();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，网站上的 Jexl 文档错误地建议使用“&lt;code&gt;div&lt;/code&gt;”做整数除法。实际上“&lt;code&gt;div&lt;/code&gt;”和“&lt;code&gt;/&lt;/code&gt;”都执行普通除法。下面的操作可以得到整数除法的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i= 5 / 2;
i.intValue(); // 或使用 i.longValue()
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;JMeter 允许表达式包含多个语句。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="V"&gt;__V&lt;/h3&gt;

&lt;p&gt;V（变量）函数返回执行变量名称表达式的结果。这可以用来执行嵌套变量引用（目前不支持）。&lt;/p&gt;
&lt;p&gt;例如，如果有变量 &lt;code&gt;A1&lt;/code&gt;，&lt;code&gt;A2&lt;/code&gt; 和 &lt;code&gt;N&lt;/code&gt;=&lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${A1}&lt;/code&gt; - 可以使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${A${N}}&lt;/code&gt; - 不起作用（嵌套变量引用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__V(A${N})}&lt;/code&gt; - 可以使用。&lt;code&gt;${N}&lt;/code&gt; 变成 &lt;code&gt;A1&lt;/code&gt;，&lt;code&gt;__V&lt;/code&gt; 函数返回 &lt;code&gt;A1&lt;/code&gt; 的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;待执行的变量&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认值&lt;/td&gt;
&lt;td&gt;未找到变量时的默认值，如果它为空且没有找到变量函数，则返回变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="evalVar"&gt;__evalVar&lt;/h3&gt;

&lt;p&gt;evalVar 函数返回执行存储在变量中的表达式的结果。&lt;/p&gt;
&lt;p&gt;这允许从文件读取字符串，并处理其中的任何变量引用。例如，如果变量“&lt;code&gt;query&lt;/code&gt;”包含“&lt;code&gt;select ${column} from ${table}&lt;/code&gt;”，并且“&lt;code&gt;column&lt;/code&gt;”和“&lt;code&gt;table&lt;/code&gt;”分别包含“&lt;code&gt;name&lt;/code&gt;”和“&lt;code&gt;customers&lt;/code&gt;”，那么 &lt;code&gt;${__evalVar(query)}&lt;/code&gt; 将会执行“&lt;code&gt;select name from customers&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;待执行的变量&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="eval"&gt;__eval&lt;/h3&gt;

&lt;p&gt;eval 函数返回执行字符串表达式的结果。&lt;/p&gt;
&lt;p&gt;这允许往变量中存储的字符串中插入变量和函数引用。例如，给定以下变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;=&lt;code&gt;Smith&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column&lt;/code&gt;=&lt;code&gt;age&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;=&lt;code&gt;birthdays&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQL&lt;/code&gt;=&lt;code&gt;select ${column} from ${table} where name='${name}'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;${__eval(${SQL})}&lt;/code&gt; 将执行 “&lt;code&gt;select age from birthdays where name='Smith'&lt;/code&gt;”&lt;/p&gt;
&lt;p&gt;这可以与 CSV 数据集结合使用，例如在数据文件中定义 SQL 语句和值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要执行的变量&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="char"&gt;__char&lt;/h3&gt;

&lt;p&gt;char 函数将一个数字转换成 Unicode 字符。另外请参阅下面的&lt;code&gt;__unescape()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这允许将任意字符值添加到字段中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unicode字符编码（十进制或十六进制数）&lt;/td&gt;
&lt;td&gt;十进制数（或十六进制数前缀为 &lt;code&gt;0x&lt;/code&gt;，或八进制前缀为 &lt;code&gt;0&lt;/code&gt;）将被转换为 Unicode 字符。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__char(13,10)}&lt;/code&gt; = &lt;code&gt;${__char(0xD,0xA)}&lt;/code&gt; = &lt;code&gt;${__char(015,012)}&lt;/code&gt; = &lt;code&gt;CRLF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__char(165)}&lt;/code&gt; = &lt;code&gt;¥&lt;/code&gt; (元)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unescape"&gt;__unescape&lt;/h3&gt;

&lt;p&gt;unescape 函数将返回将 Java 转义过的字符串反转义的结果。另外请参阅上面的&lt;code&gt;__char()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这允许添加字符到字段，否则通过 GUI 定义是非常困难的（或不可能的）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;反转义的字符串&lt;/td&gt;
&lt;td&gt;待反转义的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${__unescape(\r\n)}&lt;/code&gt; = &lt;code&gt;CRLF&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;${__unescape(1\t2)}&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;[tab]&lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="unescapeHtml"&gt;__unescapeHtml&lt;/h3&gt;

&lt;p&gt;函数将包含 HTML 实体的字符串反转义为包含对应于转义符的实际 Unicode 字符的字符串。支持 HTML 4.0 实体。&lt;/p&gt;
&lt;p&gt;例如，字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__unescapeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fran&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ccedil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;ais&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;&amp;lt;Français&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果某个实体无法识别，则将其保留，并逐字地插入结果字符串中。例如 &lt;code&gt;${__unescapeHtml(&amp;amp;gt;&amp;amp;zzzz;x)}&lt;/code&gt; 将返回 &lt;code&gt;"&amp;gt;&amp;amp;zzzz;x"&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 Commons Lang 的 &lt;code&gt;StringEscapeUtils#unescapeHtml(String)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;反转义的字符串&lt;/td&gt;
&lt;td&gt;待反转义的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="escapeHtml"&gt;__escapeHtml&lt;/h3&gt;

&lt;p&gt;函数用于转义使用 HTML 实体的字符串。支持HTML 4.0 实体。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__escapeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;butter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 &lt;code&gt;&amp;amp;quot;bread&amp;amp;quot; &amp;amp;amp; &amp;amp;quot;butter&amp;amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 Commons Lang 的 &lt;code&gt;StringEscapeUtils#escapeHtml(String)&lt;/code&gt;。
&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;转义的字符串&lt;/td&gt;
&lt;td&gt;待转义的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="urldecode"&gt;__urldecode&lt;/h3&gt;

&lt;p&gt;函数用来解码 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 字符串，注意：使用 UTF-8 作为编码方案。&lt;/p&gt;
&lt;p&gt;例如，字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__urldecode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Word&lt;/span&gt;&lt;span class="o"&gt;+%&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="n"&gt;school&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="o"&gt;+%&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;C3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;A9cole&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;french&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 &lt;code&gt;Word "school" is "école" in french&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 Java 类 &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLDecoder.html"&gt;URLDecoder&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要解码的字符串&lt;/td&gt;
&lt;td&gt;待解码的带有 URL 编码字符的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="urlencode"&gt;__urlencode&lt;/h3&gt;

&lt;p&gt;函数用来将字符串转码成 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 字符串。&lt;/p&gt;
&lt;p&gt;例如，字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__urlencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Word&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;school&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;école&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;french&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 &lt;code&gt;Word+%22school%22+is+%22%C3%A9cole%22+in+french&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 Java 类 &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLDecoder.html"&gt;URLDecoder&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要转码的字符串&lt;/td&gt;
&lt;td&gt;待转码的使用 URL 编码字符的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="FileToString"&gt;__FileToString&lt;/h3&gt;

&lt;p&gt;FileToString 函数可以用来读取整个文件。每次调用时读取整个文件。&lt;/p&gt;
&lt;p&gt;如果打开或读取文件时发生错误，函数会返回字符串“&lt;code&gt;**ERR**&lt;/code&gt;”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;文件名称&lt;/td&gt;
&lt;td&gt;文件名称的路径（路径可以是相对于 JMeter 启动目录的相对路径）&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件编码，如果不是平台默认的&lt;/td&gt;
&lt;td&gt;用于读取文件的编码。如果未指定，则使用平台默认编码方式&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;引用名称&lt;/td&gt;
&lt;td&gt;引用名称 - &lt;code&gt;refName&lt;/code&gt; - 用于重用由此函数创建的值。存储的值的格式为 &lt;code&gt;${refName}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;每次执行函数时都会解析文件名，编码和引用名称参数。&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="samplerName"&gt;__samplerName&lt;/h3&gt;

&lt;p&gt;samplerName 函数返回当前采样器的名称（即标签）。&lt;/p&gt;
&lt;p&gt;该函数在没有关联采样器的测试元件中不起作用。例如测试计划。配置元件也没有关联的采样器。但是一些配置元件会被采样器直接引用，例如 HTTP 信息头管理器和 Http Cookie 管理器，这种情况下，函数在 Http 采样器的上下文中被解析。前置处理器，后置处理器和断言总是有一个关联的采样器。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__samplerName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;引用名称 - &lt;code&gt;refName&lt;/code&gt; - 用于重用由此函数创建的值。存储的值的格式为 &lt;code&gt;${refName}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="TestPlanName"&gt;__TestPlanName&lt;/h3&gt;

&lt;p&gt;TestPlanName 函数返回当前测试计划的名称（可用于内部计划以掌握调用的测试计划的名称）。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__TestPlanName&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回测试计划的文件名称，例如，如果计划在一个名为 Demo.jmx 的文件中，它将返回“&lt;code&gt;Demo.jmx&lt;/code&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="escapeOroRegexpChars"&gt;__escapeOroRegexpChars&lt;/h3&gt;

&lt;p&gt;函数用于转义 ORO 正则表达式元字符，相当于 Java 正则表达式引擎中的 &lt;code&gt;\Q&lt;/code&gt; &lt;code&gt;\E&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__escapeOroRegexpChars&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;].+?,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 &lt;code&gt;\[\^\"\]\.\+\?&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 ORO 的 &lt;code&gt;Perl5Compiler#quotemeta(String)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要转义的字符串&lt;/td&gt;
&lt;td&gt;待转义的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;引用名称 - &lt;code&gt;refName&lt;/code&gt; - 用于重用由此函数创建的值。存储的值的格式为 &lt;code&gt;${refName}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="escapeXml"&gt;__escapeXml&lt;/h3&gt;

&lt;p&gt;函数用来转义使用 XML 1.0 实体的字符串中的字符。&lt;/p&gt;
&lt;p&gt;例如，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__escapeXml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bread&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;butter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回 &lt;code&gt;&amp;amp;quot;bread&amp;amp;quot; &amp;amp;amp; &amp;amp;apos;butter&amp;amp;apos;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;使用 Commons Lang 的 &lt;code&gt;StringEscapeUtils#escapeXml10(String)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;要转义的字符串&lt;/td&gt;
&lt;td&gt;待转义的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="timeShift"&gt;__timeShift&lt;/h3&gt;

&lt;p&gt;timeShift 函数返回指定格式的日期，并加上指定的秒数，分钟数，小时数，天数或月数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;格式&lt;/td&gt;
&lt;td&gt;要传递给 DateTimeFormatter 的格式。请参阅 &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"&gt;DateTimeFormatter&lt;/a&gt; 如果省略，则函数使用纪元时间格式&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日期转换&lt;/td&gt;
&lt;td&gt;以第一个参数“格式”设置的格式转换指定日期，如果省略，则日期默认为现在&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;值转换&lt;/td&gt;
&lt;td&gt;根据文本表示的持续时间（如PnDTnHnMn.nS）转换成指定的秒数，分钟数，小时数或天数。请参阅&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence"&gt;https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence&lt;/a&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;PT20.345S&lt;/code&gt; 解析为 20.345 秒&lt;/li&gt;&lt;li&gt;&lt;code&gt;PT15M&lt;/code&gt; 解析为 15 分钟&lt;/li&gt;&lt;li&gt;&lt;code&gt;PT10H&lt;/code&gt; 解析为 10 个小时&lt;/li&gt;&lt;li&gt;&lt;code&gt;P2D&lt;/code&gt; 解析为 2 天&lt;/li&gt;&lt;li&gt;&lt;code&gt;P6H3M&lt;/code&gt; 解析为 6小时3分钟&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用于格式的区域设置&lt;/td&gt;
&lt;td&gt;语言环境的字符串格式。语言代码必须是小写。国家代码必须大写。分隔符必须是下划线，例如 &lt;code&gt;en_EN&lt;/code&gt;。请参阅 &lt;a href="http://www.oracle.com/technetwork/java/javase/javase7locales-334809.html"&gt;http://www.oracle.com/technetwork/java/javase/javase7locales-334809.html&lt;/a&gt;。如果省略，则默认情况下该函数使用 Apache JMeter 当前语言环境。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__timeShift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;P2D&lt;/span&gt;&lt;span class="p"&gt;,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回&lt;code&gt;23/01/2018&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__timeShift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt; &lt;span class="n"&gt;MMMM&lt;/span&gt; &lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;février&lt;/span&gt; &lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;P2D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fr_FR&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回&lt;code&gt;23 février 2018&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="digest "&gt;__digest &lt;/h3&gt;

&lt;p&gt;digest 函数返回特定的哈希算法的加密后的值，哈希算法有多种，名称为大写，可带 salt。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;算法&lt;/td&gt;
&lt;td&gt;用来加密的算法。可用的算法请参阅 &lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html"&gt;StandardNames&lt;/a&gt; 的 MessageDigest  &lt;br/&gt;&lt;ul&gt;&lt;li&gt;MD2&lt;/li&gt;&lt;li&gt;MD5&lt;/li&gt;&lt;li&gt;SHA-1&lt;/li&gt;&lt;li&gt;SHA-224&lt;/li&gt;&lt;li&gt;SHA-256&lt;/li&gt;&lt;li&gt;SHA-384&lt;/li&gt;&lt;li&gt;SHA-512&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;blockquote&gt;&lt;code&gt;要添加的 salt&lt;/code&gt;和&lt;code&gt;要编码的字符串&lt;/code&gt;中是要考虑空格的&lt;/blockquote&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;要编码的字符串&lt;/td&gt;
&lt;td&gt;将被加密的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;要添加的 salt&lt;/td&gt;
&lt;td&gt;添加到字符串的 salt（加在字符串之后）&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大写值&lt;/td&gt;
&lt;td&gt;默认返回值为小写。当为true时返回值大写。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Errare&lt;/span&gt; &lt;span class="n"&gt;humanum&lt;/span&gt; &lt;span class="n"&gt;est&lt;/span&gt;&lt;span class="p"&gt;,,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回&lt;code&gt;c49f00b92667a35c63708933384dad52&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Felix&lt;/span&gt; &lt;span class="n"&gt;qui&lt;/span&gt; &lt;span class="n"&gt;potuit&lt;/span&gt; &lt;span class="n"&gt;rerum&lt;/span&gt; &lt;span class="n"&gt;cognoscere&lt;/span&gt; &lt;span class="n"&gt;causas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mysalt&lt;/span&gt;&lt;span class="p"&gt;,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回&lt;code&gt;a3bc6900fe2b2fc5fa8a601a4a84e27a079bf2c581d485009bc5c00516729ac7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="dateTimeConvert"&gt;__dateTimeConvert&lt;/h3&gt;

&lt;p&gt;dateTimeConvert 函数将日期从源格式转换成目标格式并将结果储存到变量名中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;日期字符串&lt;/td&gt;
&lt;td&gt;要从源格式转换到目标格式的日期字符串。如果源日期格式为空，将使用纪元时间格式的日期。&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;源日期格式&lt;/td&gt;
&lt;td&gt;原始日期格式。如果为空，则日期字符串字段必须是纪元时间格式。&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;目标日期格式&lt;/td&gt;
&lt;td&gt;新的日期格式&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要设置的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__dateTimeConvert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mo"&gt;0121201&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MMddyyyy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yyyy&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回&lt;code&gt;21/01/2018&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用纪元时间：1526574881000，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Felix&lt;/span&gt; &lt;span class="n"&gt;qui&lt;/span&gt; &lt;span class="n"&gt;potuit&lt;/span&gt; &lt;span class="n"&gt;rerum&lt;/span&gt; &lt;span class="n"&gt;cognoscere&lt;/span&gt; &lt;span class="n"&gt;causas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mysalt&lt;/span&gt;&lt;span class="p"&gt;,,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以UTC时间（Duser.timezone=GMT）返回&lt;code&gt;17/05/2018 16:34&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="isPropDefined"&gt;__isPropDefined&lt;/h3&gt;

&lt;p&gt;isPropDefined 函数当属性存在时返回 true，不存在时返回 false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;属性名称&lt;/td&gt;
&lt;td&gt;要检查是否定义的属性名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__isPropDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;START&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HMS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="isVarDefined"&gt;__isVarDefined&lt;/h3&gt;

&lt;p&gt;isVarDefined 函数当变量存在时返回 true，不存在时返回 false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要检查是否定义的变量名称&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__isVarDefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JMeterThread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_sample_ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="changeCase"&gt;__changeCase&lt;/h3&gt;

&lt;p&gt;changeCase 函数返回大小写经过特定模式变更后的字符串值。结果储存在 JMeter 变量中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数（Parameters）&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性（Attribute）&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;是否必须&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;待变更大小写的字符串&lt;/td&gt;
&lt;td&gt;将变更大小写模式的字符串&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;大小写变更模式&lt;/td&gt;
&lt;td&gt;改变大小写的模式，例如对&lt;code&gt;ab-CD eF&lt;/code&gt;：&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;UPPER&lt;/code&gt;模式返回 AB-CD EF &lt;/li&gt;&lt;li&gt;&lt;code&gt;LOWER&lt;/code&gt;模式返回 ab-cd ed &lt;/li&gt;&lt;li&gt;&lt;code&gt;CAPITALIZE&lt;/code&gt;模式返回 Ab-CD eF &lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;blockquote&gt;变更模式名称不区分大小写&lt;/blockquote&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变量名称&lt;/td&gt;
&lt;td&gt;要检查是否定义的变量名称&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__changeCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Avaro&lt;/span&gt; &lt;span class="n"&gt;omnia&lt;/span&gt; &lt;span class="n"&gt;desunt&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inopi&lt;/span&gt; &lt;span class="n"&gt;pauca&lt;/span&gt;\&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sapienti&lt;/span&gt; &lt;span class="n"&gt;nihil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UPPER&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;AVARO OMNIA DESUNT, INOPI PAUCA, SAPIENTI NIHIL&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__changeCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LABOR&lt;/span&gt; &lt;span class="n"&gt;OMNIA&lt;/span&gt; &lt;span class="n"&gt;VINCIT&lt;/span&gt; &lt;span class="n"&gt;IMPROBUS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;labor omnia vincit improbus&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;__changeCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;omnibus&lt;/span&gt; &lt;span class="n"&gt;viis&lt;/span&gt; &lt;span class="n"&gt;romam&lt;/span&gt; &lt;span class="n"&gt;pervenitur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CAPITALIZE&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将返回&lt;code&gt;Omnibus viis romam pervenitur&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="#functions_list"&gt;【返回函数列表】&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;20.6 预定义变量&lt;/h2&gt;
&lt;p&gt;大多数变量都是通过调用函数或者用户定义的变量等测试元件来设置的；在这种情况下，用户对所使用的变量名称有完整的控制权。但是有些变量是 JMeter 内部定义的。这些在下面列出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COOKIE_cookiename&lt;/code&gt; - 包含 cookie 的值（请参阅 &lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#HTTP_Cookie_Manager"&gt;HTTP Cookie 管理器&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMeterThread.last_sample_ok&lt;/code&gt; - 不管最后一个采样是否可用 - &lt;code&gt;true/false&lt;/code&gt;。注意：它会在后置处理器和断言运行后更新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START&lt;/code&gt; 变量（参见下一节）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;20.7 预定义属性&lt;/h2&gt;
&lt;p&gt;JMeter 属性集是在 JMeter 启动时通过系统属性定义来初始化的；附加的 JMeter 属性在 &lt;code&gt;jmeter.properties&lt;/code&gt;，&lt;code&gt;user.properties&lt;/code&gt; 或命令行中定义。&lt;/p&gt;
&lt;p&gt;一些内置属性由 JMeter 定义。这些在下面列出。为方便起见，&lt;code&gt;START&lt;/code&gt; 属性也被复制到具有相同名称的变量中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;START.MS&lt;/code&gt; - 以毫秒为单位的 JMeter 启动时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START.YMD&lt;/code&gt; - 格式为 &lt;code&gt;yyyyMMdd&lt;/code&gt; 的 JMeter 启动日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START.HMS&lt;/code&gt; - 格式为 &lt;code&gt;HHmmss&lt;/code&gt; 的 JMeter 启动时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TESTSTART.MS&lt;/code&gt; - 以毫秒为单位的测试启动时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，&lt;code&gt;START&lt;/code&gt; 变量/属性表示的是 JMeter 启动时间，而不是测试启动时间。它们主要用于文件名等地方。 &lt;/p&gt;</content><category term="JMeter"></category><category term="Documentation"></category><category term="Translation"></category></entry><entry><title>JMeter文档翻译之21-正则表达式</title><link href="https://jlhxxxx.github.io/jmeter-doc-cn-21.html" rel="alternate"></link><published>2019-05-06T00:00:00+08:00</published><updated>2019-05-06T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2019-05-06:/jmeter-doc-cn-21.html</id><summary type="html">&lt;p&gt;英文文档地址：&amp;lt;&lt;a href="http://jmeter.apache.org/usermanual/functions.html"&gt;http://jmeter.apache.org/usermanual/functions.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;h2&gt;21.1 概述&lt;/h2&gt;
&lt;p&gt;JMeter 包含模式匹配软件 &lt;a href="http://attic.apache.org/projects/jakarta-oro.html"&gt;Apache Jakarta ORO&lt;/a&gt; 。 
在 Jakarta 网站上有一些相关文档，例如：&lt;a href="http://archimedes.fas.harvard.edu/scrapbook/jakarta-oro-2.0.6/docs/api/org/apache/oro/text/regex/package-summary.html"&gt;模式匹配字符摘要&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;在 &lt;a href="http://www.savarese.org/oro/docs/OROMatcher/index.html"&gt;OROMatcher 用户指南&lt;/a&gt;上还有关于该产品旧版本的文档 ，也许会有些用处。  &lt;/p&gt;
&lt;p&gt;模式匹配与 Perl 中的模式匹配非常类似。Perl 的完整安装会包含大量关于正则表达式的文档——查找 &lt;code&gt;perlrequick&lt;/code&gt;， &lt;code&gt;perlretut&lt;/code&gt;， &lt;code&gt;perlre&lt;/code&gt; 和 &lt;code&gt;perlreref&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;有必要强调“包含（contains）”和“匹配（matches）”之间的区别，它们被用在响应断言（Response Assertion）测试元件上： &lt;/p&gt;
&lt;p&gt;"&lt;em&gt;包含（contains …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;英文文档地址：&amp;lt;&lt;a href="http://jmeter.apache.org/usermanual/functions.html"&gt;http://jmeter.apache.org/usermanual/functions.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;h2&gt;21.1 概述&lt;/h2&gt;
&lt;p&gt;JMeter 包含模式匹配软件 &lt;a href="http://attic.apache.org/projects/jakarta-oro.html"&gt;Apache Jakarta ORO&lt;/a&gt; 。 
在 Jakarta 网站上有一些相关文档，例如：&lt;a href="http://archimedes.fas.harvard.edu/scrapbook/jakarta-oro-2.0.6/docs/api/org/apache/oro/text/regex/package-summary.html"&gt;模式匹配字符摘要&lt;/a&gt;。  &lt;/p&gt;
&lt;p&gt;在 &lt;a href="http://www.savarese.org/oro/docs/OROMatcher/index.html"&gt;OROMatcher 用户指南&lt;/a&gt;上还有关于该产品旧版本的文档 ，也许会有些用处。  &lt;/p&gt;
&lt;p&gt;模式匹配与 Perl 中的模式匹配非常类似。Perl 的完整安装会包含大量关于正则表达式的文档——查找 &lt;code&gt;perlrequick&lt;/code&gt;， &lt;code&gt;perlretut&lt;/code&gt;， &lt;code&gt;perlre&lt;/code&gt; 和 &lt;code&gt;perlreref&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;有必要强调“包含（contains）”和“匹配（matches）”之间的区别，它们被用在响应断言（Response Assertion）测试元件上： &lt;/p&gt;
&lt;p&gt;"&lt;em&gt;包含（contains）&lt;/em&gt;" &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味着正则表达式至少与目标的某个部分相匹配，所以 '&lt;code&gt;alphabet&lt;/code&gt;' “包含” '&lt;code&gt;ph.b.&lt;/code&gt;'，因为正则表达式匹配子字符串 '&lt;code&gt;phabe&lt;/code&gt;'。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"&lt;em&gt;匹配（matches）&lt;/em&gt;" &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味着正则表达式匹配整个目标。所以 '&lt;code&gt;alphabet&lt;/code&gt;' 和 '&lt;code&gt;al.*t&lt;/code&gt;' 是“匹配”的 。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种情况下，它相当于将正则表达式封装在 &lt;code&gt;^&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt; 中，即 '&lt;code&gt;^al.*t$&lt;/code&gt;'。  &lt;/p&gt;
&lt;p&gt;然而，情况并非总是如此。例如，正则表达式 '&lt;code&gt;alp|.lp.*&lt;/code&gt;' “包含”于 '&lt;code&gt;alphabet&lt;/code&gt;'，但并不“匹配” '&lt;code&gt;alphabet&lt;/code&gt;'。  &lt;/p&gt;
&lt;p&gt;这是为什么？原因是当模式匹配器在 '&lt;code&gt;alphabet&lt;/code&gt;' 中找到序列 '&lt;code&gt;alp&lt;/code&gt;' 时，它将停止尝试其他组合——而 '&lt;code&gt;alp&lt;/code&gt;' 与 '&lt;code&gt;alphabet&lt;/code&gt;' 不同，它不包含 '&lt;code&gt;habet&lt;/code&gt;'。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同于 Perl，没有必要将正则表达式用 // 封装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么如果没有尾部的 &lt;code&gt;/&lt;/code&gt;，该如何使用 &lt;code&gt;ismx&lt;/code&gt; 等修饰符呢？解决方法是使用扩展的正则表达式，即 &lt;code&gt;/abc/i&lt;/code&gt; 变成 &lt;code&gt;(?i)abc&lt;/code&gt;。请参阅下面的&lt;a href="#215-修饰符的放置"&gt;修饰符的放置&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;21.2 举例&lt;/h2&gt;
&lt;h3&gt;提取单个字符串&lt;/h3&gt;
&lt;p&gt;假设您想要匹配网页的以下部分： 
&lt;code&gt;name="file" value="readme.txt"&amp;gt;&lt;/code&gt; 
并且要提取 &lt;code&gt;readme.txt&lt;/code&gt;。 
一个符合的正则表达式： 
&lt;code&gt;name="file "value ="(.+?)"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面的特殊字符是： &lt;/p&gt;
&lt;p&gt;&lt;code&gt;(&lt;/code&gt; 和 &lt;code&gt;)&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这些包围匹配字符串的部分将被返回  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 
* 匹配任何字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt;
* 一次或多次&lt;/p&gt;
&lt;p&gt;&lt;code&gt;？&lt;/code&gt;
* 不要贪婪，即在第一次匹配成功时停止 &lt;/p&gt;
&lt;p&gt;注意：如果没有 &lt;code&gt;？&lt;/code&gt;，&lt;code&gt;.+&lt;/code&gt; 在第一个 &lt;code&gt;"&amp;gt;&lt;/code&gt; 后会继续寻找，直到最后一个 &lt;code&gt;"&amp;gt;&lt;/code&gt; ——这可能不是我们所期望的。 &lt;/p&gt;
&lt;p&gt;注意：虽然上面的正则表达式可用，但使用下面的表达式会更有效率：&lt;br&gt;
&lt;code&gt;name ="file" value ="([^"]+)"&amp;gt;&lt;/code&gt; &lt;br&gt;
其中 &lt;code&gt;[^"]&lt;/code&gt; ——表示匹配任意（除了 &lt;code&gt;"&lt;/code&gt; ），在这种情况下，匹配引擎只要找到第一个 &lt;code&gt;"&lt;/code&gt; 就可以停止查找，而在之前的情况下，引擎必须检查它是否已经找到 &lt;code&gt;"&amp;gt;&lt;/code&gt; 而不是 &lt;code&gt;" &amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;提取多个字符串&lt;/h3&gt;
&lt;p&gt;假设你想匹配一个网页的以下部分：&lt;br&gt;
&lt;code&gt;name ="file.name" value ="readme.txt"&lt;/code&gt;，你想提取 &lt;code&gt;file.name&lt;/code&gt; 和 &lt;code&gt;readme.txt&lt;/code&gt;。&lt;br&gt;
符合的正则表达式：&lt;br&gt;
&lt;code&gt;name="([^"]+)" value="([^"]+)"&lt;/code&gt;&lt;br&gt;
这将创建 2 个匹配组，可以在 JMeter 正则表达式提取器（Regular Expression Extractor）模板（Template）中用 &lt;code&gt;$1$&lt;/code&gt; 和 &lt;code&gt;$2$&lt;/code&gt; 来引用。&lt;/p&gt;
&lt;p&gt;JMeter 正则表达式提取器将组的值保存在指定变量中。&lt;/p&gt;
&lt;p&gt;例如，假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用名称：&lt;code&gt;MYREF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正则表达式：&lt;code&gt;name="(.+?)" value="(.+?)"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板：&lt;code&gt;$1$$2$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不要将正则表达式放在 / / 中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下变量将被设置：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MYREF&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file.namereadme.txt&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;MYREF_g0&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name="file.name" value="readme.txt"&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;MYREF_g1&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file.name&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;MYREF_g2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readme.txt&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些变量可以在 JMeter 后续的测试计划中引用，形如 &lt;code&gt;${MYREF}&lt;/code&gt;，&lt;code&gt;${MYREF_g1}&lt;/code&gt; 等。&lt;/p&gt;
&lt;h2&gt;21.3 行模式&lt;/h2&gt;
&lt;p&gt;模式匹配可以有不同的表现方式，这取决于多行和单行修饰符的设置。注意单行和多行操作符之间没有任何关系，它们可以单独指定。&lt;/p&gt;
&lt;h3&gt;单行模式&lt;/h3&gt;
&lt;p&gt;单行模式只影响元字符 '&lt;code&gt;.&lt;/code&gt;' 的解释。&lt;/p&gt;
&lt;p&gt;默认情况下， '&lt;code&gt;.&lt;/code&gt;' 匹配除换行符之外的任何字符。在单行模式下, '&lt;code&gt;.&lt;/code&gt;' 也匹配换行符。&lt;/p&gt;
&lt;h3&gt;多行模式&lt;/h3&gt;
&lt;p&gt;多行模式只影响元字符 '&lt;code&gt;^&lt;/code&gt;' 和 '&lt;code&gt;$&lt;/code&gt;' 的解释。&lt;/p&gt;
&lt;p&gt;默认情况下 '&lt;code&gt;^&lt;/code&gt;' 和 '&lt;code&gt;$&lt;/code&gt;' 只匹配字符串的开头和结尾。在多行模式下， '&lt;code&gt;^&lt;/code&gt;' 匹配每一行的开头， '&lt;code&gt;$&lt;/code&gt;' 匹配每一行的结尾。&lt;/p&gt;
&lt;h2&gt;21.4 元字符&lt;/h2&gt;
&lt;p&gt;正则表达式使用特定字符作为元字符——这些字符对匹配（RE）引擎有特殊的意义。这些字符必须用 &lt;code&gt;\&lt;/code&gt;（反斜杠）前缀来转义，转义之后才能将它们视为普通字符。以下是元字符及其含义的列表（如有疑问，请查阅 ORO 文档）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(&lt;/code&gt; 和 &lt;code&gt;）&lt;/code&gt;
* 分组&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&lt;/code&gt; 和 &lt;code&gt;]&lt;/code&gt;
* 字符集合&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&lt;/code&gt; 和 &lt;code&gt;}&lt;/code&gt;
* 重复&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;，&lt;code&gt;+&lt;/code&gt; 和 &lt;code&gt;？&lt;/code&gt;
* 重复&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;
* 通配符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt;
* 转义字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;
* 选择符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt;
* 字符串或行的开始和结束&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，ORO 不支持关键字 \Q 和 \E。[在其他的 RE 引擎中，这些可以用来引用 RE 的一部分，使元字符代表它们自己。]可以使用函数来执行相同的操作，请参阅 &lt;a href="http://jmeter.apache.org/usermanual/functions.html#__escapeOroRegexpChars"&gt;&lt;code&gt;${__escapeOroRegexpChars(valueToEscape)}&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ORO 支持以下 Perl5 扩展正则表达式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?#text)&lt;/code&gt;
* 内嵌注释，可以使 &lt;code&gt;text&lt;/code&gt; 内容被忽略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?:regexp)&lt;/code&gt;
* 像"&lt;code&gt;()&lt;/code&gt;"一样获取匹配，但并不保存匹配结果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?=regexp)&lt;/code&gt;
* 零长度正向肯定断言。例如，&lt;code&gt;\w+(?=\s)&lt;/code&gt; 匹配一个后跟空格的单词，匹配结果不包含空格。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?!regexp)&lt;/code&gt;
* 零长度正向否定断言。例如，&lt;code&gt;foo(?!bar)&lt;/code&gt; 匹配任何 '&lt;code&gt;foo&lt;/code&gt;' 后面不跟 '&lt;code&gt;bar&lt;/code&gt;' 的结果。请注意，这是一个零长度断言，这意味着 &lt;code&gt;a(?!b)d&lt;/code&gt; 匹配 &lt;code&gt;ad&lt;/code&gt;，因为 &lt;code&gt;a&lt;/code&gt; 后面是一个非 &lt;code&gt;b&lt;/code&gt; 字符（&lt;code&gt;d&lt;/code&gt;），而 &lt;code&gt;d&lt;/code&gt; 符合此断言。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(?imsx)&lt;/code&gt;
* 一个或多个嵌入模式匹配修饰符。&lt;code&gt;i&lt;/code&gt; 启用大小写不敏感，&lt;code&gt;m&lt;/code&gt; 启用多行输入处理，&lt;code&gt;s&lt;/code&gt; 启用单行输入处理，&lt;code&gt;x&lt;/code&gt; 启用扩展的空白注释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请注意：不支持反向肯定断言——&lt;code&gt;(?&amp;lt;=regexp)&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;21.5 修饰符的放置&lt;/h2&gt;
&lt;p&gt;修饰符可以放在正则表达式的任何地方，然后从放置点开始作用。[ ORO 中有个 bug 使它们不能放在正则表达式的最后。不过，对其他没有影响。]&lt;/p&gt;
&lt;p&gt;单行 &lt;code&gt;(?s)&lt;/code&gt; 和多行 &lt;code&gt;(?m)&lt;/code&gt; 修饰符通常放置在正则表达式的开头。&lt;/p&gt;
&lt;p&gt;忽略大小写修饰符 &lt;code&gt;(?i)&lt;/code&gt; 可以适用于正则表达式的一部分，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Match ExAct case or (?i)ArBiTrARY(?-i) case
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将匹配 &lt;code&gt;Match ExAct case or arbitrary case&lt;/code&gt; 以及 &lt;code&gt;Match ExAct case or ARBitrary case&lt;/code&gt;，但不匹配 &lt;code&gt;Match exact case or ArBiTrARY case&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;21.6 测试正则表达式&lt;/h2&gt;
&lt;p&gt;从 JMeter 2.4 开始，监听器（Listener）&lt;a href="http://jmeter.apache.org/usermanual/component_reference.html#View_Results_Tree"&gt;查看结果树&lt;/a&gt;（View Results Tree）包含一个正则表达式测试器，用于直接在采样器（Sampler）响应数据上测试正则表达式。&lt;/p&gt;
&lt;p&gt;还有一个&lt;a href="http://www.regexplanet.com/advanced/java/index.html"&gt;网站&lt;/a&gt;可以测试 Java 正则表达式。&lt;/p&gt;
&lt;p&gt;另一种方法是使用简单的测试计划来测试正则表达式。Java 请求（Java Request ）采样器可用于生成示例，或 HTTP （HTTP Request）采样器可用于加载文件。添加 Debug Sampler 和树视图监听器，可以无需访问任何外部服务器，快速测试出正则表达式的更改。&lt;/p&gt;</content><category term="JMeter"></category><category term="Documentation"></category><category term="Translation"></category></entry><entry><title>JMeter后置处理器之常用提取器介绍</title><link href="https://jlhxxxx.github.io/jmeter-extractor.html" rel="alternate"></link><published>2019-05-05T00:00:00+08:00</published><updated>2019-05-05T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2019-05-05:/jmeter-extractor.html</id><summary type="html">&lt;h2&gt;正则表达式提取器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variable&lt;/strong&gt;：用于存储结果的变量名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular Expression&lt;/strong&gt;：正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;：模板，用于从找到的匹配项创建字符串的模板。&lt;code&gt;$1$&lt;/code&gt;表示组&lt;strong&gt;1&lt;/strong&gt;，&lt;code&gt;$2$&lt;/code&gt;表示组&lt;strong&gt;2&lt;/strong&gt;，&lt;code&gt;$0$&lt;/code&gt;表示整个表达式匹配的内容，模板创建的字符串即为上面&lt;strong&gt;变量名称&lt;/strong&gt;对应的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。&lt;code&gt;0&lt;/code&gt;为随机，正数&lt;code&gt;n&lt;/code&gt;表示第n个匹配项，&lt;code&gt;-1&lt;/code&gt;表示匹配所有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Value&lt;/strong&gt;：默认值，可为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.bejson.com/knownjson/webInterface/"&gt;JSON API免费接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以JSON响应的查询快递信息为例，返回值如下（已美化且掐头去尾）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;nu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11111111111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ischeck&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;condition …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;正则表达式提取器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variable&lt;/strong&gt;：用于存储结果的变量名称&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular Expression&lt;/strong&gt;：正则表达式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template&lt;/strong&gt;：模板，用于从找到的匹配项创建字符串的模板。&lt;code&gt;$1$&lt;/code&gt;表示组&lt;strong&gt;1&lt;/strong&gt;，&lt;code&gt;$2$&lt;/code&gt;表示组&lt;strong&gt;2&lt;/strong&gt;，&lt;code&gt;$0$&lt;/code&gt;表示整个表达式匹配的内容，模板创建的字符串即为上面&lt;strong&gt;变量名称&lt;/strong&gt;对应的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。&lt;code&gt;0&lt;/code&gt;为随机，正数&lt;code&gt;n&lt;/code&gt;表示第n个匹配项，&lt;code&gt;-1&lt;/code&gt;表示匹配所有。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Value&lt;/strong&gt;：默认值，可为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.bejson.com/knownjson/webInterface/"&gt;JSON API免费接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以JSON响应的查询快递信息为例，返回值如下（已美化且掐头去尾）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;nu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;11111111111&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ischeck&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;condition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;F00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yuantong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-19 02:36:56&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;ftime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-19 02:36:56&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;长沙市&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-18 19:32:26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;ftime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2019-04-18 19:32:26&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;武汉市&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设我们要提取&lt;code&gt;time&lt;/code&gt;和&lt;code&gt;context&lt;/code&gt;。提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variable: data
Regular Expression: &amp;quot;time&amp;quot;:&amp;quot;(.*?)&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;(.*?)&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;(.*?)&amp;quot;
Template: $0$
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用Debug Sampler，获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data=
data_1=&amp;quot;time&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;
data_1_g=3
data_1_g0=&amp;quot;time&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-19 02:36:56&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[长沙市]到长沙市【长沙转运中心】&amp;quot;
data_1_g1=2019-04-19 02:36:56
data_1_g2=2019-04-19 02:36:56
data_1_g3=[长沙市]到长沙市【长沙转运中心】
data_2=&amp;quot;time&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;
data_2_g=3
data_2_g0=&amp;quot;time&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;ftime&amp;quot;:&amp;quot;2019-04-18 19:32:26&amp;quot;,&amp;quot;context&amp;quot;:&amp;quot;[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】&amp;quot;
data_2_g1=2019-04-18 19:32:26
data_2_g2=2019-04-18 19:32:26
data_2_g3=[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
data_matchNr=2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Match No.值为&lt;code&gt;-1&lt;/code&gt;，提取全部的2个匹配项，变量名称规则&lt;code&gt;refName_Ñ_g&lt;/code&gt;，&lt;code&gt;refName&lt;/code&gt;取默认值；若为&lt;code&gt;0&lt;/code&gt;或&lt;code&gt;正数&lt;/code&gt;，只提取一个匹配项，变量名称规则&lt;code&gt;refName_g&lt;/code&gt;，&lt;code&gt;refName&lt;/code&gt;取模板创建值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template填入&lt;code&gt;$0$&lt;/code&gt;，&lt;code&gt;refName_Ñ&lt;/code&gt;对应的值为匹配到的整个匹配项；若填入&lt;code&gt;$1$$1$&lt;/code&gt;，则&lt;code&gt;refName_Ñ&lt;/code&gt;对应的值为&lt;code&gt;refName_Ñ_g1&lt;/code&gt;和&lt;code&gt;refName_Ñ_g3&lt;/code&gt;的拼接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON提取器&lt;/h2&gt;
&lt;p&gt;可以使用JSON-PATH语法从&lt;strong&gt;JSON响应&lt;/strong&gt;中提取数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name of created variables&lt;/strong&gt;：变量名称。注意这里是复数形式，可以填写多个变量名称，名称与名称之间用&lt;code&gt;;&lt;/code&gt;分隔。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Json Path expressions&lt;/strong&gt;：JSON路径表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match No.&lt;/strong&gt;：指示要使用的匹配项。用法与正则表达式提取器中一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Values&lt;/strong&gt;：默认值。注意如果提取多个变量一定要填默认值，且不能为空（可以是空格）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compute concatenation var&lt;/strong&gt;：计算连接变量。如果找到很多结果，插件将使用&lt;code&gt;,&lt;/code&gt;将它们连接起来并将其存储在名为&lt;code&gt;&amp;lt;variable name&amp;gt;_ALL&lt;/code&gt;的变量中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子参考正则表达式提取器的例子，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Name&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;created&lt;/span&gt; &lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;context&lt;/span&gt;
&lt;span class="nt"&gt;Json&lt;/span&gt; &lt;span class="nt"&gt;Path&lt;/span&gt; &lt;span class="nt"&gt;expressions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="o"&gt;;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;context&lt;/span&gt;
&lt;span class="nt"&gt;Match&lt;/span&gt; &lt;span class="nt"&gt;No&lt;/span&gt;&lt;span class="o"&gt;.:&lt;/span&gt; &lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt;
&lt;span class="nt"&gt;Compute&lt;/span&gt; &lt;span class="nt"&gt;concatenation&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="err"&gt;：✔&lt;/span&gt;
&lt;span class="nt"&gt;Default&lt;/span&gt; &lt;span class="nt"&gt;Values&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;context_1=[长沙市]到长沙市【长沙转运中心】
context_2=[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
context_ALL=[长沙市]到长沙市【长沙转运中心】,[武汉市]武汉市【武汉转运中心】，正发往【长沙转运中心】
context_matchNr=2
time_1=2019-04-19 02:36:56
time_2=2019-04-18 19:32:26
time_ALL=2019-04-19 02:36:56,2019-04-18 19:32:26
time_matchNr=2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表达式、默认值一定要和变量数量匹配&lt;/li&gt;
&lt;li&gt;表达式路径中数组编号用&lt;code&gt;*&lt;/code&gt;表示模糊匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CSS/JQuery提取器&lt;/h2&gt;
&lt;p&gt;可以使用CSS Selector语法从服务器HTML响应中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS/JQuery expression&lt;/strong&gt;：CSS/JQuery表达式。语法参考：&lt;a href="https://jsoup.org/cookbook/extracting-data/selector-syntax"&gt;JSoup&lt;/a&gt;、&lt;a href="https://jodd.org/csselly/"&gt;Jodd-Lagarto（CSSelly）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribute&lt;/strong&gt;：从与选择器匹配的节点中提取的属性名称。如果为空，则返回此元素及其所有子元素的组合文本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里以Redmine登录页面为例，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variables: input
CSS/JQuery expression: #login-form &amp;gt; form &amp;gt; table &amp;gt; tbody &amp;gt; tr &amp;gt; td &amp;gt; input
Attribute: name
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;input=
input_1=username
input_2=password
input_3=login
input_matchNr=3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;似乎有点bug，只能获取几个常见属性，像下面的&lt;code&gt;type&lt;/code&gt;，&lt;code&gt;name&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt;，&lt;code&gt;tabindex&lt;/code&gt;，但&lt;code&gt;autocomplete&lt;/code&gt;不行，但使用应该足够了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; id=&amp;quot;username&amp;quot; tabindex=&amp;quot;1&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取CSS表达式有个简单的方法，Chrome浏览器直接能Copy Selector。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;XPATH 提取器&lt;/h2&gt;
&lt;p&gt;可以使用XPath查询语言从结构化响应（XML或（X）HTML）中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use Tidy&lt;/strong&gt;：宽容解析器。&lt;strong&gt;解析HTML响应一定要勾选&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Namespaces&lt;/strong&gt;：使用命名空间。这个放到XPATH2提取器里重点介绍，这里忽略就好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Return entire XPath fragment instead of text content?&lt;/strong&gt;：返回整个XPath片段而不只是文本内容，例如&lt;code&gt;//title&lt;/code&gt;将返回&lt;code&gt;&amp;lt;title&amp;gt;Apache JMeter&amp;lt;/title&amp;gt;&lt;/code&gt;而不是&lt;code&gt;Apache JMeter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XPath query&lt;/strong&gt;：XPath表达式。语法参考：&lt;a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp"&gt;XPath&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;练习网址：&lt;a href="http://www.webxml.com.cn/WebServices/WeatherWebService.asmx"&gt;WeatherWebService&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里以查询支持的城市为例，返回值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ArrayOfString&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://WebXml.com.cn/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;北京 (54511)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;上海 (58367)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;天津 (54517)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;重庆 (57516)&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ArrayOfString&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;XML Parsing Options: 不勾选
Name of created variables: city
XPath query: //string
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;city=北京 (54511)
city_1=北京 (54511)
city_2=上海 (58367)
city_3=天津 (54517)
city_4=重庆 (57516)
city_matchNr=4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾选&lt;strong&gt;Return entire XPath fragment instead of text content?&lt;/strong&gt;后，变量值是包含命名空间内容的： &lt;code&gt;city=&amp;lt;string xmlns="http://WebXml.com.cn/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;北京 (54511)&amp;lt;/string&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chrome浏览器同样可以直接Copy XPath。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;XPATH2 提取器&lt;/h2&gt;
&lt;p&gt;虽然JMeter官方文档说可以使用XPath2查询语言从结构化响应（XML或（X）HTML）中提取值，但目前测试&lt;strong&gt;只支持从XML响应中提取值&lt;/strong&gt;；从HTML中提取会报错，这个可以通过查看结果树中选择XPath2 Tester来验证。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Namespaces aliases list&lt;/strong&gt;：命名空间别名列表。就是这个功能，能让使用命名空间比使用旧的XPath提取器更方便。关于命名空间含义，可以看官方文档：&lt;a href="http://www.w3school.com.cn/xml/xml_namespaces.asp"&gt;XML 命名空间&lt;/a&gt;，但是写的不够详细，详细的参考这里：&lt;a href="https://blog.csdn.net/yi412/article/details/70158876"&gt;XML 命名空间（XML Namespaces）介绍以及节点读取方法&lt;/a&gt;。由于XPath2对于表达式的要求比较严格，对于带命名空间的XML（包括默认的命名空间），使用不带命名空间前缀的表达式是查询不到结果的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看具体实例，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;
&lt;span class="n"&gt;XPath&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;cityNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;Match&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="p"&gt;.:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;aliases&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cityNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;WebXml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;city=北京 (54511)
city_1=北京 (54511)
city_2=上海 (58367)
city_3=天津 (54517)
city_4=重庆 (57516)
city_matchNr=4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然返回值包含了3个命名空间的信息，但是我们提取的值只在默认命名空间里，所以&lt;strong&gt;Namespaces aliases list&lt;/strong&gt;只填入默认命名空间即可；别名可以任意命名，注意调用一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;边界值提取器&lt;/h2&gt;
&lt;p&gt;可以使用左右边界从服务器响应中提取值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Left Boundary&lt;/strong&gt;：左边界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right Boundary&lt;/strong&gt;：右边界。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用上面的例子，提取器填写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name of created variables: url
Left Boundary: =&amp;quot;
Right Boundary: &amp;quot;
Match No.: -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获得变量名称和对应值如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;url=
url_1=1.0
url_2=utf-8
url_3=http://www.w3.org/2001/XMLSchema-instance
url_4=http://www.w3.org/2001/XMLSchema
url_5=http://WebXml.com.cn/
url_matchNr=5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似简化版的正则表达式提取器，默认greedy模式。但是左右边界不支持正则表达式，感觉局限性挺大，比如说上面的例子中我只要提取3个url，就很麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当然牛逼的大佬根本不用这些花哨的提取器，一个BeanShell就够了，参考文章：&lt;a href="https://www.cnblogs.com/nzg-noway/p/7490412.html"&gt;jmeter ---json几种读取方式，ArrayList循环读取&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="JMeter"></category><category term="Extractor"></category></entry><entry><title>Python pytesseract识别验证码</title><link href="https://jlhxxxx.github.io/pytesseract.html" rel="alternate"></link><published>2018-08-22T00:00:00+08:00</published><updated>2018-08-22T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-08-22:/pytesseract.html</id><summary type="html">&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装库&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Pillow
$ pip install pytesseract
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;安装&lt;a href="https://github.com/tesseract-ocr/tesseract/wiki"&gt;tesseract-ocr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows下直接下载安装包，安装后添加到环境变量Path。&lt;/p&gt;
&lt;p&gt;CentOS6下（前提是各种常用源都已安装，参考&lt;a href="https://blog.csdn.net/u010048823/article/details/51298183"&gt;centos7下添加常用YUM源(EPEL/Remi/RPMforge/php/Nginx)&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install tesseract
$ yum install tesseract-langpack-deu
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;验证码识别&lt;/h2&gt;
&lt;p&gt;核心只有一个函数&lt;code&gt;pytesseract.image_to_string&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;简单的验证码识别&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pytesseract-code1.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/pytesseract-code1.jpg?raw=true"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pytesseract-code2.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/pytesseract-code2.jpg?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;图片不需要任何处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytesseract&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vcode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pytesseract&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eng …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装库&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install Pillow
$ pip install pytesseract
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;安装&lt;a href="https://github.com/tesseract-ocr/tesseract/wiki"&gt;tesseract-ocr&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows下直接下载安装包，安装后添加到环境变量Path。&lt;/p&gt;
&lt;p&gt;CentOS6下（前提是各种常用源都已安装，参考&lt;a href="https://blog.csdn.net/u010048823/article/details/51298183"&gt;centos7下添加常用YUM源(EPEL/Remi/RPMforge/php/Nginx)&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install tesseract
$ yum install tesseract-langpack-deu
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;验证码识别&lt;/h2&gt;
&lt;p&gt;核心只有一个函数&lt;code&gt;pytesseract.image_to_string&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;简单的验证码识别&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pytesseract-code1.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/pytesseract-code1.jpg?raw=true"&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt="pytesseract-code2.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/pytesseract-code2.jpg?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;图片不需要任何处理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytesseract&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vcode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pytesseract&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;需要降噪的验证码识别&lt;/h3&gt;
&lt;p&gt;&lt;img alt="pytesseract-code3.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/pytesseract-code3.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;这类验证码直接识别正确率太低。仔细观察图片，发现验证码有效内容均为黑色，所以考虑将非黑色都转成白色，代码稍微修改即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytesseract&lt;/span&gt;

&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 黑色rgb为（0，0，0）&lt;/span&gt;
            &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putpixel&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;vcode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pytesseract&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;延申阅读&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/beer/p/5672678.html"&gt;字符型图片验证码识别完整过程及Python实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/qqandfqr/p/7866650.html"&gt;Python验证码识别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pytesseract"></category></entry><entry><title>使用Nginx+uWSGI+Flask部署应用</title><link href="https://jlhxxxx.github.io/nginx-uwsgi.html" rel="alternate"></link><published>2018-08-21T00:00:00+08:00</published><updated>2018-08-21T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-08-21:/nginx-uwsgi.html</id><summary type="html">&lt;h2&gt;原理&lt;/h2&gt;
&lt;h3&gt;WIGS(Web Server Gateway Interface)服务器网关接口&lt;/h3&gt;
&lt;p&gt;是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受, 它已基本达成它的可移植性方面的目标。 
WSGI 没有官方的实现，因为WSGI更像一个协议。只要遵照这些协议，WSGI应用(Application)都可以在任何服务器(Server)上运行，反之亦然。 
WSGI标准在 PEP 333 中定义并被许多框架实现，其中包括现广泛使用的django框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以说WIGS是一种标准&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;uWIGS&lt;/h3&gt;
&lt;p&gt;可以看作是一个应用程序，帮助我们实现WSGI协议，Http协议，这样我们可以不再关注网络通信的底层实现，将精力更多放在处理HTTP请求数据，返回HTML。利用uWIGS可以使我们的web应用得到更强的并发能力，uWIGS也可以返回静态文件(css，js，img…)，但是很笨拙，一般静态文件都交由Nginx进行传输，所以配置中一般不配置static-map，如果直接由uWIGS接受HTTP请求则需要设置http:xxxx，如果只需要与反向代理服务器进行交互则只需要接受socket，uWIGS与Nginx交互相当于两个进程间交互，一般使用的是.sock文件或者指定端口接受socket。指定端口时再使用浏览器访问相应端口，uWIGS会提示skip，跳过该HTTP请求 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;原理&lt;/h2&gt;
&lt;h3&gt;WIGS(Web Server Gateway Interface)服务器网关接口&lt;/h3&gt;
&lt;p&gt;是Python应用程序或框架和Web服务器之间的一种接口，已经被广泛接受, 它已基本达成它的可移植性方面的目标。 
WSGI 没有官方的实现，因为WSGI更像一个协议。只要遵照这些协议，WSGI应用(Application)都可以在任何服务器(Server)上运行，反之亦然。 
WSGI标准在 PEP 333 中定义并被许多框架实现，其中包括现广泛使用的django框架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以说WIGS是一种标准&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;uWIGS&lt;/h3&gt;
&lt;p&gt;可以看作是一个应用程序，帮助我们实现WSGI协议，Http协议，这样我们可以不再关注网络通信的底层实现，将精力更多放在处理HTTP请求数据，返回HTML。利用uWIGS可以使我们的web应用得到更强的并发能力，uWIGS也可以返回静态文件(css，js，img…)，但是很笨拙，一般静态文件都交由Nginx进行传输，所以配置中一般不配置static-map，如果直接由uWIGS接受HTTP请求则需要设置http:xxxx，如果只需要与反向代理服务器进行交互则只需要接受socket，uWIGS与Nginx交互相当于两个进程间交互，一般使用的是.sock文件或者指定端口接受socket。指定端口时再使用浏览器访问相应端口，uWIGS会提示skip，跳过该HTTP请求。&lt;/p&gt;
&lt;h3&gt;代理服务器(Proxy Server)&lt;/h3&gt;
&lt;p&gt;是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。 &lt;/p&gt;
&lt;h3&gt;反向代理服务器(Reverse Proxy)&lt;/h3&gt;
&lt;p&gt;反向代理，故名思意就是将代理服务器做出逆转，它主要的功能是代理服务器接收客户端发来的Http请求，转发到内部网络服务器，并返回Response给客户端。 
反向代理的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证内网安全，可以使用反向代理服务器提供的WAF功能，阻止web攻击。&lt;/li&gt;
&lt;li&gt;负载均衡，通过反向代理服务器来优化网站的负载&lt;/li&gt;
&lt;li&gt;缓存静态资源，加快访问速度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Nginx(engine x)&lt;/h3&gt;
&lt;p&gt;Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强。&lt;/p&gt;
&lt;p&gt;它具有反向代理服务器的所有特点，并且配置简单，支持对大于1kb的文件进行压缩，静态文件缓存，可以大大提高访问效率。Nginx接受来自客户端的Http请求发送给uWSGI，uWSGI处理请求并将关键信息传递给web应用(django，flask等)，应用返回Response经由uWSGI发送给Nginx，Nginx再发送给客户端。 &lt;/p&gt;
&lt;h2&gt;实践&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本文实践部分基于CentOS6和Python3&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;安装uWSGI&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果无法安装有报错，请先尝试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yum install python34-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行服务时如果报错&lt;code&gt;!!! no internal routing support, rebuild with pcre support !!!&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 先卸载
$ pip uninstall uwsgi
# 安装pcre支持库
$ yum install pcre pcre-devel pcre-static
# 重新安装uwsgi，不走pip缓存
$ pip install uwsgi -I --no-cache-dir
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试代码”server.py” ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;# python2可不用byte，python3必须要&lt;/span&gt;

    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)))]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行命令，&lt;code&gt;--http&lt;/code&gt;参数指定了HTTP监听地址和端口，&lt;code&gt;- -wsgi-file&lt;/code&gt;参数指定了WSGI应用程序入口，uWSGI会自动搜寻名为&lt;code&gt;application&lt;/code&gt;的应用对象并调用它 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uwsgi&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9090&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开浏览器，访问”http://localhost:9090″，你就可以看到”Hello World!”。&lt;/p&gt;
&lt;p&gt;uWSGI可以支持多进程和多线程的方式启动应用，也可以监控应用的运行状态。我们将启动的命令改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uwsgi --http :9090 --wsgi-file server.py --master --processes &lt;span class="m"&gt;4&lt;/span&gt; --threads &lt;span class="m"&gt;2&lt;/span&gt; --stats &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:9191
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行它后，uWSGI将启动4个应用进程，每个进程有2个线程，和一个master主进程（监控其他进程状态，如果有进程死了，则重启）。可以把这些都写进一个配置文件”myapp.ini”：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;:9090&lt;/span&gt;
&lt;span class="na"&gt;wsgi-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;server.py&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="na"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1:9191&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后就可以将启动命令简化为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uwsgi myapp.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装及配置Nginx&lt;/h3&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;yum&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps -ef&lt;span class="p"&gt;|&lt;/span&gt;grep nginx
root     &lt;span class="m"&gt;16964&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:23 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们要修改的是&lt;code&gt;location&lt;/code&gt;选项，打开&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;，没有找到&lt;code&gt;location&lt;/code&gt;，但是有一行&lt;code&gt;include /etc/nginx/conf.d/*.conf&lt;/code&gt;，转到“include /etc/nginx/conf.d/”下，打开“default.conf”，找到&lt;code&gt;location&lt;/code&gt;，修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:3031&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段配置表明Nginx会将收到的所有请求都转发到”127.0.0.1:3031″端口上 。&lt;/p&gt;
&lt;p&gt;然后将uWSGI的HTTP端口监听改为socket端口监听，即将配置文件中的&lt;code&gt;http&lt;/code&gt;项去掉，改为&lt;code&gt;socket&lt;/code&gt;项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1:3031&lt;/span&gt;
&lt;span class="na"&gt;wsgi-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;server.py&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="na"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;127.0.0.1:9191&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启Nginx，并启动uWSGI服务器： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service nginx restart
$ uwsgi myapp.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;访问”http://localhost”（Nginx默认使用&lt;code&gt;80&lt;/code&gt;端口，可以在“default.conf”修改），顺利的话我们会再次看到”Hello World!”。 &lt;/p&gt;
&lt;p&gt;不顺利的话，继续往下看。如果打开网站什么都看不到，不要急，从“nginx.conf”找到日志文件目录“/var/log/nginx/”，打开“error.log”，先找到报错信息“connect() to 127.0.0.1:3031 failed (13: Permission denied) while connecting to upstream”，百度解决问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:3031&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启Nginx，并启动uWSGI服务器，终于可以看到”Hello World!”。&lt;/p&gt;
&lt;h3&gt;运行Flask应用&lt;/h3&gt;
&lt;p&gt;其实很简单，只要将上例中"server.py"的内容改为Flask应用即可，当然你需要先把Flask包安装好。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@application.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很多人习惯将Flask应用对象取名为”app”，但是WSGI标准是”application”。uWSGI提供了一个功能，可以指定应用对象，方法就是在配置文件中加上”callable”项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在，我们的Flask应用就可以使用”app”作为对象名了 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:3031&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用Python虚拟环境&lt;/h3&gt;
&lt;p&gt;虚拟环境的安装见文末参考文章。采用虚拟环境来避免应用间冲突，uWSGI可以非常容易做到这点，就是在配置文件中加上”virtualenv”项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;virtualenv＝/home/bjhee/virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个Nginx中，可以同时运行多个应用，不一定是Python的应用。我们期望通过不同的路径来路由不同的应用，因此就不能像上例那样直接修改根目录的配置。假设我们希望通过”http://localhost/myapp”来访问我们的应用，首先要在Nginx的配置文件中，加入下面的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;myapp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_param&lt;/span&gt; &lt;span class="err"&gt;SCRIPT_NAME&lt;/span&gt; &lt;span class="err"&gt;/myapp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:3031&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们定义了一个uWSGI参数&lt;code&gt;SCRIPT_NAME&lt;/code&gt;，值为应用的路径&lt;code&gt;/myapp&lt;/code&gt;。接下来，在uWSGI的启动配置中，去掉&lt;code&gt;wsgi-file&lt;/code&gt;项，并加上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;mount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/myapp=server.py&lt;/span&gt;
&lt;span class="na"&gt;manage-script-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;mount&lt;/code&gt;参数表示将&lt;code&gt;/myapp&lt;/code&gt;地址路由到”server.py”中，&lt;code&gt;manage-script-name&lt;/code&gt;参数表示启用之前在Nginx里配置的”SCRIPT_NAME”参数。再次重启Nginx和uWSGI，你就可以通过”http://localhost/myapp”来访问应用了。&lt;/p&gt;
&lt;h3&gt;端口优化&lt;/h3&gt;
&lt;p&gt;上面例子中，我们是通过”127.0.0.1:3031″Socket端口来连接Nginx和uWSGI的，其实我们也可以采用socket文件的方式，这样可以不用写死端口。在uWSGI的启动配置中，我们要修改”socket”项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/tmp/uwsgi.sock&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动uWSGI服务器后，它会自动创建一个”/tmp/uwsgi.sock”文件。然后让我们修改Nginx配置文件，将”uwsgi_pass”配置项改为文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;myapp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_param&lt;/span&gt; &lt;span class="err"&gt;SCRIPT_NAME&lt;/span&gt; &lt;span class="err"&gt;/myapp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;uwsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启Nginx服务器即可。这里要注意Nginx的用户必须要有“uwsgi.sock”文件的读写的权限。&lt;/p&gt;
&lt;h3&gt;参考文章：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本文原理部分来自：&lt;a href="https://blog.csdn.net/shu_8708/article/details/79068581"&gt;浅谈uWSGI和Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实践部分来自：&lt;a href="http://www.bjhee.com/nginx-uwsgi.html"&gt;思诚之道——使用Nginx和uWSGI来运行Python应用&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;其他参考&lt;ul&gt;
&lt;li&gt;&lt;a href="https://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/index.html"&gt;uWSGI中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jb51.net/article/137856.htm"&gt;django启动uwsgi报错的解决方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/already/p/4680259.html"&gt;解决nginx下connect() to 127.0.0.1:3000 failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: 错误信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/asmer-stone/p/5470144.html"&gt;virtualenvwrapper 的安装和使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Nginx"></category><category term="uWSGI"></category><category term="Flask"></category></entry><entry><title>Oracle报错排查：ORA-00020:maximum number of processes (500) exceeded</title><link href="https://jlhxxxx.github.io/oracle-00020.html" rel="alternate"></link><published>2018-06-20T00:00:00+08:00</published><updated>2018-06-20T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-06-20:/oracle-00020.html</id><summary type="html">&lt;p&gt;看到这个报错的时候，已经连不上数据库了。所以思路是：先结束掉部分进程，再增大连接数。&lt;/p&gt;
&lt;p&gt;先查找进程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@oramod ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ps -ef|grep oracle&lt;/span&gt;
oracle    &lt;span class="m"&gt;4801&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; Apr28 ?        &lt;span class="m"&gt;00&lt;/span&gt;:02:24 tnslsnr LISTENER -inherit
oracle   &lt;span class="m"&gt;16284&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:41 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:06 ora_pmon_orcl
......
oracle   &lt;span class="m"&gt;22021&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
oracle   &lt;span class="m"&gt;22025&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;看到这个报错的时候，已经连不上数据库了。所以思路是：先结束掉部分进程，再增大连接数。&lt;/p&gt;
&lt;p&gt;先查找进程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@oramod ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ps -ef|grep oracle&lt;/span&gt;
oracle    &lt;span class="m"&gt;4801&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; Apr28 ?        &lt;span class="m"&gt;00&lt;/span&gt;:02:24 tnslsnr LISTENER -inherit
oracle   &lt;span class="m"&gt;16284&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:41 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:06 ora_pmon_orcl
......
oracle   &lt;span class="m"&gt;22021&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
oracle   &lt;span class="m"&gt;22025&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
oracle   &lt;span class="m"&gt;22029&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:02:53 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现非本地连接都带有&lt;code&gt;LOCAL=NO&lt;/code&gt;，这样就简单了，验证一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@oramod ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ps -ef|grep LOCAL=NO|grep -v grep&lt;/span&gt;
oracle   &lt;span class="m"&gt;22021&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
oracle   &lt;span class="m"&gt;22025&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:07 ?        &lt;span class="m"&gt;00&lt;/span&gt;:00:00 oracleorcl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;LOCAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NO&lt;span class="o"&gt;)&lt;/span&gt;
......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;确实都是Oracle的进程，结束掉几个就好了，只要让能连上数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 两种写法都可以，结束掉前10个进程&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@oramod ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ps -ef|grep LOCAL=NO|grep -v grep|awk &amp;#39;{print $2}&amp;#39;|head|xargs kill -9&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;root@oramod ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# ps -ef|grep LOCAL=NO|grep -v grep|cut -c 9-15|head|xargs kill -9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sqlplus&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nolog&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sysdba&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改连接数，重启Oracle：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;system&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="k"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;spfile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SHUTDOWN&lt;/span&gt; &lt;span class="k"&gt;IMMEDIATE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;STARTUP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;验证一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;show&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;NAME&lt;/span&gt;                     &lt;span class="k"&gt;TYPE&lt;/span&gt;    &lt;span class="n"&gt;VALUE&lt;/span&gt;
&lt;span class="c1"&gt;------------------------------------ ----------- ------------------------------&lt;/span&gt;
&lt;span class="n"&gt;aq_tm_processes&lt;/span&gt;              &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;db_writer_processes&lt;/span&gt;          &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;gcs_server_processes&lt;/span&gt;             &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;global_txn_processes&lt;/span&gt;             &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;job_queue_processes&lt;/span&gt;          &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="n"&gt;log_archive_max_processes&lt;/span&gt;        &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;processes&lt;/span&gt;                &lt;span class="nb"&gt;integer&lt;/span&gt;     &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;连接数已修改。但是没过一会连接又满了：&lt;code&gt;ORA-00020:maximum number of processes (1000) exceeded&lt;/code&gt;，这时候就要排查问题了。&lt;/p&gt;
&lt;p&gt;再次连上数据库，观察会话使用情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;v$session&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;......&lt;/span&gt;
&lt;span class="n"&gt;EVENT&lt;/span&gt;                                   &lt;span class="n"&gt;PROGRAM&lt;/span&gt;                             &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;------------------------------------------------------------------------------ ----------&lt;/span&gt;
&lt;span class="n"&gt;rdbms&lt;/span&gt; &lt;span class="n"&gt;ipc&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;                       &lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;oramod&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GEN0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;             &lt;span class="n"&gt;plsqldev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;                              &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;             &lt;span class="n"&gt;JDBC&lt;/span&gt; &lt;span class="n"&gt;Thin&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;                          &lt;span class="mi"&gt;78&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到JDBC连接数过多。&lt;/p&gt;
&lt;p&gt;下面排查下是哪个项目的问题，首先查看每个oracle帐户的连接总数 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;v$session&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;USERNAME&lt;/span&gt;               &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;USERNAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;------------------------------ ---------------&lt;/span&gt;
&lt;span class="n"&gt;TEST_ROGCHEN&lt;/span&gt;                    &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;DEPT_USERCENTER&lt;/span&gt;                 &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;MMSW&lt;/span&gt;                        &lt;span class="mi"&gt;68&lt;/span&gt;
&lt;span class="n"&gt;BYS&lt;/span&gt;                      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;RSBGGFWWTADMIN&lt;/span&gt;                   &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;NW_SYBX&lt;/span&gt;                     &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="n"&gt;APP_LZF&lt;/span&gt;                      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;FZDKRH&lt;/span&gt;                       &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;SYS&lt;/span&gt;                      &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;FZGGFWWT&lt;/span&gt;                     &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到连接最多的是MMSW账户。&lt;/p&gt;
&lt;p&gt;查看所有链接Oracle的客户端的IP等信息： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由于缺省从 v$session 中不能直接获得客户端 IP，可以在数据库中创建一个追踪客户端IP地址的触发器： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;replace&lt;/span&gt; &lt;span class="k"&gt;trigger&lt;/span&gt; &lt;span class="n"&gt;on_logon_trigger&lt;/span&gt; &lt;span class="k"&gt;after&lt;/span&gt; &lt;span class="n"&gt;logon&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;      &lt;span class="n"&gt;dbms_application_info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_client_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;userenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ip_address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示客户端信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;sid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;client_info&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;v$session&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;......&lt;/span&gt;
    &lt;span class="n"&gt;SID&lt;/span&gt;    &lt;span class="nb"&gt;SERIAL&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;USERNAME&lt;/span&gt;    &lt;span class="n"&gt;PROGRAM&lt;/span&gt;             &lt;span class="n"&gt;MACHINE&lt;/span&gt;   &lt;span class="n"&gt;CLIENT_INFO&lt;/span&gt;
&lt;span class="c1"&gt;----------------------------------------------------------------------------------------&lt;/span&gt;
    &lt;span class="mi"&gt;12&lt;/span&gt;    &lt;span class="mi"&gt;505&lt;/span&gt; &lt;span class="n"&gt;TEST_ROGCHEN&lt;/span&gt;    &lt;span class="n"&gt;JDBC&lt;/span&gt; &lt;span class="n"&gt;Thin&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;     &lt;span class="n"&gt;rhel7&lt;/span&gt;     &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;
&lt;span class="p"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到链接最多的来自192.168.44.81这台主机。&lt;/p&gt;
&lt;p&gt;所以初步判断为192.168.44.81主机上使用MMSW账户的项目有问题。然后就没有然后了。&lt;/p&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.itpub.net/12798004/viewspace-1742938/"&gt;ORA-00020:maximum number of processes (500) exceeded 错误解决方法&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/keaihuilang/article/details/54910573"&gt;ORA-00020: maximum number of processes (1000) exceeded 故障一列&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/sunny05296/article/details/79171018"&gt;查看Oracle链接客户端的IP等信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Oracle"></category><category term="Troubleshooting"></category></entry><entry><title>Red Hat Enterprise更换CentOS Yum源</title><link href="https://jlhxxxx.github.io/rhe-change-yum.html" rel="alternate"></link><published>2018-05-28T00:00:00+08:00</published><updated>2018-05-28T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-05-28:/rhe-change-yum.html</id><summary type="html">&lt;h2&gt;确定Red Hat Enterprise和CentOS对应版本&lt;/h2&gt;
&lt;p&gt;查看当前系统版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/issue     &lt;span class="c1"&gt;# 查看系统版本&lt;/span&gt;
cat /proc/version  &lt;span class="c1"&gt;# 查看内核版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/CentOS"&gt;CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linuxidc.com/Linux/2016-07/133000.htm"&gt;CentOS和RedHat发行版与Linux内核版本的对应关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;备份和卸载本地yum源&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -qa&lt;span class="p"&gt;|&lt;/span&gt;grep yum　　                                          &lt;span class="c1"&gt;# 查看本地yum&lt;/span&gt;
mv /etc/yum.repos.d/your.repo  /etc/yum.repos.d/your.repo.bak   &lt;span class="c1"&gt;# your替换成本地repo名称&lt;/span&gt;
rpm -qa&lt;span class="p"&gt;|&lt;/span&gt;grep yum&lt;span class="p"&gt;|&lt;/span&gt;xargs rpm -e --nodeps　　                    &lt;span class="c1"&gt;# 不检查依赖性，卸载yum程序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;下载新的yum安装包&lt;/h2&gt;
&lt;p&gt;这里采用163的镜像，我们要下的是这几个包：&lt;code&gt;python-iniparse-xxx.noarch …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;确定Red Hat Enterprise和CentOS对应版本&lt;/h2&gt;
&lt;p&gt;查看当前系统版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/issue     &lt;span class="c1"&gt;# 查看系统版本&lt;/span&gt;
cat /proc/version  &lt;span class="c1"&gt;# 查看内核版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/zh-cn/CentOS"&gt;CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linuxidc.com/Linux/2016-07/133000.htm"&gt;CentOS和RedHat发行版与Linux内核版本的对应关系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;备份和卸载本地yum源&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -qa&lt;span class="p"&gt;|&lt;/span&gt;grep yum　　                                          &lt;span class="c1"&gt;# 查看本地yum&lt;/span&gt;
mv /etc/yum.repos.d/your.repo  /etc/yum.repos.d/your.repo.bak   &lt;span class="c1"&gt;# your替换成本地repo名称&lt;/span&gt;
rpm -qa&lt;span class="p"&gt;|&lt;/span&gt;grep yum&lt;span class="p"&gt;|&lt;/span&gt;xargs rpm -e --nodeps　　                    &lt;span class="c1"&gt;# 不检查依赖性，卸载yum程序&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;下载新的yum安装包&lt;/h2&gt;
&lt;p&gt;这里采用163的镜像，我们要下的是这几个包：&lt;code&gt;python-iniparse-xxx.noarch.rpm&lt;/code&gt;、&lt;code&gt;yum.xxx.centos.noarch.rpm&lt;/code&gt;、&lt;code&gt;yum-plugin-fastestmirror-xxx.noarch.rpm&lt;/code&gt;、&lt;code&gt;yum-metadata-parser-xxx.rpm&lt;/code&gt;（其中xxx为版本等相关信息）&lt;/p&gt;
&lt;p&gt;也可以用命令下载：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-81.el6.centos.noarch.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rpm -ivh python-iniparse-0.3.1-2.1.el6.noarch.rpm
rpm -ivh yum-3.2.29-81.el6.centos.noarch.rpm yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm yum-metadata-parser-1.1.2-16.el6.x86_64.rpm             &lt;span class="c1"&gt;# 3个一起，免得它们相互依赖&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;报错处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python-urlgrabber &amp;gt;= 3.9.1-10 is needed by yum-3.2.29-81.el6.centos.noarch&lt;/code&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 查看系统的python-urlgrabber版本&lt;/span&gt;
rpm -qa&lt;span class="p"&gt;|&lt;/span&gt;grep python-urlgrabber
&lt;span class="c1"&gt;# 卸载低版本&lt;/span&gt;
 rpm -e python-urlgrabber-3.9.1-9.el6.noarch
&lt;span class="c1"&gt;# 下载新版本后安装&lt;/span&gt;
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-urlgrabber-3.9.1-11.el6.noarch.rpm
rpm -ivh python-urlgrabber-3.9.1-11.el6.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;配置并使用CentOS yum源&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/yum.repos.d/　　&lt;span class="c1"&gt;#进入到yum配置文件目录&lt;/span&gt;
wget http://mirrors.163.com/.help/CentOS6-Base-163.repo　　&lt;span class="c1"&gt;#下载CentOS配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把文件里面的&lt;code&gt;$releasever&lt;/code&gt;全部替换为版本号，这里是&lt;code&gt;6&lt;/code&gt;，然后保存 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;清理并重建yum缓存：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum clean all
yum makecache
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/wutengbiao/p/4188986.html"&gt;RedHat6使用CentOS yum源 换yum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/wangzhjj/article/details/53980727"&gt;RHEL6解决无法使用YUM源问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mirrors.163.com/.help/centos.html"&gt;CentOS镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Linux"></category><category term="yum"></category></entry><entry><title>Windows下WebLogic安装及集群配置</title><link href="https://jlhxxxx.github.io/weblogic-cluster.html" rel="alternate"></link><published>2018-05-22T00:00:00+08:00</published><updated>2018-05-22T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-05-22:/weblogic-cluster.html</id><summary type="html">&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;p&gt;在正式部署项目之前，还是先了解下基本概念吧。最基本要掌握域（Domain）、集群（Cluster）、服务器（Server）（区分管理服务器和受管理服务器）、计算机（Machine）、节点管理器（Node Manager）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://langgufu.iteye.com/blog/1700388"&gt;weblogic 域，管理服务器，受管服务器，集群和机器的基本知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/cocowool/archive/2012/04/01/2428861.html"&gt;WebLogic中的一些基本概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用目录结构&lt;/h2&gt;
&lt;p&gt;了解WebLogic常用目录结构，将大大提高管理与维护的工作效率 。这里以WebLogic 11g为例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.                                      # 主目录
│─ coherence_3.7                        # coherence集群相关
│─ logs                                 # 日志文件，包括安装和运行%WL_HOME%\common\bin\下程序的日志
│─ modules                             # 模块和插件目录
│─ user_projects                         # 用户工程目录
│  └─ domains                            # 域主目录
│      └─ base_domain                     # DOMAIN_HOME，用户自建域主目录，默认名称为base_domain，以此为例
│         │─ bin …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;基本概念&lt;/h2&gt;
&lt;p&gt;在正式部署项目之前，还是先了解下基本概念吧。最基本要掌握域（Domain）、集群（Cluster）、服务器（Server）（区分管理服务器和受管理服务器）、计算机（Machine）、节点管理器（Node Manager）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://langgufu.iteye.com/blog/1700388"&gt;weblogic 域，管理服务器，受管服务器，集群和机器的基本知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/cocowool/archive/2012/04/01/2428861.html"&gt;WebLogic中的一些基本概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用目录结构&lt;/h2&gt;
&lt;p&gt;了解WebLogic常用目录结构，将大大提高管理与维护的工作效率 。这里以WebLogic 11g为例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.                                      # 主目录
│─ coherence_3.7                        # coherence集群相关
│─ logs                                 # 日志文件，包括安装和运行%WL_HOME%\common\bin\下程序的日志
│─ modules                             # 模块和插件目录
│─ user_projects                         # 用户工程目录
│  └─ domains                            # 域主目录
│      └─ base_domain                     # DOMAIN_HOME，用户自建域主目录，默认名称为base_domain，以此为例
│         │─ bin                          # 启动和停止域服务、设置域环境变量的相关命令文件
│         │  └─ nodemanager               # 可以设置成当前域节点管理器配置目录，默认不使用
│         │─ config                       # 配置文件
│         │─ security                     # 用户口令验证相关文件
│         └─ servers                      # 服务器相关文件
│            └─ AdminServer               # 管理服务器，以此为例
│               │─ logs                   # 日志文件
│               │─ security
│               │  └─ boot.properties     # 当前域登录信息文件，保存用户名和密码后可以免验证登录
│               │─ stage                  # 存放当前域所部署项目部署包文件
│               └─ tmp                    # 当前域所部署项目相关临时文件
└─ wlserver_10.3                          # WL_HOME，WebLogic应用主目录
   │─ common                              # 
   │  │─ bin                              # WebLogic应用程序可执行命令目录
   │  └─ nodemanager                      # 默认的节点管理器配置目录
   │─ server
   │  └─ bin                              # WebLogic服务器可执行命令目录
   │     └─ startNodeManager.cmd          # 默认的启动节点管理器服务
   └─ uninstall                           # 卸载相关命令文件目录
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;注：本文档所有&lt;code&gt;%WL_HOME%&lt;/code&gt;，均指上面的wlserver_10.3目录；&lt;code&gt;%DOMAIN_HOME%&lt;/code&gt;指自建域的主目录，例如上面的base_domain目录，对应域的环境变量可以查看&lt;code&gt;%DOMAIN_HOME%\bin\setDomainEnv.cmd&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;集群的安装及配置&lt;/h2&gt;
&lt;p&gt;安装WebLogic之前，先要安装Java环境。本人电脑上安装了几套Java环境，WebLogic用到的有两个&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-jrockit-2192437.html?ssSourceSiteId=otncn"&gt;JRockit 6 - R28.2.7&lt;/a&gt;和&lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html"&gt;Java7u80&lt;/a&gt;，JRockit是原BEA公司的产品，现已被Oracle收购，是传说中最快的JVM，理论上来说使用JRockit性能会有明显的提升。不过JRockit最高只有1.6版本的，而目前WebLogic12c最低支持Java8，所以要想使用JRockit要安装WebLogic11g以下的版本。而我们通常所说的Java环境指的都是Sun公司JDK（也被Oracle收购了^_^）即Oracle Java（为什么要说这些，因为手动配置Java环境的时候需要知道Sun和BEA区别）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;教程1&lt;/strong&gt;：&lt;a href="http://blog.itpub.net/28536251/viewspace-1718232/"&gt;Windows下Weblogic 11G集群安装与配置&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;教程2&lt;/strong&gt;：&lt;a href="https://blog.csdn.net/blvyoucan/article/details/78507100"&gt;Weblogic12c (12.2.1.3)集群环境搭建 两台物理机&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;安装WebLogic&lt;/h4&gt;
&lt;p&gt;教程1很详细了，如果已经安装了Java环境，可以跳过第2步，直接到&lt;strong&gt;3.1 安装Weblogic软件&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;创建WebLogic域及集群&lt;/h4&gt;
&lt;p&gt;创建域使用QuickStart即可，配置集群有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建域时配置集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要配置集群且&lt;strong&gt;使用代理&lt;/strong&gt;，请按&lt;strong&gt;教程1-3.3 创建Weblogic域及集群&lt;/strong&gt;步骤来（因为我找不到从控制台添加代理的方法）；如果要配置集群但&lt;strong&gt;不使用代理&lt;/strong&gt;，可以按3.3步骤在创建域时配置好集群，也可以只创建域然后到控制台配置集群。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制台配置集群&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;教程2-4.4. 配置集群服务器，&lt;/strong&gt;主要就是新增服务器（注意&lt;strong&gt;同一计算机上的服务器监听端口不能相同&lt;/strong&gt;）、计算机（&lt;strong&gt;不同计算机节点管理器端口可以相同&lt;/strong&gt;）、集群，这三个没有顺序要求，计算机中添加服务器，集群中添加服务器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认&lt;strong&gt;计算机&lt;/strong&gt;的&lt;strong&gt;节点管理器&lt;/strong&gt;类型为&lt;strong&gt;SSL&lt;/strong&gt;，如果修改成其他，通过节点管理器启动服务器的配置要相应修改，见下文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;受管理服务器域的配置&lt;/h4&gt;
&lt;p&gt;如果受管理服务器和管理服务器都在同一台计算机上，不需要此步骤。这里配置的是另一台计算机上的受管理服务器。也有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用QuickStart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;教程1第4步&lt;/strong&gt;，注意域名应和管理服务器上的一致，只需配置受管理服务器即可，因为当前域只有一台计算机，所以可以不用配置计算机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用镜像方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;教程2-4.5. 复制域到另一台物理机&lt;/strong&gt;，管理服务器配置好后，打包域然后解压到受管理服务器上。如果部署了项目之后再打包会连项目一起打包，建议打包之后再部署项目。参考命令如下，注意是在两台计算机&lt;code&gt;%WL_HOME%\common\bin\&lt;/code&gt;目录下运行命令提示符，分别输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pack -managed&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -domain&lt;span class="o"&gt;=&lt;/span&gt;d:&lt;span class="se"&gt;\w&lt;/span&gt;eblogic&lt;span class="se"&gt;\u&lt;/span&gt;ser_projects&lt;span class="se"&gt;\d&lt;/span&gt;omains&lt;span class="se"&gt;\b&lt;/span&gt;ase_domain -template&lt;span class="o"&gt;=&lt;/span&gt;d:&lt;span class="se"&gt;\b&lt;/span&gt;ase_domain.jar -template_name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;base_domain&amp;quot;&lt;/span&gt;
unpack -domain&lt;span class="o"&gt;=&lt;/span&gt;d:&lt;span class="se"&gt;\w&lt;/span&gt;eblogic&lt;span class="se"&gt;\u&lt;/span&gt;ser_projects&lt;span class="se"&gt;\d&lt;/span&gt;omains&lt;span class="se"&gt;\b&lt;/span&gt;ase_domain -template&lt;span class="o"&gt;=&lt;/span&gt;d:&lt;span class="se"&gt;\b&lt;/span&gt;ase_domain.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意&lt;strong&gt;多台计算机WebLogic版本应一致，JDK根据部署的项目可以不一致&lt;/strong&gt;。简单的集群使用第一种方法更便捷，复杂的集群推荐使用第二种方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;启动管理服务器和受管理服务器&lt;/h4&gt;
&lt;p&gt;首先&lt;strong&gt;启动管理服务器&lt;/strong&gt;，参考&lt;strong&gt;教程1-5.1 启动节点1的管理服务器&lt;/strong&gt;或&lt;strong&gt;教程2-4.7.1。&lt;/strong&gt;为了不在每次启动时输入用户名和密码，可以在&lt;code&gt;%DOMAIN_HOME%\servers\AdminServer\security\&lt;/code&gt;下新建&lt;strong&gt;boot.properties&lt;/strong&gt;文件，内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;域登录名
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;对应密码
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;启动受管理服务器&lt;/strong&gt;也有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接启动&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;教程1-5.2、5.3和5.4&lt;/strong&gt;，参考命令如下，注意是在两台计算机&lt;code&gt;%DOMAIN_HOME%\bin\&lt;/code&gt;目录下运行命令提示符，&lt;strong&gt;地址都用管理服务器的地址&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;startManagedWebLogic.cmd Server-1 http://192.168.1.103:7001
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一次启动时会提示输入用户名或密码，之后会在&lt;code&gt;%DOMAIN_HOME%\servers\Server-1\security\&lt;/code&gt;下生成登录信息文件&lt;strong&gt;boot.properties&lt;/strong&gt;，如果没有的话自己建一个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意如果要通过节点管理器启动一定要配置boot.properties&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过节点管理器启动&lt;/p&gt;
&lt;p&gt;默认节点管理器通过&lt;code&gt;%WL_HOME%\server\bin\&lt;/code&gt;目录下&lt;strong&gt;startNodeManager.cmd&lt;/strong&gt;启动，为全局管理器，默认配置文件目录为&lt;code&gt;%WL_HOME%\common\nodemanager\&lt;/code&gt;，记为&lt;strong&gt;目录A&lt;/strong&gt;。为了给不同域配置不同的节点管理器属性，具体配置如下（两台受管理服务器都要配置）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;复制&lt;strong&gt;startNodeManager.cmd&lt;/strong&gt;到&lt;code&gt;%DOMAIN_HOME%&lt;/code&gt;目录下，修改&lt;code&gt;NODEMGR_HOME&lt;/code&gt;为&lt;code&gt;%DOMAIN_HOME%\bin\nodemanager\&lt;/code&gt;（这里&lt;code&gt;%DOMAIN_HOME%&lt;/code&gt;要替换成实际的地址），记为&lt;strong&gt;目录B&lt;/strong&gt;。以管理员权限运行&lt;strong&gt;startNodeManager.cmd&lt;/strong&gt;，首次运行会在&lt;strong&gt;目录B&lt;/strong&gt;下生成相应的配置文件，观察控制台会报缺少&lt;strong&gt;nodemanager.domains&lt;/strong&gt;文件，关闭&lt;strong&gt;startNodeManager.cmd&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制&lt;strong&gt;目录A&lt;/strong&gt;中&lt;strong&gt;nodemanager.domains&lt;/strong&gt;到&lt;strong&gt;目录B&lt;/strong&gt;，打开修改，只留当前域的那一行即可，或者直接自己新建一个，注意Windows下目录&lt;code&gt;:&lt;/code&gt;和&lt;code&gt;\&lt;/code&gt;要记得转义。示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;base_domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;D&lt;span class="se"&gt;\:\\&lt;/span&gt;weblogic&lt;span class="se"&gt;\\&lt;/span&gt;user_projects&lt;span class="se"&gt;\\&lt;/span&gt;domains&lt;span class="se"&gt;\\&lt;/span&gt;base_domain
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;strong&gt;目录B&lt;/strong&gt;中&lt;strong&gt;nodemanager.properties&lt;/strong&gt;文件，配置&lt;code&gt;StartScriptEnabled=false&lt;/code&gt;，如果不修改，通过节点管理器启动不会加载你的登录信息文件，会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果新建&lt;strong&gt;计算机&lt;/strong&gt;时配置的&lt;strong&gt;节点管理器&lt;/strong&gt;类型为&lt;strong&gt;SSL&lt;/strong&gt;，确保&lt;code&gt;SecureListener=true&lt;/code&gt;；如果&lt;strong&gt;节点管理器&lt;/strong&gt;类型为&lt;strong&gt;普通&lt;/strong&gt;，要修改&lt;code&gt;SecureListener=false&lt;/code&gt;，否则从控制台启动服务器会报找不到节点管理器的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监听地址&lt;code&gt;ListenAddress&lt;/code&gt;可以置空。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置好后重新启动节点管理器，在控制台【环境】-&amp;gt;【计算机】，选择相应计算机【监视】-&amp;gt;【节点管理器状态】，状态为【可访问】，此时可以通过【服务器】-&amp;gt;【控制】通过节点管理器启动相应服务器。如果节点管理器状态为【非活动】，检查上面步骤，排查问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;strong&gt;直接启动&lt;/strong&gt;受管理服务器是没有办法通过控制台重启服务器的（可以关闭），所以建议&lt;strong&gt;通过节点管理器启动&lt;/strong&gt;。整体流程就是：启动管理服务器--启动受管理服务器的节点管理器-通过控制台启动受管理服务器。&lt;/p&gt;
&lt;h4&gt;节点管理器随Windows启动&lt;/h4&gt;
&lt;p&gt;参考&lt;strong&gt;教程2-5&lt;/strong&gt;，修改&lt;code&gt;%WL_HOME%\server\bin\&lt;/code&gt;目录下&lt;strong&gt;installNodeMgrSvc.cmd&lt;/strong&gt;的相应配置，执行即可。取消执行&lt;strong&gt;uninstallNodeMgrSvc.cmd&lt;/strong&gt;。&lt;/p&gt;
&lt;h2&gt;部署项目注意事项&lt;/h2&gt;
&lt;p&gt;部署项目参考&lt;strong&gt;教程1-6. 部署应用进行测试&lt;/strong&gt;，具体的应用各不相同，配置也不尽相同。可能遇到各种各样的问题，需要注意的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和开发沟通好，确保编译和部署的JDK环境一致或尽量一致；以及其他一些部署时需要单独配置的东西。修改JAVA_HOME等环境变量在&lt;code&gt;%DOMAIN_HOME%\bin\setDomainEnv.cmd&lt;/code&gt;，修改完后重启WebLogic即可。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bkjia.com/Javabc/1130171.html"&gt;应用部署weblogic 报错Unsupported major.minor version 51.0的解决过程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇到报错多查看日志，帮助文档，百度谷歌，同事前辈亲朋好友。。。头发掉光都解决不了就算了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="WebLogic"></category><category term="Cluster"></category></entry><entry><title>Oracle 十全大补汤</title><link href="https://jlhxxxx.github.io/oracle-rudiment.html" rel="alternate"></link><published>2018-05-12T00:00:00+08:00</published><updated>2018-05-12T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-05-12:/oracle-rudiment.html</id><summary type="html">&lt;h2&gt;安装卸载&lt;/h2&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;新手不建议安装发布不久的最新版本，一来新版本可能有一些新特性，但是网上相关的文章较少，入坑概率很大，老手尚需时间来适应，新手肯定更觉得难以上手了；二来旧版本相对比较稳定，各种文档丰富，常见BUG都有比较成熟的应对方法；三是要看使用环境了，兼容性是考虑重点，客户端和服务器端版本要尽量一致，这里的问题实在太多，几百M都讲不完，说多了都是眼泪。&lt;/p&gt;
&lt;p&gt;Oracle下载地址：&lt;a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html"&gt;【英文地址】&lt;/a&gt;、&lt;a href="http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html"&gt;【中文地址】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows下安装教程&lt;/strong&gt;：&lt;a href="https://blog.csdn.net/anxpp/article/details/51345074"&gt; Oracle 12c Windows安装、介绍及简单使用(图文) &lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网上这个教程以Oracle 12c为例，其他版本安装过程都差不多，注意&lt;strong&gt;安装位置&lt;/strong&gt;自己设置一下（只要设置Oracle基目录即可，其他目录会相应改变），&lt;strong&gt;字符集选UTF-8&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linux下安装教程&lt;/strong&gt;：todo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装过程中出现的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/qq_33530388/article/details/56669466"&gt;win10 下安装Oracle 11g(问题：环境不满足最低要求) &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先决条件检查有失败内容&lt;/p&gt;
&lt;p&gt;查看失败内容，如果是“预期值：N/A，实际值 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;安装卸载&lt;/h2&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;新手不建议安装发布不久的最新版本，一来新版本可能有一些新特性，但是网上相关的文章较少，入坑概率很大，老手尚需时间来适应，新手肯定更觉得难以上手了；二来旧版本相对比较稳定，各种文档丰富，常见BUG都有比较成熟的应对方法；三是要看使用环境了，兼容性是考虑重点，客户端和服务器端版本要尽量一致，这里的问题实在太多，几百M都讲不完，说多了都是眼泪。&lt;/p&gt;
&lt;p&gt;Oracle下载地址：&lt;a href="http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html"&gt;【英文地址】&lt;/a&gt;、&lt;a href="http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html"&gt;【中文地址】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows下安装教程&lt;/strong&gt;：&lt;a href="https://blog.csdn.net/anxpp/article/details/51345074"&gt; Oracle 12c Windows安装、介绍及简单使用(图文) &lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网上这个教程以Oracle 12c为例，其他版本安装过程都差不多，注意&lt;strong&gt;安装位置&lt;/strong&gt;自己设置一下（只要设置Oracle基目录即可，其他目录会相应改变），&lt;strong&gt;字符集选UTF-8&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linux下安装教程&lt;/strong&gt;：todo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装过程中出现的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/qq_33530388/article/details/56669466"&gt;win10 下安装Oracle 11g(问题：环境不满足最低要求) &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先决条件检查有失败内容&lt;/p&gt;
&lt;p&gt;查看失败内容，如果是“预期值：N/A，实际值：N/A”这样的，是因为操作系统未开启默认共享，导致Oracle无法检查环境的可用性 ，这种情况直接点击右上角的全部忽略，就可以进行下一步安装了；如果确实某方面配置不达标，就不建议继续安装了，装个PL/SQL连服务器上的库玩就好了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;卸载&lt;/h4&gt;
&lt;p&gt;新手导错库或者初始化配置错误不知道还原的方法怎么办，简单，卸载重装。^_^ 装装卸卸多了，就变成熟手了。这个有现成的教程，亲测好用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows下卸载&lt;/strong&gt;：&lt;a href="https://blog.csdn.net/Devin_LiuYM/article/details/59539020"&gt;彻底的卸载干净oracle 11g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux下卸载&lt;/strong&gt;：todo&lt;/p&gt;
&lt;h2&gt;常用目录结构&lt;/h2&gt;
&lt;p&gt;了解Oracle常用目录结构，将大大提高数据库管理与维护的工作效率 。这里以oracle 11g为例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.                                   # 主目录
│─ cfgtoollogs                       # 存放当运行dbca，dbua，emca，netca等图形化配置程序时的log
│─ flash_recovery_area                  # 存储并管理与备份和恢复有关的文件
│─ oradata                              # 数据库文件缺省存储目录
│   │─ dbf文件                        # 对应数据库中每个表空间
│   │─ ctl文件                          # 控制文件
│   └─ log文件                          # 对应重做日志文件组及其成员
└─ product                              # 客户端主目录
    └─ 11.2.0\dbhome_1
            │─ bin                  # 主要包含用于数据库管理的各种命令
            │─ css                  # 与Oracle Cluster Synchronization服务有关的文件
            │─ database
            │   └─ SPFILEORCL.ORA   # 服务器参数文件
            │─ dbs                    # 存放数据库服务器端的参数文件Spfile
            │─ demo                   # 存放数据库实例模式的脚本等
            │─ install              # 用于存储ORACLE安装后的端口号,iSQL*Plus以及Enterprise Manager Database Control启动并登录的方式等,如该路径下的portlist.ini
            │─ network/admin            # 有关监听器listener.ora和sqlnet.ora以及tnsnames.ora等
            └─ sysman/config            # 用于与Oracle Enterprise Management有关的端口管理等
                └─emkey.ora         # 加密密钥
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/leshami/article/details/5633093"&gt;Oracle 常用目录结构(10g) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;监听/别名配置&lt;/h2&gt;
&lt;p&gt;Oracle只有在&lt;strong&gt;服务器端配置监听是必须&lt;/strong&gt;的，在&lt;strong&gt;客户端可以不用配置&lt;/strong&gt;；而且一般服务器端都是监听本地，默认配置都有，不需要另外配置；只有监听其他地址才需要另外配置。网上很多配置监听的教程都是修改\oracle\product\11.2.0\dbhome_1\NETWORK\ADMIN\目录下tnsname.ora文件 ,其实是错误的，监听配置文件是同一目录下listener.ora文件，下面三篇文章感觉写的比较深入，但没有具体实践对比过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/nixiangxiren/article/details/6293880"&gt;oracle监听器配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/scofy0/article/details/49069217"&gt;Oracle监听配置详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/wanghongyun/p/6307548.html"&gt;Oracle的tnsnames.ora 监听配置文件详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么tnsname.ora文件是做什么用的呢，其实这是&lt;strong&gt;别名配置文件&lt;/strong&gt;，类似于hosts文件，提供tnsname到主机名或者ip的对应。&lt;/p&gt;
&lt;p&gt;配置监听和别名的格式是一样的，添加如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;                                                              &lt;span class="c1"&gt;--别名&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROTOCOL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1521&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;--地址及端口号&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONNECT_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVICE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orcl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                                         &lt;span class="c1"&gt;--实例名称&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;cmd命令&lt;/h2&gt;
&lt;p&gt;前提是本地安装了Oracle客户端，打开cmd，输入命令。由于帮助文档是中文的，所以不展开。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tnsping&lt;/code&gt;：诊断连接，查看帮助&lt;code&gt;tnsping&lt;/code&gt;，地址可以使用别名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;exp&lt;/code&gt;：导出，查看帮助&lt;code&gt;EXP HELP=Y&lt;/code&gt;，具体参见数据库迁移内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;imp&lt;/code&gt;：导入，查看帮助&lt;code&gt;IMP HELP=Y&lt;/code&gt;，具体参见数据库迁移内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sqlplus&lt;/code&gt;：链接，查看版本及帮助&lt;code&gt;sqlplus -H&lt;/code&gt;。链接成功后命令提示符变成&lt;code&gt;SQL&amp;gt;&lt;/code&gt;，此后可以输入正常SQL语句，记得句末带&lt;code&gt;;&lt;/code&gt;，正常退出使用&lt;code&gt;quit&lt;/code&gt;，其他输错密码或陷入不可描述状态退出可使用&lt;code&gt;Ctrl+C&lt;/code&gt;，或者直接关闭终端。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他命令还有很多，都在\oracle\product\11.2.0\dbhome_1\BIN\目录下，Windows下可执行命令为exe文件。&lt;/p&gt;
&lt;h2&gt;数据库初始化&lt;/h2&gt;
&lt;p&gt;数据库初始化主要分三步：创建表空间，建立用户和用户授权。&lt;/p&gt;
&lt;h4&gt;创建表空间&lt;/h4&gt;
&lt;p&gt;在创建表空间之前，首先要知道什么是表空间，并且要清楚临时表空间、永久表空间、默认表空间、UNDO表空间之间的区别，这里有几篇文章可以好好看下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/leshami/article/details/5611738"&gt;Oracle 表空间与数据文件&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/fnng/archive/2012/08/12/2634485.html"&gt;Oracle表空间（tablespaces）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blog.csdn.net/jmilk/article/details/51599260"&gt;Oracle 表空间详解&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.cnblogs.com/zhangyingai/p/7082594.html"&gt;临时表空间概念&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里需要注意的是，若数据库没有临时表空间，在创建正式表空间之前，应先建一个临时表空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概念掌握之后，在实际创建表空间之前，最好先查询一下，确保要使用的名称没有被使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--查看已有的表空间&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;v$tablespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--查看详细数据文件&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tablespace_name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dba_data_files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--查看表空间使用情况&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt;                     &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;TOTAL(G)&amp;quot;&lt;/span&gt;     &lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;USED(G)&amp;quot;&lt;/span&gt;      &lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;FREE(G)&amp;quot;&lt;/span&gt;      &lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;% USED&amp;quot;&lt;/span&gt;       &lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BYTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;% FREE&amp;quot;&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;SYS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SM$TS_AVAIL&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SYS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SM$TS_USED&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SYS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SM$TS_FREE&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt; 
&lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TABLESPACE_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要创建表空间，首先要使用有CREATE  TABLESPACE权限的用户，&lt;strong&gt;创建表空间语法&lt;/strong&gt;如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BIGFILE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SMALLFILE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;TEMPORARY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;tablespace_name&lt;/span&gt;
&lt;span class="n"&gt;DATAFILE&lt;/span&gt; &lt;span class="n"&gt;datafile&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TEMPFILE&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MINIMUM&lt;/span&gt; &lt;span class="n"&gt;EXTENT&lt;/span&gt; &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;extent&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BLOCKSIZE&lt;/span&gt; &lt;span class="n"&gt;blocksize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;COMPRESS&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCOMPRESS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;STORAGE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;storage&lt;/span&gt; &lt;span class="n"&gt;clause&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;LOGGING&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOLOGGING&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;FORCE&lt;/span&gt; &lt;span class="n"&gt;LOGGING&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ONLINE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;OFFLINE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;EXTENT&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="k"&gt;DICTIONARY&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;LOCAL&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AUTOALLOCATE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;UNIFORM&lt;/span&gt; &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SEGMENT&lt;/span&gt; &lt;span class="k"&gt;SPACE&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="n"&gt;MANUAL&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;AUTO&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FLASHBACK&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;OFF&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linuxidc.com/Linux/2016-12/138981.htm"&gt;Oracle create tablespace 创建表空间语法详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法看起来有点复杂，但是实际应用中并不是每个选项都需要配置，你只需知道能配置哪些就好，下面举一些栗子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--创建临时表空间&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TEMPORARY&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;TEMP&lt;/span&gt; 
&lt;span class="n"&gt;TEMPFILE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/u02/oradata/temp.dbf&amp;#39;&lt;/span&gt; 
&lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; 
&lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; 
&lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="mi"&gt;20480&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; 
&lt;span class="n"&gt;EXTENT&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--创建单个表空间    &lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;TEST&lt;/span&gt;                                  &lt;span class="c1"&gt;--名称&lt;/span&gt;
  &lt;span class="n"&gt;DATAFILE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d:\work\oracle\oradata\test\TEST.DBF&amp;#39;&lt;/span&gt;       &lt;span class="c1"&gt;--存储位置&lt;/span&gt;
  &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;                                            &lt;span class="c1"&gt;--初始大小&lt;/span&gt;
  &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;                                         &lt;span class="c1"&gt;--自动增长&lt;/span&gt;
  &lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="n"&gt;UNLIMITED&lt;/span&gt;                           &lt;span class="c1"&gt;--每次递增32M&lt;/span&gt;
  &lt;span class="n"&gt;EXTENT&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="k"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                              &lt;span class="c1"&gt;--本地管理&lt;/span&gt;

&lt;span class="c1"&gt;--创建多个表空间        &lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;TS_IMAGEDATA&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt;
&lt;span class="n"&gt;DATAFILE&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;E:&amp;quot;ORACLE&amp;quot;ORADATA&amp;quot;DATA_01.DBF&amp;#39;&lt;/span&gt;  &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;REUSE&lt;/span&gt;    
                &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;    
                &lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;51200&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="mi"&gt;3900&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
          &lt;span class="s1"&gt;&amp;#39;E:&amp;quot;ORACLE&amp;quot;ORADATA&amp;quot;XL&amp;quot;DATA_02.DBF&amp;#39;&lt;/span&gt;  &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;REUSE&lt;/span&gt;    
                &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;    
                &lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;51200&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="mi"&gt;3900&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
          &lt;span class="s1"&gt;&amp;#39;E:&amp;quot;ORACLE&amp;quot;ORADATA&amp;quot;XL&amp;quot;DATA_03.DBF&amp;#39;&lt;/span&gt;  &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;REUSE&lt;/span&gt;    
                &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;    
                &lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;51200&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="mi"&gt;3900&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
          &lt;span class="s1"&gt;&amp;#39;E:&amp;quot;ORACLE&amp;quot;ORADATA&amp;quot;XL&amp;quot;DATA_04.DBF&amp;#39;&lt;/span&gt;  &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;REUSE&lt;/span&gt;    
                &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;    
                &lt;span class="k"&gt;NEXT&lt;/span&gt; &lt;span class="mi"&gt;51200&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;MAXSIZE&lt;/span&gt; &lt;span class="mi"&gt;3900&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;    
&lt;span class="n"&gt;EXTENT&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="k"&gt;LOCAL&lt;/span&gt;    
&lt;span class="n"&gt;SEGMENT&lt;/span&gt; &lt;span class="k"&gt;SPACE&lt;/span&gt; &lt;span class="n"&gt;MANAGEMENT&lt;/span&gt; &lt;span class="n"&gt;AUTO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--创建UNDO表空间       &lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;UNDO&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;ts_undo01&lt;/span&gt;    
      &lt;span class="n"&gt;DATAFILE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/data/ts_undo01.dbf&amp;#39;&lt;/span&gt;      
      &lt;span class="k"&gt;SIZE&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;REUSE&lt;/span&gt;    
      &lt;span class="n"&gt;AUTOEXTEND&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;建立用户&lt;/h4&gt;
&lt;p&gt;在建立用户之前，最好也先查询一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dba_users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xlbd.me/query-oracle-users/"&gt;查询oracle中所有用户信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建立用户当然也要使用有建立用户权限的账户，&lt;a href="https://www.jianshu.com/p/c25dcdbaf797"&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;：创建一个名为&lt;code&gt;maxsu&lt;/code&gt;的新用户，密码&lt;code&gt;passwd1234&lt;/code&gt;，默认表空间为&lt;code&gt;tbs_perm_01&lt;/code&gt;，配额为&lt;code&gt;20MB&lt;/code&gt;，使用&lt;code&gt;tbs_temp_01&lt;/code&gt; 临时表空间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;maxsu&lt;/span&gt;
  &lt;span class="n"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;passwd1234&lt;/span&gt;
  &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;tbs_perm_01&lt;/span&gt;
  &lt;span class="k"&gt;TEMPORARY&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;tbs_temp_01&lt;/span&gt;
  &lt;span class="n"&gt;QUOTA&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;tbs_perm_01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Oracle12中建立本地用户需要在用户名前加&lt;code&gt;C##&lt;/code&gt;，我试用了一下就卸载了。T_T&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;授权用户&lt;/h4&gt;
&lt;p&gt;当然首先了解下用户权限相关概念，初始化这里的授权一般只是授予用户的系统权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.csdn.net/junmail/article/details/4381287"&gt;Oracle用户、权限、角色管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统权限分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBA：拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。（&lt;strong&gt;此权限慎授&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;RESOURCE：拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。&lt;/li&gt;
&lt;li&gt;CONNECT：拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;系统权限只能由DBA用户授出或收回：sys, system(最开始只能是这两个用户)&lt;/p&gt;
&lt;p&gt;普通用户通过授权可以具有与system相同的用户权限，但永远不能达到与sys用户相同的权限，system用户的权限也可以被回收。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--系统权限授权&lt;/span&gt;
&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;CONNECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESOURCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DBA&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt;&lt;span class="n"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;]...;&lt;/span&gt;

&lt;span class="c1"&gt;--系统权限传递：增加WITH ADMIN OPTION选项，则得到的权限可以传递。&lt;/span&gt;
&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;CONNECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESOURCE&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;ADMIN&lt;/span&gt; &lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--系统权限回收&lt;/span&gt;
&lt;span class="k"&gt;REVOKE&lt;/span&gt; &lt;span class="k"&gt;CONNECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RESOURCE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;删除表空间和用户&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--删除表空间&lt;/span&gt;
&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;TABLESPACE&lt;/span&gt; &lt;span class="n"&gt;tablespace_name&lt;/span&gt; &lt;span class="k"&gt;INCLUDING&lt;/span&gt; &lt;span class="n"&gt;CONTENTS&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;DATAFILES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--删除用户：加上CASCADE则将用户连同其创建的东西全部删除&lt;/span&gt;
&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;导出/导入数据&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：我们导出/导入数据，肯定是要通过Oracle自带的可执行程序来完成数据的导入导出工作，所以要安装Oracle客户端；同时导出/导入的用户必须要有导出/导入的权限才行。&lt;/p&gt;
&lt;p&gt;导出/导入一般有两种方法：&lt;/p&gt;
&lt;h4&gt;1. 以cmd命令操作符导入导出&lt;/h4&gt;
&lt;p&gt;导出/导入的&lt;strong&gt;基本语法&lt;/strong&gt;如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXP&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt; &lt;span class="n"&gt;KEYWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;IMP&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt; &lt;span class="n"&gt;KEYWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;具体的&lt;code&gt;KEYWORD&lt;/code&gt;可以通过&lt;code&gt;EXP/IMP HELP=Y&lt;/code&gt;查看，这里有几个注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@dbname&lt;/code&gt;为实例名称，远程服务器一般是&lt;code&gt;@IP/实例名&lt;/code&gt;，本地可以省略IP，可以使用别名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;full=y&lt;/code&gt;表示&lt;strong&gt;全库&lt;/strong&gt;（是整个数据库）导出/导入（&lt;strong&gt;慎用！&lt;/strong&gt;），这个需要有DBA权限的用户，如果只要导出某个用户的所有数据，请不要加上&lt;code&gt;full=y&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果导入的表已经存在，直接导入会报错，加上&lt;code&gt;ignore=y&lt;/code&gt;，对该表就不进行导入 ；如果是表数据不全，可以删掉该表再加上关键字&lt;code&gt;tables=...&lt;/code&gt;重新导入。&lt;/li&gt;
&lt;li&gt;如果使用sys账户链接导出某个用户数据，使用&lt;code&gt;exp "'sys/passwd@orcl as SYSDBA'" file=d:\test.dmp owner=ts&lt;/code&gt;，注意&lt;code&gt;"'sys/passwd@orcl as SYSDBA'"&lt;/code&gt;这里用了两组引号，如果只用一组引号，需要用&lt;code&gt;\&lt;/code&gt;转义：&lt;code&gt;exp \"sys/passwd@orcl as SYSDBA\" file=d:\test.dmp owner=ts&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果使用&lt;code&gt;KEYWORD=(value1,value2,...,valueN)&lt;/code&gt;，括号也需要转义：&lt;code&gt;KEYWORD=\(value1,value2,...,valueN\)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;上述2点其实就是括号和引号需要转义。&lt;/li&gt;
&lt;li&gt;如果导入的用户和导出的用户不一致，记得加上&lt;code&gt;fromuser&lt;/code&gt;和&lt;code&gt;touser&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;导出/导入最好最好加上&lt;code&gt;log&lt;/code&gt;选项，方便查看过程中遇到的错误，如果有哪张表有问题，可以另外单独处理。最可怕的就是你不知道库没导全。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2. 用PL/SQL Developer工具导出/导入&lt;/h4&gt;
&lt;p&gt;PL/SQL连上数据库后，也可以进行数据库的导出/导入，但是这里要注意PL/SQL的导出有两部分内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tools-&amp;gt;export user objects&lt;/strong&gt;：导出的.sql文件是建表语句（包括存储结构、函数、包等内容，&lt;strong&gt;不包含表数据&lt;/strong&gt;，&lt;strong&gt;不包含dblink&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tools-&amp;gt;export tables&lt;/strong&gt;：导出的是表结构和表数据（&lt;strong&gt;只有表&lt;/strong&gt;，不包含其他内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意导出时要选择导出的用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以要完整的导出用户数据，必须将user objects和tables都导出；完整的导入先导入user objects，再导入tables，如果还有dblink，需要手动复制粘贴导入（需要dblink链接的数据库密码）。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PL/SQL export tables有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Oracle导出&lt;/strong&gt;：其实就是用Oracle客户端的EXP导出，跟cmd导出指定表是一样的，只是不用输命令，但是这里只能用本地客户端的EXP命令，如果本地Oracle版本和服务器版本不一致，可能会有兼容性问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SQL插入&lt;/strong&gt;：导出的是SQL语句，通用性比较好，方便查看或修改。缺点是日志要全部导出操作完成才能查看，如果表数据量大会有卡死的错觉；而且效率似乎比用EXP低，适合小数据量导入导出。勾选&lt;code&gt;删掉表&lt;/code&gt;选项，导入时会在插入表数据前先删掉表，然后重建表插入数据，好处就是如果已存在的表有数据就会直接替换掉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果表包含有CLOB等类型字段的话，是无法导出sql文件的。导出时会有报错提示，可以把这个表单独拿出来用&lt;strong&gt;Oracle导出&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PL/SQL Developer&lt;/strong&gt;：用PL/SQL自带工具导出/导入，导出为.pde格式 ，效率最低（没试过），好处是不需要安装客户端，应该适合少量数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;总结&lt;/h4&gt;
&lt;p&gt;从效率上来说，用EXP/IMP最好，最好的导出/导入方法是在服务器本地导出/导入，这样的好处一是导出/导入的客户端版本和服务器版本一致，不存在兼容性问题（只是单纯的导出或者导入操作不存在兼容性问题，如果导出的服务器和导入的服务器版本不一致，还是有可能有兼容性问题）；二是服务器本地导出速度更快；三是个人电脑关机不影响服务器操作。而且使用EXP/IMP比较方便，一个命令就解决了，但是遇到兼容性问题不太好处理。&lt;/p&gt;
&lt;p&gt;从通用性来说，用PL/SQL的SQL插入比较好，而且不容易出现兼容性问题，即使出现了，直接修改SQL语句也比较方便。但是使用PL/SQL容易导不全，需要仔细检查。&lt;/p&gt;
&lt;p&gt;如果数据量大的话，建议不要一次性导出/导入，分开导出/导入更安全。&lt;/p&gt;
&lt;h4&gt;数据导出/导入完整流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;了解&lt;/strong&gt;要导出和导入的数据库情况，包括Oracle版本，用户权限，需要导出的数据的大致大小，有无特殊数据类型，有没有依赖其他库的东西，dblink链接密码等，要是能确定具体导哪些表哪些存储过程最好，这样一是导出数据量比较小，二是可以排除其他无效数据的影响；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导出&lt;/strong&gt;时对照HELP文档检查导出语句，确保需要配置的KEYWORD都有且正确，记得加上日志选项，导出完毕查看日志，若有报错可能需要单独处理；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导入&lt;/strong&gt;时按照上面初始化内容：建立表空间，建立用户并授权，检查导入语句正确无误后开始执行导入，若导入的用户名和导出的用户名不一致，需要加上&lt;code&gt;fromuser&lt;/code&gt;和&lt;code&gt;touser&lt;/code&gt;；导入完毕查看日志，若有报错可能需要单独处理；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查&lt;/strong&gt;数据是否正确导入，是否有遗漏项；没有问题后编译无效对象，PL/SQL有个按钮直接就能执行，编译完毕后如果仍存在无效对象，检查原库对象是否有效，若是也无效就不用管了（毕竟可能有一些遗留问题），否则需要排查问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整理&lt;/strong&gt;导出导入过程相关资料，这样下一次重复工作就变得简单了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;曾经遇到的问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导出报错：数据库链接口令无效&lt;/p&gt;
&lt;p&gt;数据库链接指的就是dblink，这个问题只发生在EXP下，一般是导出客户端版本低于服务器端，解决方法一是在服务器本地导出避开兼容性问题；二是另外备份好dblink，删除后再导出，导出后记得恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;错误使用&lt;code&gt;full=y&lt;/code&gt;导出：导入时各种报错&lt;/p&gt;
&lt;p&gt;这个只有新手才会犯的错误，搞清楚概念就不会发生了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OEM创建&lt;/h2&gt;
&lt;h4&gt;todo&lt;/h4&gt;
&lt;p&gt;question 1：oem是个what？&lt;/p&gt;
&lt;p&gt;question 2：why should we build oem？&lt;/p&gt;
&lt;p&gt;question 3：how to？&lt;/p&gt;</content><category term="Oracle"></category><category term="Rudiment"></category></entry><entry><title>win10下安装CentOS双系统</title><link href="https://jlhxxxx.github.io/win-install-centos.html" rel="alternate"></link><published>2018-05-02T00:00:00+08:00</published><updated>2018-05-02T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-05-02:/win-install-centos.html</id><summary type="html">&lt;p&gt;用惯了Windows，但是要学Linux，所以决定装个双系统。一开始装的是Ubuntu，傻瓜式安装，界面也漂亮，但是装软件时出现了依赖性问题，网上搜的方法大部分就一个&lt;code&gt;sudo apt-get -f install&lt;/code&gt;解决，但是我输完命令又出现校验和不符无法安装的问题，没有找到很好的解决办法（虽然我觉得可能是服务器的问题，当然我也没有很用力去找，只尝试了一晚上就放弃了）。一怒之下决定换个系统，Liunx系统那么多，总有一个适合自己的。&lt;/p&gt;
&lt;p&gt;百度了下，Linux系统大致分两类：一类是RedHat系列，包括RedHat、CentOS、Fedora等，包管理工具yum；另一类是Debian系列，包括Debian、Ubuntu等，包管理工具apt-get 。由于公司服务器用的是RedHat的，所以不想浪费时间，我决定找个RedHat系列的，其中CentOS稳定性最好，是大部分服务器的配置，那就尝试下吧。下面进入正题：&lt;/p&gt;
&lt;h2&gt;第一步：下载镜像文件&lt;/h2&gt;
&lt;p&gt;CentOS官方下载地址：&lt;a href="https://www.centos.org/download/"&gt;https://www.centos.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CentOS官网上，提供了三种ISO镜像文件的下载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DVD …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;用惯了Windows，但是要学Linux，所以决定装个双系统。一开始装的是Ubuntu，傻瓜式安装，界面也漂亮，但是装软件时出现了依赖性问题，网上搜的方法大部分就一个&lt;code&gt;sudo apt-get -f install&lt;/code&gt;解决，但是我输完命令又出现校验和不符无法安装的问题，没有找到很好的解决办法（虽然我觉得可能是服务器的问题，当然我也没有很用力去找，只尝试了一晚上就放弃了）。一怒之下决定换个系统，Liunx系统那么多，总有一个适合自己的。&lt;/p&gt;
&lt;p&gt;百度了下，Linux系统大致分两类：一类是RedHat系列，包括RedHat、CentOS、Fedora等，包管理工具yum；另一类是Debian系列，包括Debian、Ubuntu等，包管理工具apt-get 。由于公司服务器用的是RedHat的，所以不想浪费时间，我决定找个RedHat系列的，其中CentOS稳定性最好，是大部分服务器的配置，那就尝试下吧。下面进入正题：&lt;/p&gt;
&lt;h2&gt;第一步：下载镜像文件&lt;/h2&gt;
&lt;p&gt;CentOS官方下载地址：&lt;a href="https://www.centos.org/download/"&gt;https://www.centos.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CentOS官网上，提供了三种ISO镜像文件的下载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DVD ISO：标准安装版，一般下载这个就可以了（推荐）&lt;/li&gt;
&lt;li&gt;Everything ISO：对完整版安装盘的软件进行补充，集成所有软件（包含CentOS7的一套完整的软件包，可以用来安装系统或者填充本地镜像）&lt;/li&gt;
&lt;li&gt;Minimal ISO：迷你版，小巧、安装快速、自带的软件少&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二步：在Windows中为Linux分出磁盘空间&lt;/h2&gt;
&lt;p&gt;这个不做详细介绍，方法很多。可以用DiskGenius拆分原系统分区，之后删除要分给Linux的分区即可，不需要格式化。我的是500G固态硬盘，分了200G给Linux。&lt;/p&gt;
&lt;h2&gt;第三步：制作U盘启动盘&lt;/h2&gt;
&lt;p&gt;这里推荐使用UltraISO，首先&lt;strong&gt;打开&lt;/strong&gt;镜像文件，然后&lt;strong&gt;启动--写入硬盘映像&lt;/strong&gt;，选择U盘，写入方式默认的&lt;strong&gt;USB-HDD+&lt;/strong&gt;即可，然后执行&lt;strong&gt;写入&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前我用的是Universal-USB-Installer，可能兼容性不太好，在安装的时候出现&lt;strong&gt;设置基础软件仓库时出错&lt;/strong&gt;，换成UltraISO问题解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;第四步：利用U盘引导（重点）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重启电脑后，进入boot界面，选择USB启动，进入CentOS初始界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-01.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-01.jpg?raw=true"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里不管怎么选择都是安装不了的，因为默认的安装路径不是U盘，所以需要手动指定，注意那行提示：&lt;code&gt;Press Tab for full configuration...&lt;/code&gt;，UEFI引导的电脑显示的是&lt;code&gt;Press e for full configuration...&lt;/code&gt;。按&lt;code&gt;Tab&lt;/code&gt;或&lt;code&gt;e&lt;/code&gt;进入配置界面，配置界面大概三行文字，我们只要修改第二行带&lt;code&gt;inst.stage2=hd..&lt;/code&gt;的就好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setparams &lt;span class="s2"&gt;&amp;quot;Install CentOS 7&amp;quot;&lt;/span&gt; Install
    limuze /image/vmlinuz inst.stage2&lt;span class="o"&gt;=&lt;/span&gt;hd:LABEL&lt;span class="o"&gt;=&lt;/span&gt;CentOS&lt;span class="se"&gt;\x&lt;/span&gt;&lt;span class="m"&gt;207&lt;/span&gt;&lt;span class="se"&gt;\x&lt;/span&gt;20x86_64 quiet  
    initrdefi /image/pxeboot/initrd.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候我们并不知道U盘盘符，所以要先查询一下，将第二行从&lt;code&gt;inst.stage2=hd...&lt;/code&gt;开始改成&lt;code&gt;linux dd quiet&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setparams &lt;span class="s2"&gt;&amp;quot;Install CentOS 7&amp;quot;&lt;/span&gt; Install
  limuze /image/vmlinuz linux dd quiet
  initrdefi /image/pxeboot/initrd.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来按&lt;code&gt;Ctrl+x&lt;/code&gt;执行，就可以看到所有盘符和编号了，大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-02.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-02.png?raw=true"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，CentOS镜像的位置（也就是我的U盘）是sdb4。记住这个sdb4。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;然后强行关机重新U盘引导，进入CentOS配置界面，这次将第二行改成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;limuze /image/vmlinuz inst.stage2&lt;span class="o"&gt;=&lt;/span&gt;hd:/dev/sdb4
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来按&lt;code&gt;Ctrl+x&lt;/code&gt;执行，进入安装界面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四步：安装系统（重点）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装界面如图，这里最好选择英文，这样系统装好之后才不会出现&lt;code&gt;桌面&lt;/code&gt;、&lt;code&gt;下载&lt;/code&gt;等中文名称的目录，装好系统之后再改成中文就好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-03.jpg" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-03.jpg?raw=true"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件选择，如果需要桌面系统，选择GNOME或KDE都可以，否则默认安装是最小安装模式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-04.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-04.png?raw=true"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置安装位置，注意选择第二步中分出来的空闲磁盘：&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-05.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-05.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;进入手动分区界面，不想思考的话选择自动创建就好：&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10-install-centos-06.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/win10-install-centos-06.png?raw=true"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置好后，开始安装，安装完毕设置下root账户密码，再创建个用户就好。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五步：配置启动项&lt;/h2&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linuxidc.com/Linux/2016-06/132051.htm"&gt;Win10下安装CentOS 7双系统详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Linux"></category><category term="CentOS"></category></entry><entry><title>Oracle LOOP循环</title><link href="https://jlhxxxx.github.io/oracle-loop.html" rel="alternate"></link><published>2018-04-26T00:00:00+08:00</published><updated>2018-04-26T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-26:/oracle-loop.html</id><summary type="html">&lt;p&gt;本文基本全文转载，原文链接：&lt;a href="http://www.cnblogs.com/Richardzhu/p/3455806.html"&gt;Oracle PL/SQL之LOOP循环控制语句&lt;/a&gt;。作者写的看着很舒服，所以收藏起来自己用。主要是一些语法格式，适合新手对照练习。&lt;/p&gt;
&lt;h2&gt;一、基本的LOOP语句&lt;/h2&gt;
&lt;p&gt;LOOP语句的基本语法结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;LOOP&lt;/span&gt;
 &lt;span class="k"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;【语法说明】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;label_name&amp;gt;&amp;gt;&lt;/code&gt;：LOOP结构的标签，是可选项。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOOP&lt;/code&gt;：LOOP循环开始标志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement&lt;/code&gt;：LOOP语句中循环执行的语句序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;END LOOP&lt;/code&gt;：LOOP循环结束标志，可以添加LOOP结构的标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实例一： 利用EXIT...WHEN结束循环操作&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;serveroutput&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--exit when&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;declare&lt;/span&gt;
   &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fst_loop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;本文基本全文转载，原文链接：&lt;a href="http://www.cnblogs.com/Richardzhu/p/3455806.html"&gt;Oracle PL/SQL之LOOP循环控制语句&lt;/a&gt;。作者写的看着很舒服，所以收藏起来自己用。主要是一些语法格式，适合新手对照练习。&lt;/p&gt;
&lt;h2&gt;一、基本的LOOP语句&lt;/h2&gt;
&lt;p&gt;LOOP语句的基本语法结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;LOOP&lt;/span&gt;
 &lt;span class="k"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;【语法说明】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;label_name&amp;gt;&amp;gt;&lt;/code&gt;：LOOP结构的标签，是可选项。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOOP&lt;/code&gt;：LOOP循环开始标志。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement&lt;/code&gt;：LOOP语句中循环执行的语句序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;END LOOP&lt;/code&gt;：LOOP循环结束标志，可以添加LOOP结构的标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实例一： 利用EXIT...WHEN结束循环操作&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;serveroutput&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--exit when&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;declare&lt;/span&gt;
   &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fst_loop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_rlt = &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;fst_loop&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LOOP循环已经结束！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;LOOP循环已经结束&lt;/span&gt;&lt;span class="err"&gt;！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;实例二： 利用IF...EXIT语句结束循环&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--if exit&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;declare&lt;/span&gt;
   &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;fst_loop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_rlt = &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
       &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;变量的值已经大于3，当前值为&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;fst_loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="n"&gt;fst_loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LOOP循环已经结束！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="err"&gt;变量的值已经大于&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;，当前值为&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;LOOP循环已经结束&lt;/span&gt;&lt;span class="err"&gt;！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;二、WHILE...LOOP结构&lt;/h2&gt;
&lt;p&gt;WHILE...LOOP结构和基本的LOOP语句不同，它本身可以结束LOOP循环。WHILE关键词后面需要有布尔表达式，当WHILE后面的布尔表达式为TRUE时，则循环体重的语句序列被执行1次，然后会重新判断WHILE后面的表达式是否为TRUE，只有当WHILE后的布尔表达式为FALSE时，才结束整个LOOP循环。&lt;/p&gt;
&lt;p&gt;该语句结构的相关语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;boolean_expression&lt;/span&gt;
&lt;span class="n"&gt;LOOP&lt;/span&gt;
&lt;span class="k"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;【语法说明】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean_expression&lt;/code&gt;：布尔表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statement&lt;/code&gt;：语句序列，当&lt;code&gt;boolean_expression&lt;/code&gt;为&lt;code&gt;TRUE&lt;/code&gt;时，该语句序列可获得执行权。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实例&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--while...loop&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;declare&lt;/span&gt;
   &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;while_loop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_rlt = &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="n"&gt;while_loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WHILE循环已经结束！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;WHILE循环已经结束&lt;/span&gt;&lt;span class="err"&gt;！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;三、FOR...LOOP结构&lt;/h2&gt;
&lt;p&gt;FOR...LOOP语句可以遍历某个范围的整数，该范围被FOR和LOOP关键词封闭。首次进入循环时，循环范围将被确定，并且以后不会再次计算。每循环一次，循环指数将会自动增加1。&lt;/p&gt;
&lt;p&gt;FOR...LOOP语句的语法结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;REVERSE&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lower_bound&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;upper_bound&lt;/span&gt;
&lt;span class="n"&gt;LOOP&lt;/span&gt;
&lt;span class="k"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label_name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;【语法说明】&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index_name&lt;/code&gt;：循环计数器，是一个变量，它可以得到当前的循环指数。需要注意的是，不能为其手工赋值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REVERSE&lt;/code&gt;：可选项，指定循环方式。默认的循环方式由下边界(&lt;code&gt;lower_bound&lt;/code&gt;)到上边界(&lt;code&gt;upper_bound&lt;/code&gt;)。使用该选项则从上标界到下标界。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower_bound&lt;/code&gt;：循环范围的下边界。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper_bound&lt;/code&gt;：循环范围的上边界。&lt;/li&gt;
&lt;li&gt;下边界和上边界之间的"&lt;code&gt;..&lt;/code&gt;"不能省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实例&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;--for..loop&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v_rlt = &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;v_rlt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;dbms_output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FOR循环已经结束！&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="o"&gt;/&lt;/span&gt;

&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;v_rlt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;FOR循环已经结束&lt;/span&gt;&lt;span class="err"&gt;！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Oracle"></category><category term="LOOP"></category></entry><entry><title>Oracle SEQUENCE使用</title><link href="https://jlhxxxx.github.io/oracle-sequence.html" rel="alternate"></link><published>2018-04-26T00:00:00+08:00</published><updated>2018-04-26T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-26:/oracle-sequence.html</id><summary type="html">&lt;p&gt;序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。序列主要用于生成主键。&lt;/p&gt;
&lt;h2&gt;建立序列&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;INCREMENT&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;MINVALUE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOMAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NOMINVALUE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CYCLE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCYCLE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CACHE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCACHE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INCREMENT BY&lt;/code&gt;：用于定义序列的步长，如果省略，则默认为&lt;code&gt;1&lt;/code&gt;，如果出现负值，则代表序列的值是按照此步长递减的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START WITH&lt;/code&gt; ：定义序列的初始值(即产生的第一个值)，默认为&lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAXVALUE&lt;/code&gt; ：定义序列生成器能产生的最大值。选项&lt;code&gt;NOMAXVALUE&lt;/code&gt;是默认选项，代表没有最大值定义，这时对于递增序列，系统能够产生的最大值是10的27次方；对于递减序列 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。序列主要用于生成主键。&lt;/p&gt;
&lt;h2&gt;建立序列&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;INCREMENT&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;MINVALUE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOMAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NOMINVALUE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CYCLE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCYCLE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CACHE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCACHE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INCREMENT BY&lt;/code&gt;：用于定义序列的步长，如果省略，则默认为&lt;code&gt;1&lt;/code&gt;，如果出现负值，则代表序列的值是按照此步长递减的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START WITH&lt;/code&gt; ：定义序列的初始值(即产生的第一个值)，默认为&lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAXVALUE&lt;/code&gt; ：定义序列生成器能产生的最大值。选项&lt;code&gt;NOMAXVALUE&lt;/code&gt;是默认选项，代表没有最大值定义，这时对于递增序列，系统能够产生的最大值是10的27次方；对于递减序列，最大值是&lt;code&gt;-1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINVALUE&lt;/code&gt;：定义序列生成器能产生的最小值。选项&lt;code&gt;NOMINVALUE&lt;/code&gt;是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是？10的26次方；对于递增序列，最小值是&lt;code&gt;1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CYCLE&lt;/code&gt;和&lt;code&gt;NOCYCLE&lt;/code&gt;：表示当序列生成器的值达到限制值后是否循环。&lt;code&gt;CYCLE&lt;/code&gt;代表循环，&lt;code&gt;NOCYCLE&lt;/code&gt;代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值；对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHE&lt;/code&gt;：(缓冲)定义存放序列的内存块的大小，默认为20。&lt;code&gt;NOCACHE&lt;/code&gt;表示不对序列进行内存缓冲。&lt;strong&gt;对序列进行内存缓冲，可以改善序列的性能。&lt;/strong&gt;（高级操作，一般人用不到）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用序列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;取序列的下一值（首次取初值）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取序列当前值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currval&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看所有序列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;user_sequences&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新序列&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;INCREMENT&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;MAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;MINVALUE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOMAXVALUE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;NOMINVALUE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CYCLE&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCYCLE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;CACHE&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NOCACHE&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：&lt;code&gt;ALTER&lt;/code&gt;不能修改&lt;code&gt;START WITH&lt;/code&gt;，如果要修改，只能删除后重建。&lt;/p&gt;
&lt;h2&gt;删除序列&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;举例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;SEQ_CCI554&lt;/span&gt; &lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;INCREMENT&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;MAXVALUE&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;DECLARE&lt;/span&gt;
  &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;BEGIN&lt;/span&gt;
  &lt;span class="n"&gt;LOOP&lt;/span&gt;
    &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;CI54&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CCI554&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AAC001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AAB001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CCD001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="s1"&gt;&amp;#39;80&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;030005&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;LPAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEQ_CCI554&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;622925199012056023&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0205000027&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;170010602898&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;EXIT&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;其中&lt;code&gt;||&lt;/code&gt;用于字符串拼接，&lt;code&gt;LPAD()&lt;/code&gt;用于固定位数字符串补齐。&lt;/p&gt;
&lt;p&gt;需要注意的是，首句&lt;code&gt;CREATE SEQUENCE&lt;/code&gt;只能执行一次，序列创建后除非&lt;code&gt;DROP&lt;/code&gt;，否则不会自动消失。我在使用&lt;code&gt;JDBC&lt;/code&gt;连接的时候就犯了这个错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;小技巧：重置序列&lt;/h2&gt;
&lt;p&gt;重置序列的方法一般有两个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一种方法是&lt;code&gt;DROP&lt;/code&gt;之后重新&lt;code&gt;CREATE&lt;/code&gt;，这种方式有很多弊端，&lt;code&gt;DROP&lt;/code&gt;之后&lt;code&gt;CREATE&lt;/code&gt;之前依赖它的函数和存储过程将失效，需要重新编译。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种方法比较巧妙，利用递增参数：先查出&lt;code&gt;SEQUENCE&lt;/code&gt;的&lt;code&gt;currval&lt;/code&gt;，记为&lt;code&gt;value&lt;/code&gt;，然后将递增参数改为&lt;code&gt;-value&lt;/code&gt;，取它的&lt;code&gt;nextval&lt;/code&gt;，再将递增参数改回来。奉上大佬写的存储过程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;SEQ_RESET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence_name&lt;/span&gt; &lt;span class="n"&gt;VARCHAR2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="nb"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;TSQL&lt;/span&gt; &lt;span class="n"&gt;VARCHAR2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;BEGIN&lt;/span&gt;
 &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;IMMEDIATE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SELECT &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.currval FROM dual&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;TSQL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ALTER SEQUENCE &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; INCREMENT BY &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;IMMEDIATE&lt;/span&gt; &lt;span class="n"&gt;TSQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;IMMEDIATE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SELECT &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.nextval FROM dual&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;TSQL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ALTER SEQUENCE &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;sequence_name&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; INCREMENT BY 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;EXECUTE&lt;/span&gt; &lt;span class="k"&gt;IMMEDIATE&lt;/span&gt; &lt;span class="n"&gt;TSQL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;SEQ_RESET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://lehsyh.iteye.com/blog/473210"&gt;ORACLE序列的使用(oracle sequence)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/huangzhen/archive/2011/09/19/2181257.html"&gt;Oracle重置序列(不删除重建方式)&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Oracle"></category><category term="SEQUENCE"></category></entry><entry><title>搬瓦工SS教程</title><link href="https://jlhxxxx.github.io/banwagong-ss.html" rel="alternate"></link><published>2018-04-25T00:00:00+08:00</published><updated>2018-04-25T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-25:/banwagong-ss.html</id><summary type="html">&lt;p&gt;之前一直折腾免费的翻墙软件，免费软件唯一的优点就是免费。但是从另一种角度来说，免费软件其实也蛮贵的。商业社会，时间宝贵，现在我更注重效率，尽量在时间和金钱上取一个平衡吧。由于首次操作，所以试了下年付$19.9最便宜的套餐，加上优惠码，折合人民币每个月10块钱，十块钱，买不了吃亏买不了上当，还因为可以用支付宝付款，挺方便的。切换CN2机房后年流量为188G，我觉得对于非视频用户来说应该是够用了。&lt;/p&gt;
&lt;h2&gt;一、套餐选购&lt;/h2&gt;
&lt;p&gt;搬瓦工主页：&lt;a href="https://bwh1.net/"&gt;地址1&lt;/a&gt;、&lt;a href="https://bandwagonhost.com/"&gt;地址2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/32811900"&gt;搬瓦工2018年新手选购指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bandwagonhost.net/"&gt;搬瓦工中文网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://banwagong.cn/"&gt;搬瓦工VPS中文网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意如果是未注册用户，不要先注册再购买，因为新注册的时候需要输入验证码，而验证码是需要翻墙才能看到的，直接购买就能顺便注册。除了邮箱和密码，其他信息随便填就好了。&lt;/p&gt;
&lt;p&gt;购买之后邮箱里会收到几封邮件，告诉你IP address，SSH Port，和初始密码，不过都不需要记，IP和Port进入服务器控制面板就能看到，密码可以随时重新生成。&lt;/p&gt;
&lt;h2&gt;二、安装Shadowsocks&lt;/h2&gt;
&lt;p&gt;参考教程：&lt;a href="https://www.cnlinode.com/ban_wa_gong_qu_xiao_le_yi_jian_an_zhuang_shadowsocks_zui_xin_ban_wa_gong_ss_jiao_cheng/"&gt;搬瓦工取消了一键安装Shadowsocks，最新搬瓦工SS教程&lt;/a&gt;第二步方法二 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前一直折腾免费的翻墙软件，免费软件唯一的优点就是免费。但是从另一种角度来说，免费软件其实也蛮贵的。商业社会，时间宝贵，现在我更注重效率，尽量在时间和金钱上取一个平衡吧。由于首次操作，所以试了下年付$19.9最便宜的套餐，加上优惠码，折合人民币每个月10块钱，十块钱，买不了吃亏买不了上当，还因为可以用支付宝付款，挺方便的。切换CN2机房后年流量为188G，我觉得对于非视频用户来说应该是够用了。&lt;/p&gt;
&lt;h2&gt;一、套餐选购&lt;/h2&gt;
&lt;p&gt;搬瓦工主页：&lt;a href="https://bwh1.net/"&gt;地址1&lt;/a&gt;、&lt;a href="https://bandwagonhost.com/"&gt;地址2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/32811900"&gt;搬瓦工2018年新手选购指南&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.bandwagonhost.net/"&gt;搬瓦工中文网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://banwagong.cn/"&gt;搬瓦工VPS中文网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意如果是未注册用户，不要先注册再购买，因为新注册的时候需要输入验证码，而验证码是需要翻墙才能看到的，直接购买就能顺便注册。除了邮箱和密码，其他信息随便填就好了。&lt;/p&gt;
&lt;p&gt;购买之后邮箱里会收到几封邮件，告诉你IP address，SSH Port，和初始密码，不过都不需要记，IP和Port进入服务器控制面板就能看到，密码可以随时重新生成。&lt;/p&gt;
&lt;h2&gt;二、安装Shadowsocks&lt;/h2&gt;
&lt;p&gt;参考教程：&lt;a href="https://www.cnlinode.com/ban_wa_gong_qu_xiao_le_yi_jian_an_zhuang_shadowsocks_zui_xin_ban_wa_gong_ss_jiao_cheng/"&gt;搬瓦工取消了一键安装Shadowsocks，最新搬瓦工SS教程&lt;/a&gt;第二步方法二。&lt;/p&gt;
&lt;p&gt;登录网站后，地址栏输入&lt;code&gt;https://kiwivm.64clouds.com/preloader.php?load=/main-exec.php?mode=extras_shadowsocks&lt;/code&gt;进入隐藏的Shadowsocks Server，傻瓜式一键安装，安装好之后页面会显示Shadowsocks的参数及软件下载地址。&lt;/p&gt;
&lt;p&gt;下载对应系统的Shadowsocks，配置好相应服务器参数，&lt;strong&gt;启用系统代理&lt;/strong&gt;，系统代理选择&lt;strong&gt;pac模式&lt;/strong&gt;。如果想更专业一点，还可以配合SwitchyOmega使用，具体教程参考&lt;a href="https://blog.csdn.net/shouldnotappearcalm/article/details/77900399"&gt;shadowsocks配合chrome插件SwitchyOmega&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里要注意如果你已经安装了SwitchyOmega并且有相应配置，一定不要直接导入配置（会覆盖），手动配置也很简单，主要就是配一个规则列表地址：&lt;code&gt;https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;三、优化&lt;/h2&gt;
&lt;p&gt;到第二步已经可以访问外网了，如果觉得访问速度比较慢，还有一些优化办法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换机房（注意购买的套餐必须是可以切换机房的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.bandwagonhost.net/1314.html"&gt;切换到CN2&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装BBR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.bandwagonhost.net/268.html"&gt;搬瓦工 VPS 安装并开启 Google BBR 教程（KVM / OpenVZ）&lt;/a&gt;&lt;/p&gt;</content><category term="Shadowsocks"></category><category term="Bandwagon"></category></entry><entry><title>Oracle取系统时间</title><link href="https://jlhxxxx.github.io/oracle-get-sysdate.html" rel="alternate"></link><published>2018-04-23T00:00:00+08:00</published><updated>2018-04-23T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-23:/oracle-get-sysdate.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;取今天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取上个月今天的前一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_MONTHS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取本月第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取本季度第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取上季度第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_MONTHS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取今年第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;取今天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取上个月今天的前一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_MONTHS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取本月第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取本季度第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取上季度第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_MONTHS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取今年第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取去年第一天&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADD_MONTHS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取上周第一天（周日）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYYMMDD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取当前时间（24h）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HH24&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取当前时间&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取当前时间前1s&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH24:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取当前时间前1min&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH24:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取当前时间前1h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH24:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取今天凌晨1点半&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TO_CHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYSDATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;YYYY-MM-DD HH24:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="Oracle"></category></entry><entry><title>windows下用Pelican+GitHub搭建静态博客</title><link href="https://jlhxxxx.github.io/pelican-github.html" rel="alternate"></link><published>2018-04-16T00:00:00+08:00</published><updated>2018-04-16T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-16:/pelican-github.html</id><summary type="html">&lt;h2&gt;一、使用GitHub Pages创建个人博客页面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先到GitHub进行账号注册：&lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;创建新仓库，不用新建readme.md，注意仓库名使用&lt;em&gt;username.github.io&lt;/em&gt;的格式，这里&lt;em&gt;username&lt;/em&gt;改成自己的用户名。&lt;/li&gt;
&lt;li&gt;创建SSH密钥并上传到GitHub。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;二、安装Python、Pelican、Markdown和make&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Python。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Pelican。建议在虚拟环境virtualenv下使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装virtualenv（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了使用virtualenv更方便，可以借助 virtualenvwrapper（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenvwrapper-win
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置虚拟环境目录，默认创建的虚拟环境位于&lt;strong&gt;C:\Users\username\&lt;/strong&gt;下，可以通过环境变量 &lt;code&gt;WORKON_HOME&lt;/code&gt; 来定制。&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;计算机--&amp;gt;属性-- …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;一、使用GitHub Pages创建个人博客页面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首先到GitHub进行账号注册：&lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;创建新仓库，不用新建readme.md，注意仓库名使用&lt;em&gt;username.github.io&lt;/em&gt;的格式，这里&lt;em&gt;username&lt;/em&gt;改成自己的用户名。&lt;/li&gt;
&lt;li&gt;创建SSH密钥并上传到GitHub。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;二、安装Python、Pelican、Markdown和make&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装Python。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Pelican。建议在虚拟环境virtualenv下使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装virtualenv（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了使用virtualenv更方便，可以借助 virtualenvwrapper（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenvwrapper-win
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置虚拟环境目录，默认创建的虚拟环境位于&lt;strong&gt;C:\Users\username\&lt;/strong&gt;下，可以通过环境变量 &lt;code&gt;WORKON_HOME&lt;/code&gt; 来定制。&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;计算机--&amp;gt;属性--&amp;gt;高级系统设置--&amp;gt;环境变量--&amp;gt;系统变量&lt;/strong&gt;中新建“&lt;strong&gt;变量名&lt;/strong&gt;”：&lt;code&gt;WORKON_HOME&lt;/code&gt;，&lt;strong&gt;变量值&lt;/strong&gt;：&lt;code&gt;你自定义的路径&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建并激活虚拟环境（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkvirtualenv pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 激活虚拟环境
workon {虚拟环境目录}
# 停止虚拟环境
deactivate
# 进入虚拟环境目录
cdvirtualenv
# 列出所有虚拟环境
lsvirtualenv
# 检查虚拟环境是否激活（其他方法也可）
pip list
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装make并设置好环境变量&lt;a href="http://gnuwin32.sourceforge.net/packages/make.htm"&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;三、创建博客骨架&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;搭建博客目录（若使用虚拟环境必须在激活虚拟环境前提下执行下列命令，blog文件夹不需要在虚拟环境文件夹下）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;pelican-quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;quickstart并非必须，如果想要使用非默认主题，可以下载对应主题的demo，解压至博客目录，然后按照下面的步骤修改相应的Makefile和pelicanconf.py即可，主题和插件下载建议使用&lt;code&gt;git clone&lt;/code&gt;命令，方便以后更新。
2. 根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置。完成后将会在根目录生成以下文件：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;                &lt;span class="c1"&gt;# 所有文章放于此目录&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# 存放手工创建的静态页面&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;      &lt;span class="c1"&gt;# 用于开启测试服务器&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt;               &lt;span class="c1"&gt;# 方便管理博客的Makefile&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;                 &lt;span class="c1"&gt;# 静态生成文件&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;plugins&lt;/span&gt;                &lt;span class="c1"&gt;# 插件（自己另外下载）&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;themes&lt;/span&gt;                 &lt;span class="c1"&gt;# 主题（自己另外下载）&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;         &lt;span class="c1"&gt;# 配置文件&lt;/span&gt;
&lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;         &lt;span class="c1"&gt;# 配置文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入output文件夹，把自己刚刚建好的username.github.io版本库clone下来，注意使用SSH方式，这里以及后文中的username要替换成自己的GitHub用户名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="nv"&gt;@github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置一键上传部署到GitHub。打开根目录下的Makefile文件，修改以下三个地方，设置完后，以后写完文章就可以通过在blog根目录下执行&lt;code&gt;make github&lt;/code&gt;进行&lt;strong&gt;一键部署&lt;/strong&gt;了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/output/username.github.io    
&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;    
&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;    
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git add . &lt;span class="p"&gt;;&lt;/span&gt; git commit -am &lt;span class="s1"&gt;&amp;#39;your comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;四、通过Markdown试写博文并上传GitHub发布&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建一个页面：这里以创建 About页面为例。在content目录创建pages子目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后创建About.md并填入下面内容（一定要有title）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;        
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;

&lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相关介绍请参见&lt;a href="http://pelican-zh.readthedocs.org/en/latest/zh-cn/"&gt;官方文档。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建导航目录项：Menu Item设置。在你的博客中，可设置相应的菜单项，菜单项是通过pelicanconf.py设置的，具体如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;MENUITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ITEM1&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;http://github.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
             &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ITEM2&amp;quot;&lt;/span&gt;,URL&lt;span class="o"&gt;)&lt;/span&gt;,
            ......&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Makefile目录下执行以下命令，即可在本机http://127.0.0.1:8000看到效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;publish&lt;/span&gt;
&lt;span class="err"&gt;make&lt;/span&gt; &lt;span class="err"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;五、安装主题&lt;/h2&gt;
&lt;p&gt;主题下载好后，对应在在pelicanconf.py中添加主题选择条目，&lt;a href="https://github.com/getpelican/pelican-themes"&gt;主题下载地址&lt;/a&gt;，这里我选用的是&lt;a href="https://github.com/jsliang/pelican-fresh/tree/ce1afc067931bb571a0f5970366a2e7d733d0d6a"&gt;fresh&lt;/a&gt;主题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;主题目录（相对或绝对路径）&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;推荐主题：&lt;a href="https://github.com/talha131/pelican-elegant/tree/44c8fbcfe631784f84c8b92b7273280b3c956182"&gt;elegant&lt;/a&gt;，&lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; ，&lt;a href="https://github.com/jsliang/pelican-fresh/tree/ce1afc067931bb571a0f5970366a2e7d733d0d6a"&gt;fresh&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;六、添加第三方评论系统&lt;/h2&gt;
&lt;p&gt;由于Disqus需要翻墙，而国内又没有什么比较好的第三方评论系统，网上搜了一堆，最后决定用github issues来实现。本来想用&lt;a href="https://github.com/imsun/gitment"&gt;gitment&lt;/a&gt;的，但是不知道哪里配置问题，无法初始化issue，然后用的是&lt;a href="https://github.com/gitalk/gitalk"&gt;gitalk&lt;/a&gt;，界面也比gitment好看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gitalk&lt;/p&gt;
&lt;p&gt;直接到theme--tempaltes下，参考gitalk配置，新建gitalk.html，这里我稍微配置了个环境变量&lt;code&gt;GITALK_OWNER&lt;/code&gt;。而且我的&lt;code&gt;repo&lt;/code&gt;没有选择博客文件所在仓库，而是另外建了一个仓库，注意&lt;code&gt;createIssueManually&lt;/code&gt;最好设置为&lt;code&gt;true&lt;/code&gt;，这样文章发表之后在评论处点击初始化就可以自动生成一个issue，当然每篇文章都要点一下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% if GITALK_OWNER %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gitalk-container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gitalk_owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ GITALK_OWNER }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gitalk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Gitalk&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;clientID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a61......&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;38c......&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;gitalk_owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;gitalk_owner&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="nx"&gt;distractionFreeMode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Facebook-like distraction free mode&lt;/span&gt;
      &lt;span class="nx"&gt;createIssueManually&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;gitalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gitalk-container&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后打开article.html，找到&lt;code&gt;{% if DISQUS_SITENAME %}&lt;/code&gt;这行，从这之后开始修改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% if COMMENT %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Comments&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% include &amp;#39;gitalk.html&amp;#39; %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行这里不用disqus，所以改成&lt;code&gt;{% if COMMENT %}&lt;/code&gt;，主要就是加了这么一行&lt;code&gt;{% include 'gitalk.html' %}&lt;/code&gt;。记得在pelicanconf.py文件中要配置&lt;code&gt;COMMENT = True&lt;/code&gt;和&lt;code&gt;GITALK_OWNER&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disqus&lt;/p&gt;
&lt;p&gt;这个配置相对简单。首先到&lt;a href="https://disqus.com/"&gt;disqus&lt;/a&gt;注册账号；&lt;strong&gt;create a new site&lt;/strong&gt;，记住你填的&lt;code&gt;shortname&lt;/code&gt;；然后选择新建的&lt;strong&gt;site&lt;/strong&gt;，&lt;strong&gt;Installing Disqus&lt;/strong&gt;，下一步下一步把代码复制出来；然后在theme--tempaltes下，新建disqus.html，把刚才代码粘贴进去去掉注释，增加头部&lt;code&gt;{% if DISQUS_SITENAME %}&lt;/code&gt;尾部&lt;code&gt;{% endif %}&lt;/code&gt;和&lt;code&gt;DISQUS_SITENAME&lt;/code&gt;变量，最后就变成这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% if DISQUS_SITENAME %}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;disqus_thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ DISQUS_SITENAME }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// DON&amp;#39;T EDIT BELOW THIS LINE&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;disqus_shortname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data-timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;noscript&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后修改article.html，同gitalk一样，在&lt;code&gt;&amp;lt;h2&amp;gt;Comments&amp;lt;/h2&amp;gt;&lt;/code&gt;后加上一行&lt;code&gt;{% include 'disqus.html' %}&lt;/code&gt;。最后只需在pelicanconf.py文件中配置&lt;code&gt;DISQUS_SITENAME = 'shortname'&lt;/code&gt;即可启用disqus。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;七、添加Webmaster&lt;/h2&gt;
&lt;p&gt;为了让博客能在网上被搜索到，需要搜索引擎将网站收录，所以要添加Webmaster。这里我添加了Google和Bing收录，因为GitHub屏蔽了百度网站爬虫，所以除非你搭建在自己的服务器上，否则是没办法添加百度收录的。&lt;/p&gt;
&lt;p&gt;下面以Bing收录为例，首先打开&lt;a href="https://www.bing.com/toolbox/webmaster/"&gt;Bing网站管理员工具&lt;/a&gt;，用Microsoft账号登录，都是中文界面，按照说明添加网站并验证通过。&lt;/p&gt;
&lt;p&gt;然后准备sitemap，到博客主目录下，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pelicanconf.py里配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican-plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sitemap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;priorities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changefreqs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;daily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后&lt;code&gt;make html&lt;/code&gt;在output目录下可以看到已经生成了网站的sitemap；&lt;code&gt;make github&lt;/code&gt;后，提交网站sitemap地址到到Bing Webmaster：&lt;code&gt;https://username.github.io/sitemap.xml&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;八、添加站内搜索&lt;/h2&gt;
&lt;p&gt;这一步必须建立在第七步前提下，否则是搜不到东西的。以添加Bing站内搜索为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;a href="https://www.customsearch.ai/"&gt;Bing Custom Search&lt;/a&gt;，选择&lt;strong&gt;New Instance；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后在&lt;strong&gt;Definition Editor&lt;/strong&gt;下添加自己的网站，添加好后，可以在右侧尝试搜索一下（前提是第七步，不知道为什么我在Bing上已经能搜索到自己的网站了，然而站内搜索始终搜不到内容，换成Google就没有问题，但是Google要fq，流程上都差不多，所以这里以Bing为例）；&lt;/li&gt;
&lt;li&gt;第三步&lt;strong&gt;API EndPoint&lt;/strong&gt;，&lt;strong&gt;Query&lt;/strong&gt;为自定义API名称可以任意，&lt;strong&gt;Subscription Key&lt;/strong&gt;可以选择申请一个免费的&lt;strong&gt;Issue free trial key&lt;/strong&gt;，注意要申请Custom Search API，填完之后记得&lt;strong&gt;Call&lt;/strong&gt;一下，看看返回值是否正确，有问题检查你的key；&lt;/li&gt;
&lt;li&gt;第四步&lt;strong&gt;Hosted UI&lt;/strong&gt;下选择搜索框的样式，填入第三步的key。保存之后将下面的代码复制出来，粘贴到任意你想添加搜索框的地方。因为fresh主题自带Google站内搜索，所以这里我取了个巧，直接套用Google的CSS。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加Google站内搜索就更简单，到&lt;a href="https://cse.google.com/"&gt;Google站内搜索&lt;/a&gt;网站上申请一个ID，调整好样式后将ID添加到pelicanconf.py即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GOOGLE_CUSTOM_SEARCH_SIDEBAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your ID&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;九、添加分享按钮&lt;/h2&gt;
&lt;p&gt;fresh主题自带&lt;a href="http://www.sharethis.com/"&gt;ShareThis&lt;/a&gt;分享功能，申请账号并将ShareThis Pub Key添加到pelicanconf.py中就可以使用，具体参考&lt;a href="https://github.com/jsliang/pelican-fresh/tree/ce1afc067931bb571a0f5970366a2e7d733d0d6a"&gt;官方文档&lt;/a&gt;。添加第三方的跟添加其他插件类似。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SHARETHIS_PUB_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your ShareThis Pub Key&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;添加了分享按钮之后，网站加载速度变得很慢，所以最后我把这个功能关掉了，本来也用不上。对我来说，必要的功能有，其他越简单越好。&lt;/p&gt;
&lt;h2&gt;十、最重要的事&lt;/h2&gt;
&lt;p&gt;为了看起来完美，所以加了第十条。不过这确实也是最重要的，我觉得应该关心博客的内容而不是样式。&lt;/p&gt;
&lt;h2&gt;PS：更新补丁&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【20190505】由于主题年久失修，已经跟不上Pelican的更新了，在执行构建时报错：&lt;code&gt;CRITICAL: TypeError: not all arguments converted during string formatting&lt;/code&gt;，解决方法如下：&lt;/p&gt;
&lt;p&gt;从&lt;a href="https://github.com/getpelican/pelican/issues/2487"&gt;On fresh install: "simple" theme build error using publishconf.py&lt;/a&gt;跳转到&lt;a href="https://github.com/getpelican/pelican/pull/2494"&gt;Fall back to the old feed settings if using an older theme #2494&lt;/a&gt;，再跳转到&lt;a href="https://github.com/getpelican/pelican/pull/2494/commits/f995e6d3b9bd2e4bfebfa184c310f96a6c1cc850"&gt;Fall back to the old feed settings for older theme&lt;/a&gt;，修改&lt;a href="https://github.com/getpelican/pelican/pull/2494/commits/f995e6d3b9bd2e4bfebfa184c310f96a6c1cc850#diff-7695706f16562cf5ca9c5f3354c146d1"&gt;pelican/writers.py&lt;/a&gt;解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/suke99/p/5355894.html"&gt;windows下安装Python虚拟环境virtualenvwrapper-win&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/cciejh/p/blog_building.html"&gt;Pelican＋GitHub博客搭建详细教程&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.okbase.net/WJ5888/archive/45851.html"&gt;pelican创建博客常见问题汇总&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="GitHub"></category><category term="Pelican"></category><category term="Blog"></category></entry><entry><title>Postman入门第一坑：提取返回值</title><link href="https://jlhxxxx.github.io/postman-start.html" rel="alternate"></link><published>2018-04-13T00:00:00+08:00</published><updated>2018-04-13T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-13:/postman-start.html</id><summary type="html">&lt;p&gt;Postman是做接口测试的，但是很多接口并不是直接就能测，有的需要一些预处理。比如说身份认证，需要传递一个&lt;a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E4%BB%A4%E7%89%8C"&gt;token&lt;/a&gt;。如果做网页测试，一般打开登陆界面的时候就会生成一个token，如果返回值是json格式，用Postman从中提取值是很简单的，在Tests中输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//获取body中返回的所有参数&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//把返回参数中的keys设置为环境变量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-01.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-01.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回的header里，也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-02.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-02.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回值的body中，呵呵，网上并没有适合小白看的清晰的解决方法。我花了&lt;strong&gt;好长好长好长&lt;/strong&gt;时间才找到这么两行小字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//转换XML body为JSON对象&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那我的思路就有了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Postman是做接口测试的，但是很多接口并不是直接就能测，有的需要一些预处理。比如说身份认证，需要传递一个&lt;a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E4%BB%A4%E7%89%8C"&gt;token&lt;/a&gt;。如果做网页测试，一般打开登陆界面的时候就会生成一个token，如果返回值是json格式，用Postman从中提取值是很简单的，在Tests中输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//获取body中返回的所有参数&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;jsonData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//把返回参数中的keys设置为环境变量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-01.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-01.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回的header里，也很简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-02.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-02.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;如果token在返回值的body中，呵呵，网上并没有适合小白看的清晰的解决方法。我花了&lt;strong&gt;好长好长好长&lt;/strong&gt;时间才找到这么两行小字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//转换XML body为JSON对象&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那我的思路就有了：将html转换成json，再从json中提取token不就简单了。&lt;/p&gt;
&lt;p&gt;依然还是老办法，拿出我的终极武器——&lt;strong&gt;redmine&lt;/strong&gt;来测试。登陆页面的返回值大概是这样的，我们要提取的是&lt;code&gt;csrf-token&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Redmine&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Redmine&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;issue,bug,tracker&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;csrf-param&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authenticity_token&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;csrf-token&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;u9XfPXNDqQ/v+/xUtQuAjESgvNXCTHxCWW4NIZ/rJBmfZjzqJBVD1fDOxHnlbza4iDreX+St9SE9XFIN4on47Q==&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一开始我觉得可能是这样取值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;为了调试方便，我们这里取全局（globals）变量，因为环境（environment）变量只有在测试执行过程中才存在，测试执行完就释放了。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;send&lt;/code&gt;之后点右上角小眼睛，如果全局变量取到值的话这里会有显示的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="p-start-03.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-03.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;然而并没有，排查原因，把最后的&lt;code&gt;content&lt;/code&gt;去掉试试（为了看的更清楚，把&lt;code&gt;[4]&lt;/code&gt;也去掉）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候取到全局变量了，不过&lt;code&gt;[object Object],[object Object]...&lt;/code&gt;需要翻译啊，很明显取到&lt;code&gt;meta&lt;/code&gt;这一层是没错的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Postman-start-04.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/Postman-start-04.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;这时候需要一个将json转换成字符串的工具，方便我分析，然后就找到了&lt;code&gt;JSON.stringify()&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getstring&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-05.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-05.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;将json复制出来美化一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="postman-start-06.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-06.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;原来&lt;code&gt;meta&lt;/code&gt;下一层是个&lt;code&gt;$&lt;/code&gt;。事后才醒悟过来，&lt;code&gt;name&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;并不是&lt;code&gt;meta&lt;/code&gt;的下层，而是&lt;code&gt;meta&lt;/code&gt;的属性，&lt;code&gt;xml2Json()&lt;/code&gt;方法将属性转换成&lt;code&gt;$&lt;/code&gt;标记的下层。&lt;/p&gt;
&lt;p&gt;修改之后再次测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="postman-start-07.png" src="https://github.com/jlhxxxx/imgur/blob/master/blog/postman-start-07.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;完美解决。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;Postman从响应中提取值的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从json中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从html的Header中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getResponseHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Access-Token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从html的body中提取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jsonObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml2Json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将json object转换成字符串的函数&lt;code&gt;JSON.stringify(jsonObject)&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/JHblogs/p/6418802.html"&gt;Postman接口自动化，环境变量的用法详解（附Postman常用的方法）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Postman"></category><category term="Interface"></category><category term="Test"></category></entry><entry><title>Oracle奇技淫巧</title><link href="https://jlhxxxx.github.io/oracle-skills.html" rel="alternate"></link><published>2018-04-02T00:00:00+08:00</published><updated>2018-04-02T00:00:00+08:00</updated><author><name>Aman</name></author><id>tag:jlhxxxx.github.io,2018-04-02:/oracle-skills.html</id><summary type="html">&lt;h2&gt;SELECT 1 FROM DUAL&lt;/h2&gt;
&lt;p&gt;用PLSQL执行数据查询的时候，FROM子句是必须的，当不想查具体的表时，可以使用虚拟表dual。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;SYSDATE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;CASE语句&lt;/h2&gt;
&lt;p&gt;CASE表达式有两种形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;  
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--CASE搜索函数 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;SELECT 1 FROM DUAL&lt;/h2&gt;
&lt;p&gt;用PLSQL执行数据查询的时候，FROM子句是必须的，当不想查具体的表时，可以使用虚拟表dual。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SUCCESS&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;SYSDATE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;dual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;CASE语句&lt;/h2&gt;
&lt;p&gt;CASE表达式有两种形式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;  
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;--CASE搜索函数  &lt;/span&gt;
&lt;span class="k"&gt;CASE&lt;/span&gt;
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;  
&lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SELECT CASE WHEN 用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;  &lt;span class="n"&gt;AAC012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;
                       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                       &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
                       &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;MALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;COUNT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;
                       &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                       &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
                       &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;FEMALE&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;AC01&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;AAC002&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%19940911%&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;AAC012&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; 
        &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="err"&gt;表达式&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RESULT1&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="err"&gt;表达式&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RESULT2&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RESULT3&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;DUAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WHERE CASE WHEN 用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
   &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;
  &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CASE&lt;/span&gt; 
         &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMPARE_TYPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOME_TYPE&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;NOTHING%&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
         &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COMPARE_TYPE&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;T1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOME_TYPE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;NOTHING%&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
           &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
           &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GROUP BY CASE WHEN 用法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
    &lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;SEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;--别名&lt;/span&gt;
    &lt;span class="n"&gt;CUONT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;AC01&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;AAC002&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%19940911%&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="n"&gt;AAC004&lt;/span&gt;
        &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DECODE用法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;等价于IF-THEN-ELSE&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IF1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THEN1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IF2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THEN2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IF3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THEN3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;举例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;--SALARY&amp;gt;8000,加薪15%；SALARY&amp;lt;8000,加薪20%;SALARY=8000,加薪15%&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIGN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SALARY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SALARY&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SALARY&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;SALARY&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;EMPLOYEE&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;

&lt;span class="c1"&gt;--统计AC01表中19940911出生的男女数&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AAC004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;MALE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AAC004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;FEMALE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;AC01&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;AAC002&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%19940911%&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;

&lt;span class="c1"&gt;--另外一种实现方法&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AAC004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;AC01&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;AAC002&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%19940911%&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;DECODE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AAC004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MALE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FEMALE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/soundcode/p/5549901.html"&gt;Oracle CASE WHEN 用法介绍&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</content><category term="Oracle"></category><category term="CASE"></category><category term="DECODE"></category></entry></feed>